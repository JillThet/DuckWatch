
DuckWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000002f2  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000100  00800128  00800128  000003ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae9  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a3  00000000  00000000  00000fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ad  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  000019f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032c  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000424  00000000  00000000  00001e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002264  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 e2       	ldi	r26, 0x28	; 40
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

/* initialize shared variables */
char dbg_str[SERIAL_MAX_SEND];

int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	29 97       	sbiw	r28, 0x09	; 9
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	/* create serial object */
	serial ser_dev = serial(9600, 16000000);
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	34 e2       	ldi	r19, 0x24	; 36
  be:	44 ef       	ldi	r20, 0xF4	; 244
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	60 e8       	ldi	r22, 0x80	; 128
  c4:	75 e2       	ldi	r23, 0x25	; 37
  c6:	ce 01       	movw	r24, r28
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN6serialC1Ejm>
	
	// create a UVIndex sensor
	UVIndex my_UVIndex = UVIndex(&ser_dev, 7);
	*/
	// create a PIR sensor 
	PIR my_pir_ln1 = PIR(&ser_dev, 2);
  ce:	42 e0       	ldi	r20, 0x02	; 2
  d0:	be 01       	movw	r22, r28
  d2:	6f 5f       	subi	r22, 0xFF	; 255
  d4:	7f 4f       	sbci	r23, 0xFF	; 255
  d6:	ce 01       	movw	r24, r28
  d8:	07 96       	adiw	r24, 0x07	; 7
  da:	0e 94 7d 00 	call	0xfa	; 0xfa <_ZN3PIRC1EP6serialh>
		my_oneWire_surface_temp.oneWireTask();
				
		my_UVIndex.UVIndexTask();
		*/
		
		my_pir_ln1.PIRTask();
  de:	ce 01       	movw	r24, r28
  e0:	07 96       	adiw	r24, 0x07	; 7
  e2:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN3PIR7PIRTaskEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	83 ed       	ldi	r24, 0xD3	; 211
  ea:	90 e3       	ldi	r25, 0x30	; 48
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x46>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x50>
  f6:	00 00       	nop
  f8:	f2 cf       	rjmp	.-28     	; 0xde <main+0x38>

000000fa <_ZN3PIRC1EP6serialh>:
 * Description:	This constructor sets up the PIR sensor.
 * 
 * Parameters:	ptr_serial	- a reference to the serial debug object
 *				p 			- the pin on the ATmega328P the sensor outputs to
 ****************************************************************************/
PIR::PIR (serial *ptr_serial, uint8_t p)
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
{
	// initialize the pin and serial debug object
	pin = p;
 100:	4a 83       	std	Y+2, r20	; 0x02
	p_serial = ptr_serial;
 102:	79 83       	std	Y+1, r23	; 0x01
 104:	68 83       	st	Y, r22

	// sets the pin on the PIR_DDR to an output
	PIR_DDR &= ~(1 << pin);
 106:	84 b1       	in	r24, 0x04	; 4
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <_ZN3PIRC1EP6serialh+0x18>
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	4a 95       	dec	r20
 114:	e2 f7       	brpl	.-8      	; 0x10e <_ZN3PIRC1EP6serialh+0x14>
 116:	20 95       	com	r18
 118:	28 23       	and	r18, r24
 11a:	24 b9       	out	0x04, r18	; 4
	DBG(this->p_serial, "Callibrating...\r\n");
 11c:	82 e1       	ldi	r24, 0x12	; 18
 11e:	e0 e0       	ldi	r30, 0x00	; 0
 120:	f1 e0       	ldi	r31, 0x01	; 1
 122:	a8 e2       	ldi	r26, 0x28	; 40
 124:	b1 e0       	ldi	r27, 0x01	; 1
 126:	01 90       	ld	r0, Z+
 128:	0d 92       	st	X+, r0
 12a:	8a 95       	dec	r24
 12c:	e1 f7       	brne	.-8      	; 0x126 <_ZN3PIRC1EP6serialh+0x2c>
 12e:	68 e2       	ldi	r22, 0x28	; 40
 130:	71 e0       	ldi	r23, 0x01	; 1
 132:	88 81       	ld	r24, Y
 134:	99 81       	ldd	r25, Y+1	; 0x01
 136:	0e 94 31 01 	call	0x262	; 0x262 <_ZN6serial4sendEPc>
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	33 eb       	ldi	r19, 0xB3	; 179
 13e:	84 ec       	ldi	r24, 0xC4	; 196
 140:	94 e0       	ldi	r25, 0x04	; 4
 142:	21 50       	subi	r18, 0x01	; 1
 144:	30 40       	sbci	r19, 0x00	; 0
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	d9 f7       	brne	.-10     	; 0x142 <_ZN3PIRC1EP6serialh+0x48>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <_ZN3PIRC1EP6serialh+0x54>
 14e:	00 00       	nop
	_delay_ms(30000);
	DBG(this->p_serial, "PIR Constructor OK!\r\n");
 150:	86 e1       	ldi	r24, 0x16	; 22
 152:	e2 e1       	ldi	r30, 0x12	; 18
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	a8 e2       	ldi	r26, 0x28	; 40
 158:	b1 e0       	ldi	r27, 0x01	; 1
 15a:	01 90       	ld	r0, Z+
 15c:	0d 92       	st	X+, r0
 15e:	8a 95       	dec	r24
 160:	e1 f7       	brne	.-8      	; 0x15a <_ZN3PIRC1EP6serialh+0x60>
 162:	68 e2       	ldi	r22, 0x28	; 40
 164:	71 e0       	ldi	r23, 0x01	; 1
 166:	88 81       	ld	r24, Y
 168:	99 81       	ldd	r25, Y+1	; 0x01
 16a:	0e 94 31 01 	call	0x262	; 0x262 <_ZN6serial4sendEPc>
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <_ZN3PIR8isActiveEv>:
 *
 * Return:		bool - state of if an active signal was received
 ****************************************************************************/
bool PIR::isActive (void) 
{
	return PIR_PIN & (1 << pin);
 174:	23 b1       	in	r18, 0x03	; 3
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	a9 01       	movw	r20, r18
 17a:	fc 01       	movw	r30, r24
 17c:	02 80       	ldd	r0, Z+2	; 0x02
 17e:	02 c0       	rjmp	.+4      	; 0x184 <_ZN3PIR8isActiveEv+0x10>
 180:	55 95       	asr	r21
 182:	47 95       	ror	r20
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <_ZN3PIR8isActiveEv+0xc>
 188:	ca 01       	movw	r24, r20
}
 18a:	81 70       	andi	r24, 0x01	; 1
 18c:	08 95       	ret

0000018e <_ZN3PIR7PIRTaskEv>:
/*****************************************************************************
 * Method:		PIRTask
 * Description:	This method runs the PIR task.
 ****************************************************************************/
void PIR::PIRTask (void)
{
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	ec 01       	movw	r28, r24
			DBG(this->p_serial, "NOT ");
		}
		DBG(this->p_serial, "active.\r\n");
		*/
		
		if (isActive())
 194:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN3PIR8isActiveEv>
 198:	88 23       	and	r24, r24
 19a:	69 f0       	breq	.+26     	; 0x1b6 <_ZN3PIR7PIRTaskEv+0x28>
		{
			DBG(this->p_serial, "1");
 19c:	81 e3       	ldi	r24, 0x31	; 49
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 29 01 	sts	0x0129, r25
 1a4:	80 93 28 01 	sts	0x0128, r24
 1a8:	68 e2       	ldi	r22, 0x28	; 40
 1aa:	71 e0       	ldi	r23, 0x01	; 1
 1ac:	88 81       	ld	r24, Y
 1ae:	99 81       	ldd	r25, Y+1	; 0x01
 1b0:	0e 94 31 01 	call	0x262	; 0x262 <_ZN6serial4sendEPc>
 1b4:	0c c0       	rjmp	.+24     	; 0x1ce <_ZN3PIR7PIRTaskEv+0x40>
		}
		else
		{
			DBG(this->p_serial, "0");
 1b6:	80 e3       	ldi	r24, 0x30	; 48
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	90 93 29 01 	sts	0x0129, r25
 1be:	80 93 28 01 	sts	0x0128, r24
 1c2:	68 e2       	ldi	r22, 0x28	; 40
 1c4:	71 e0       	ldi	r23, 0x01	; 1
 1c6:	88 81       	ld	r24, Y
 1c8:	99 81       	ldd	r25, Y+1	; 0x01
 1ca:	0e 94 31 01 	call	0x262	; 0x262 <_ZN6serial4sendEPc>
		}
	}

	runs++;
 1ce:	80 91 27 02 	lds	r24, 0x0227
 1d2:	8f 5f       	subi	r24, 0xFF	; 255
 1d4:	80 93 27 02 	sts	0x0227, r24
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <_ZN6serial4initEv>:
 * 
 * Return:		bool - the status of the operation (true  = success,
 *													false = failure)
 ****************************************************************************/
void serial::init (void)
{
 1de:	fc 01       	movw	r30, r24
	/* calculate ubrr for desired baud rate */
	uint32_t ubrr = ((clk_speed / 16UL) / baud_rate) - 1;
 1e0:	82 81       	ldd	r24, Z+2	; 0x02
 1e2:	93 81       	ldd	r25, Z+3	; 0x03
 1e4:	a4 81       	ldd	r26, Z+4	; 0x04
 1e6:	b5 81       	ldd	r27, Z+5	; 0x05
 1e8:	bc 01       	movw	r22, r24
 1ea:	cd 01       	movw	r24, r26
 1ec:	68 94       	set
 1ee:	13 f8       	bld	r1, 3
 1f0:	96 95       	lsr	r25
 1f2:	87 95       	ror	r24
 1f4:	77 95       	ror	r23
 1f6:	67 95       	ror	r22
 1f8:	16 94       	lsr	r1
 1fa:	d1 f7       	brne	.-12     	; 0x1f0 <_ZN6serial4initEv+0x12>
 1fc:	20 81       	ld	r18, Z
 1fe:	31 81       	ldd	r19, Z+1	; 0x01
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	0e 94 55 01 	call	0x2aa	; 0x2aa <__udivmodsi4>
 208:	ba 01       	movw	r22, r20
 20a:	a9 01       	movw	r20, r18
 20c:	41 50       	subi	r20, 0x01	; 1
 20e:	51 09       	sbc	r21, r1
 210:	61 09       	sbc	r22, r1
 212:	71 09       	sbc	r23, r1
	UBRR0H = (uint8_t)(ubrr >> 8);
 214:	bb 27       	eor	r27, r27
 216:	a7 2f       	mov	r26, r23
 218:	96 2f       	mov	r25, r22
 21a:	85 2f       	mov	r24, r21
 21c:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (uint8_t)ubrr;
 220:	40 93 c4 00 	sts	0x00C4, r20
	
	/* Enable receiver and transmitter */
	UCSR0B = ((1 << RXEN0) | (1 << TXEN0));
 224:	88 e1       	ldi	r24, 0x18	; 24
 226:	80 93 c1 00 	sts	0x00C1, r24
	
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = ((1 << USBS0) | (3 << UCSZ00));
 22a:	8e e0       	ldi	r24, 0x0E	; 14
 22c:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0A &= ~(1 << U2X0);
 230:	e0 ec       	ldi	r30, 0xC0	; 192
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	8d 7f       	andi	r24, 0xFD	; 253
 238:	80 83       	st	Z, r24
 23a:	08 95       	ret

0000023c <_ZN6serialC1Ejm>:
 * Parameters:	baud - the baud rate to establish
 *				clk  - the clock speed of the device
 ****************************************************************************/
serial::serial (uint16_t baud, uint32_t clk)
{
	baud_rate = baud;		// store a local copy of baud rate
 23c:	fc 01       	movw	r30, r24
 23e:	71 83       	std	Z+1, r23	; 0x01
 240:	60 83       	st	Z, r22
	clk_speed = clk;		// store a local copy of clock speed of device
 242:	22 83       	std	Z+2, r18	; 0x02
 244:	33 83       	std	Z+3, r19	; 0x03
 246:	44 83       	std	Z+4, r20	; 0x04
 248:	55 83       	std	Z+5, r21	; 0x05
	
	init();
 24a:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN6serial4initEv>
 24e:	08 95       	ret

00000250 <_ZN6serial4sendEh>:
bool serial::send (uint8_t data)
{
	uint16_t cnt = 0;
	
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1 << UDRE0)))// && cnt < SERIAL_TIMEOUT)
 250:	e0 ec       	ldi	r30, 0xC0	; 192
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	85 ff       	sbrs	r24, 5
 258:	fd cf       	rjmp	.-6      	; 0x254 <_ZN6serial4sendEh+0x4>
		return false;
	}
	*/
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
 25a:	60 93 c6 00 	sts	0x00C6, r22
	
	return true;
}
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	08 95       	ret

00000262 <_ZN6serial4sendEPc>:
 * 
 * Parameters:	str - the string of data to be sent, maximum 255 bytes
 * Return:		uint8_t - the total number of characters successfully sent
 ****************************************************************************/
uint8_t serial::send (char *str)
{
 262:	ef 92       	push	r14
 264:	ff 92       	push	r15
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	fb 01       	movw	r30, r22
	uint8_t sent = 0;
	
	while (*str && sent < SERIAL_MAX_SEND)
 26e:	60 81       	ld	r22, Z
 270:	66 23       	and	r22, r22
 272:	99 f0       	breq	.+38     	; 0x29a <_ZN6serial4sendEPc+0x38>
 274:	8f 01       	movw	r16, r30
 276:	7c 01       	movw	r14, r24
 278:	0f 5f       	subi	r16, 0xFF	; 255
 27a:	1f 4f       	sbci	r17, 0xFF	; 255
 27c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if (send(*str++))
 27e:	c7 01       	movw	r24, r14
 280:	0e 94 28 01 	call	0x250	; 0x250 <_ZN6serial4sendEh>
 284:	88 23       	and	r24, r24
 286:	51 f0       	breq	.+20     	; 0x29c <_ZN6serial4sendEPc+0x3a>
		{
			sent++;
 288:	cf 5f       	subi	r28, 0xFF	; 255
 ****************************************************************************/
uint8_t serial::send (char *str)
{
	uint8_t sent = 0;
	
	while (*str && sent < SERIAL_MAX_SEND)
 28a:	f8 01       	movw	r30, r16
 28c:	61 91       	ld	r22, Z+
 28e:	8f 01       	movw	r16, r30
 290:	66 23       	and	r22, r22
 292:	21 f0       	breq	.+8      	; 0x29c <_ZN6serial4sendEPc+0x3a>
 294:	cf 3f       	cpi	r28, 0xFF	; 255
 296:	99 f7       	brne	.-26     	; 0x27e <_ZN6serial4sendEPc+0x1c>
 298:	01 c0       	rjmp	.+2      	; 0x29c <_ZN6serial4sendEPc+0x3a>
 * Parameters:	str - the string of data to be sent, maximum 255 bytes
 * Return:		uint8_t - the total number of characters successfully sent
 ****************************************************************************/
uint8_t serial::send (char *str)
{
	uint8_t sent = 0;
 29a:	c0 e0       	ldi	r28, 0x00	; 0
			break;
		}
	}
	
	return sent;
}
 29c:	8c 2f       	mov	r24, r28
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	ff 90       	pop	r15
 2a6:	ef 90       	pop	r14
 2a8:	08 95       	ret

000002aa <__udivmodsi4>:
 2aa:	a1 e2       	ldi	r26, 0x21	; 33
 2ac:	1a 2e       	mov	r1, r26
 2ae:	aa 1b       	sub	r26, r26
 2b0:	bb 1b       	sub	r27, r27
 2b2:	fd 01       	movw	r30, r26
 2b4:	0d c0       	rjmp	.+26     	; 0x2d0 <__udivmodsi4_ep>

000002b6 <__udivmodsi4_loop>:
 2b6:	aa 1f       	adc	r26, r26
 2b8:	bb 1f       	adc	r27, r27
 2ba:	ee 1f       	adc	r30, r30
 2bc:	ff 1f       	adc	r31, r31
 2be:	a2 17       	cp	r26, r18
 2c0:	b3 07       	cpc	r27, r19
 2c2:	e4 07       	cpc	r30, r20
 2c4:	f5 07       	cpc	r31, r21
 2c6:	20 f0       	brcs	.+8      	; 0x2d0 <__udivmodsi4_ep>
 2c8:	a2 1b       	sub	r26, r18
 2ca:	b3 0b       	sbc	r27, r19
 2cc:	e4 0b       	sbc	r30, r20
 2ce:	f5 0b       	sbc	r31, r21

000002d0 <__udivmodsi4_ep>:
 2d0:	66 1f       	adc	r22, r22
 2d2:	77 1f       	adc	r23, r23
 2d4:	88 1f       	adc	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	1a 94       	dec	r1
 2da:	69 f7       	brne	.-38     	; 0x2b6 <__udivmodsi4_loop>
 2dc:	60 95       	com	r22
 2de:	70 95       	com	r23
 2e0:	80 95       	com	r24
 2e2:	90 95       	com	r25
 2e4:	9b 01       	movw	r18, r22
 2e6:	ac 01       	movw	r20, r24
 2e8:	bd 01       	movw	r22, r26
 2ea:	cf 01       	movw	r24, r30
 2ec:	08 95       	ret

000002ee <_exit>:
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>
