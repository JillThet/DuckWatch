
DuckWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000328  00800100  00001940  000019d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001940  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000101  00800428  00800428  00001cfc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00001d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a77  00000000  00000000  00001fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000136f  00000000  00000000  00005a37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c7d  00000000  00000000  00006da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b4  00000000  00000000  00007a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a73  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fac  00000000  00000000  00008c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000abf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	14 e0       	ldi	r17, 0x04	; 4
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e4       	ldi	r30, 0x40	; 64
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 32       	cpi	r26, 0x28	; 40
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a8 e2       	ldi	r26, 0x28	; 40
      8e:	b4 e0       	ldi	r27, 0x04	; 4
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 32       	cpi	r26, 0x29	; 41
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <main>
      9e:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN6BME2804initEv>:
	(uint32_t)get_humidity(), get_raw_humidity());
	p_serial->send(debug);
	
	sprintf(debug, "Temperature reading: %ld (raw: 0x%08lX)\r\n",
	(int32_t)get_temperature(),  get_raw_temperature());
	p_serial->send(debug);
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	ec 01       	movw	r28, r24
      ac:	21 e0       	ldi	r18, 0x01	; 1
      ae:	42 ef       	ldi	r20, 0xF2	; 242
      b0:	6e ee       	ldi	r22, 0xEE	; 238
      b2:	88 81       	ld	r24, Y
      b4:	99 81       	ldd	r25, Y+1	; 0x01
	
	return;
      b6:	0e 94 2c 05 	call	0xa58	; 0xa58 <_ZN3i2c5writeEhhh>
      ba:	81 11       	cpse	r24, r1
      bc:	10 c0       	rjmp	.+32     	; 0xde <_ZN6BME2804initEv+0x38>
      be:	27 e3       	ldi	r18, 0x37	; 55
	 * 3. Turn off IIR Filter and set inactive duration to 1s for normal
	 *	  mode
	 */
	return (p_i2c->write(BME280_ADDR, BME280_CTRL_HUM, BME280_H_OVSM_1)
			|| p_i2c->write(BME280_ADDR, BME280_CTRL_MEAS, 
				BME280_P_OVSM_1 | BME280_T_OVSM_16 | BME280_NORMAL_MODE)
      c0:	44 ef       	ldi	r20, 0xF4	; 244
      c2:	6e ee       	ldi	r22, 0xEE	; 238
      c4:	88 81       	ld	r24, Y
      c6:	99 81       	ldd	r25, Y+1	; 0x01
      c8:	0e 94 2c 05 	call	0xa58	; 0xa58 <_ZN3i2c5writeEhhh>
	 *    by 1 and set mode to sleep
	 * 3. Turn off IIR Filter and set inactive duration to 1s for normal
	 *	  mode
	 */
	return (p_i2c->write(BME280_ADDR, BME280_CTRL_HUM, BME280_H_OVSM_1)
			|| p_i2c->write(BME280_ADDR, BME280_CTRL_MEAS, 
      cc:	81 11       	cpse	r24, r1
      ce:	07 c0       	rjmp	.+14     	; 0xde <_ZN6BME2804initEv+0x38>
				BME280_P_OVSM_1 | BME280_T_OVSM_16 | BME280_NORMAL_MODE)
			|| p_i2c->write(BME280_ADDR, BME280_CONFIG, 
				BME280_TSB_F | BME280_FLTR_OFF | BME280_SPI_DIS));
      d0:	20 e0       	ldi	r18, 0x00	; 0
      d2:	45 ef       	ldi	r20, 0xF5	; 245
      d4:	6e ee       	ldi	r22, 0xEE	; 238
      d6:	88 81       	ld	r24, Y
      d8:	99 81       	ldd	r25, Y+1	; 0x01
      da:	0e 94 2c 05 	call	0xa58	; 0xa58 <_ZN3i2c5writeEhhh>
}
      de:	df 91       	pop	r29
      e0:	cf 91       	pop	r28
      e2:	08 95       	ret

000000e4 <_ZN6BME28019convert_temperatureEv>:
 * Return:		int32_t - the human-readable temperature reading accurate to
 *							2 decimal places in Centigrade. A value of 5382 is
 *							equal to 53.82 degrees Centigrade
 ****************************************************************************/
int32_t BME280::convert_temperature (void)
{
      e4:	8f 92       	push	r8
      e6:	9f 92       	push	r9
      e8:	af 92       	push	r10
      ea:	bf 92       	push	r11
      ec:	cf 92       	push	r12
      ee:	df 92       	push	r13
      f0:	ef 92       	push	r14
      f2:	ff 92       	push	r15
      f4:	0f 93       	push	r16
      f6:	1f 93       	push	r17
      f8:	fc 01       	movw	r30, r24
	int32_t x1 = 0;
	int32_t x2 = 0;
	
	temperature = 0;
      fa:	12 8a       	std	Z+18, r1	; 0x12
      fc:	13 8a       	std	Z+19, r1	; 0x13
      fe:	14 8a       	std	Z+20, r1	; 0x14
     100:	15 8a       	std	Z+21, r1	; 0x15
	
	/* calculate x1 */
	x1 = (
		  ((raw_temp >> 3) - ((int32_t)cal.dig_T1 << 1))
     102:	80 85       	ldd	r24, Z+8	; 0x08
     104:	91 85       	ldd	r25, Z+9	; 0x09
     106:	a2 85       	ldd	r26, Z+10	; 0x0a
     108:	b3 85       	ldd	r27, Z+11	; 0x0b
     10a:	42 8d       	ldd	r20, Z+26	; 0x1a
     10c:	53 8d       	ldd	r21, Z+27	; 0x1b
     10e:	60 e0       	ldi	r22, 0x00	; 0
     110:	70 e0       	ldi	r23, 0x00	; 0
		 ) >> 11;
	
	/* calculate x2 */
	x2 = (
		  ((((raw_temp >> 4) - ((int32_t)cal.dig_T1))
		   * ((raw_temp >> 4) - ((int32_t)cal.dig_T1))
     112:	4c 01       	movw	r8, r24
     114:	5d 01       	movw	r10, r26
     116:	68 94       	set
     118:	13 f8       	bld	r1, 3
     11a:	b5 94       	asr	r11
     11c:	a7 94       	ror	r10
     11e:	97 94       	ror	r9
     120:	87 94       	ror	r8
     122:	16 94       	lsr	r1
     124:	d1 f7       	brne	.-12     	; 0x11a <_ZN6BME28019convert_temperatureEv+0x36>
     126:	84 1a       	sub	r8, r20
     128:	95 0a       	sbc	r9, r21
     12a:	a6 0a       	sbc	r10, r22
     12c:	b7 0a       	sbc	r11, r23
	
	temperature = 0;
	
	/* calculate x1 */
	x1 = (
		  ((raw_temp >> 3) - ((int32_t)cal.dig_T1 << 1))
     12e:	68 94       	set
     130:	12 f8       	bld	r1, 2
     132:	b5 95       	asr	r27
     134:	a7 95       	ror	r26
     136:	97 95       	ror	r25
     138:	87 95       	ror	r24
     13a:	16 94       	lsr	r1
     13c:	d1 f7       	brne	.-12     	; 0x132 <_ZN6BME28019convert_temperatureEv+0x4e>
     13e:	44 0f       	add	r20, r20
     140:	55 1f       	adc	r21, r21
     142:	66 1f       	adc	r22, r22
     144:	77 1f       	adc	r23, r23
     146:	7c 01       	movw	r14, r24
     148:	8d 01       	movw	r16, r26
     14a:	e4 1a       	sub	r14, r20
     14c:	f5 0a       	sbc	r15, r21
     14e:	06 0b       	sbc	r16, r22
     150:	17 0b       	sbc	r17, r23
     152:	a8 01       	movw	r20, r16
     154:	97 01       	movw	r18, r14
		  * ((int32_t)cal.dig_T2)
     156:	a4 8d       	ldd	r26, Z+28	; 0x1c
     158:	b5 8d       	ldd	r27, Z+29	; 0x1d
     15a:	0e 94 9b 09 	call	0x1336	; 0x1336 <__mulshisi3>
		 ) >> 11;
     15e:	6b 01       	movw	r12, r22
     160:	7c 01       	movw	r14, r24
     162:	0b 2e       	mov	r0, r27
     164:	bb e0       	ldi	r27, 0x0B	; 11
     166:	f5 94       	asr	r15
     168:	e7 94       	ror	r14
     16a:	d7 94       	ror	r13
     16c:	c7 94       	ror	r12
     16e:	ba 95       	dec	r27
     170:	d1 f7       	brne	.-12     	; 0x166 <_ZN6BME28019convert_temperatureEv+0x82>
     172:	b0 2d       	mov	r27, r0
	
	/* calculate x2 */
	x2 = (
		  ((((raw_temp >> 4) - ((int32_t)cal.dig_T1))
		   * ((raw_temp >> 4) - ((int32_t)cal.dig_T1))
     174:	a5 01       	movw	r20, r10
     176:	94 01       	movw	r18, r8
     178:	c5 01       	movw	r24, r10
     17a:	b4 01       	movw	r22, r8
     17c:	0e 94 4a 09 	call	0x1294	; 0x1294 <__mulsi3>
		   ) >> 12)
     180:	9b 01       	movw	r18, r22
     182:	ac 01       	movw	r20, r24
     184:	01 2e       	mov	r0, r17
     186:	1c e0       	ldi	r17, 0x0C	; 12
     188:	55 95       	asr	r21
     18a:	47 95       	ror	r20
     18c:	37 95       	ror	r19
     18e:	27 95       	ror	r18
     190:	1a 95       	dec	r17
     192:	d1 f7       	brne	.-12     	; 0x188 <_ZN6BME28019convert_temperatureEv+0xa4>
     194:	10 2d       	mov	r17, r0
		  * ((int32_t)cal.dig_T3)
     196:	a6 8d       	ldd	r26, Z+30	; 0x1e
     198:	b7 8d       	ldd	r27, Z+31	; 0x1f
     19a:	0e 94 9b 09 	call	0x1336	; 0x1336 <__mulshisi3>
		 ) >> 14;
     19e:	ab 01       	movw	r20, r22
     1a0:	bc 01       	movw	r22, r24
     1a2:	03 2e       	mov	r0, r19
     1a4:	3e e0       	ldi	r19, 0x0E	; 14
     1a6:	75 95       	asr	r23
     1a8:	67 95       	ror	r22
     1aa:	57 95       	ror	r21
     1ac:	47 95       	ror	r20
     1ae:	3a 95       	dec	r19
     1b0:	d1 f7       	brne	.-12     	; 0x1a6 <_ZN6BME28019convert_temperatureEv+0xc2>
     1b2:	30 2d       	mov	r19, r0
	
	cal.t_fine = x1 + x2;
     1b4:	d7 01       	movw	r26, r14
     1b6:	c6 01       	movw	r24, r12
     1b8:	84 0f       	add	r24, r20
     1ba:	95 1f       	adc	r25, r21
     1bc:	a6 1f       	adc	r26, r22
     1be:	b7 1f       	adc	r27, r23
     1c0:	83 af       	std	Z+59, r24	; 0x3b
     1c2:	94 af       	std	Z+60, r25	; 0x3c
     1c4:	a5 af       	std	Z+61, r26	; 0x3d
     1c6:	b6 af       	std	Z+62, r27	; 0x3e
	
	return ((cal.t_fine * 5 + 128) >> 8);
     1c8:	6c 01       	movw	r12, r24
     1ca:	7d 01       	movw	r14, r26
     1cc:	cc 0c       	add	r12, r12
     1ce:	dd 1c       	adc	r13, r13
     1d0:	ee 1c       	adc	r14, r14
     1d2:	ff 1c       	adc	r15, r15
     1d4:	cc 0c       	add	r12, r12
     1d6:	dd 1c       	adc	r13, r13
     1d8:	ee 1c       	adc	r14, r14
     1da:	ff 1c       	adc	r15, r15
     1dc:	8c 0d       	add	r24, r12
     1de:	9d 1d       	adc	r25, r13
     1e0:	ae 1d       	adc	r26, r14
     1e2:	bf 1d       	adc	r27, r15
     1e4:	80 58       	subi	r24, 0x80	; 128
     1e6:	9f 4f       	sbci	r25, 0xFF	; 255
     1e8:	af 4f       	sbci	r26, 0xFF	; 255
     1ea:	bf 4f       	sbci	r27, 0xFF	; 255
     1ec:	69 2f       	mov	r22, r25
     1ee:	7a 2f       	mov	r23, r26
     1f0:	8b 2f       	mov	r24, r27
     1f2:	99 27       	eor	r25, r25
     1f4:	87 fd       	sbrc	r24, 7
     1f6:	9a 95       	dec	r25
}
     1f8:	1f 91       	pop	r17
     1fa:	0f 91       	pop	r16
     1fc:	ff 90       	pop	r15
     1fe:	ef 90       	pop	r14
     200:	df 90       	pop	r13
     202:	cf 90       	pop	r12
     204:	bf 90       	pop	r11
     206:	af 90       	pop	r10
     208:	9f 90       	pop	r9
     20a:	8f 90       	pop	r8
     20c:	08 95       	ret

0000020e <_ZN6BME28016convert_humidityEv>:
 * Return:		uint32_t - the human-readable humidity reading accurate to 3
 *							decimal places in %rH where 42313 represents
 *							42313 / 1024 = 41.321 %rH
 ****************************************************************************/
uint32_t BME280::convert_humidity (void)
{
     20e:	4f 92       	push	r4
     210:	5f 92       	push	r5
     212:	6f 92       	push	r6
     214:	7f 92       	push	r7
     216:	8f 92       	push	r8
     218:	9f 92       	push	r9
     21a:	af 92       	push	r10
     21c:	bf 92       	push	r11
     21e:	cf 92       	push	r12
     220:	df 92       	push	r13
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	fc 01       	movw	r30, r24
	int32_t x1 = 0;
	
	/* Utilize t_fine calculation */
	x1 = cal.t_fine - 76800;
     228:	83 ac       	ldd	r8, Z+59	; 0x3b
     22a:	94 ac       	ldd	r9, Z+60	; 0x3c
     22c:	a5 ac       	ldd	r10, Z+61	; 0x3d
     22e:	b6 ac       	ldd	r11, Z+62	; 0x3e
     230:	2c e2       	ldi	r18, 0x2C	; 44
     232:	92 1a       	sub	r9, r18
     234:	21 e0       	ldi	r18, 0x01	; 1
     236:	a2 0a       	sbc	r10, r18
     238:	b1 08       	sbc	r11, r1
	
	/* Calculate x1 - part 1 */
	x1 = ((((
			 (raw_hum << 14) - (((int32_t)cal.dig_H4) << 20)
     23a:	84 85       	ldd	r24, Z+12	; 0x0c
     23c:	c1 2c       	mov	r12, r1
     23e:	d1 2c       	mov	r13, r1
     240:	d8 2e       	mov	r13, r24
     242:	dd 0c       	add	r13, r13
     244:	dd 0c       	add	r13, r13
     246:	dd 0c       	add	r13, r13
     248:	dd 0c       	add	r13, r13
     24a:	dd 0c       	add	r13, r13
     24c:	dd 0c       	add	r13, r13
     24e:	0d 2c       	mov	r0, r13
     250:	00 0c       	add	r0, r0
     252:	ee 08       	sbc	r14, r14
     254:	ff 08       	sbc	r15, r15
     256:	86 a9       	ldd	r24, Z+54	; 0x36
     258:	97 a9       	ldd	r25, Z+55	; 0x37
     25a:	09 2e       	mov	r0, r25
     25c:	00 0c       	add	r0, r0
     25e:	aa 0b       	sbc	r26, r26
     260:	bb 0b       	sbc	r27, r27
     262:	07 2e       	mov	r0, r23
     264:	74 e1       	ldi	r23, 0x14	; 20
     266:	88 0f       	add	r24, r24
     268:	99 1f       	adc	r25, r25
     26a:	aa 1f       	adc	r26, r26
     26c:	bb 1f       	adc	r27, r27
     26e:	7a 95       	dec	r23
     270:	d1 f7       	brne	.-12     	; 0x266 <_ZN6BME28016convert_humidityEv+0x58>
     272:	70 2d       	mov	r23, r0
     274:	c8 1a       	sub	r12, r24
     276:	d9 0a       	sbc	r13, r25
     278:	ea 0a       	sbc	r14, r26
     27a:	fb 0a       	sbc	r15, r27
			 - (((int32_t)cal.dig_H5) * x1)
     27c:	a0 ad       	ldd	r26, Z+56	; 0x38
     27e:	b1 ad       	ldd	r27, Z+57	; 0x39
     280:	a5 01       	movw	r20, r10
     282:	94 01       	movw	r18, r8
     284:	0e 94 9b 09 	call	0x1336	; 0x1336 <__mulshisi3>
     288:	c6 1a       	sub	r12, r22
     28a:	d7 0a       	sbc	r13, r23
     28c:	e8 0a       	sbc	r14, r24
     28e:	f9 0a       	sbc	r15, r25
			) + ((int32_t)0x4000)) >> 15)
     290:	30 e4       	ldi	r19, 0x40	; 64
     292:	d3 0e       	add	r13, r19
     294:	e1 1c       	adc	r14, r1
     296:	f1 1c       	adc	r15, r1
     298:	0b 2e       	mov	r0, r27
     29a:	bf e0       	ldi	r27, 0x0F	; 15
     29c:	f5 94       	asr	r15
     29e:	e7 94       	ror	r14
     2a0:	d7 94       	ror	r13
     2a2:	c7 94       	ror	r12
     2a4:	ba 95       	dec	r27
     2a6:	d1 f7       	brne	.-12     	; 0x29c <_ZN6BME28016convert_humidityEv+0x8e>
     2a8:	b0 2d       	mov	r27, r0
		  * (((((
			     ((x1 * ((int32_t)cal.dig_H6)) >> 10)
     2aa:	a2 ad       	ldd	r26, Z+58	; 0x3a
     2ac:	0a 2e       	mov	r0, r26
     2ae:	00 0c       	add	r0, r0
     2b0:	bb 0b       	sbc	r27, r27
     2b2:	a5 01       	movw	r20, r10
     2b4:	94 01       	movw	r18, r8
     2b6:	0e 94 9b 09 	call	0x1336	; 0x1336 <__mulshisi3>
     2ba:	2b 01       	movw	r4, r22
     2bc:	3c 01       	movw	r6, r24
     2be:	03 2e       	mov	r0, r19
     2c0:	3a e0       	ldi	r19, 0x0A	; 10
     2c2:	75 94       	asr	r7
     2c4:	67 94       	ror	r6
     2c6:	57 94       	ror	r5
     2c8:	47 94       	ror	r4
     2ca:	3a 95       	dec	r19
     2cc:	d1 f7       	brne	.-12     	; 0x2c2 <_ZN6BME28016convert_humidityEv+0xb4>
     2ce:	30 2d       	mov	r19, r0
			    * (((x1 * ((int32_t)cal.dig_H3)) >> 11) 
     2d0:	a5 a9       	ldd	r26, Z+53	; 0x35
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	0e 94 90 09 	call	0x1320	; 0x1320 <__muluhisi3>
     2d8:	dc 01       	movw	r26, r24
     2da:	cb 01       	movw	r24, r22
     2dc:	07 2e       	mov	r0, r23
     2de:	7b e0       	ldi	r23, 0x0B	; 11
     2e0:	b5 95       	asr	r27
     2e2:	a7 95       	ror	r26
     2e4:	97 95       	ror	r25
     2e6:	87 95       	ror	r24
     2e8:	7a 95       	dec	r23
     2ea:	d1 f7       	brne	.-12     	; 0x2e0 <_ZN6BME28016convert_humidityEv+0xd2>
     2ec:	70 2d       	mov	r23, r0
			    + ((int32_t)0x8000))
     2ee:	bc 01       	movw	r22, r24
     2f0:	cd 01       	movw	r24, r26
     2f2:	70 58       	subi	r23, 0x80	; 128
     2f4:	8f 4f       	sbci	r24, 0xFF	; 255
     2f6:	9f 4f       	sbci	r25, 0xFF	; 255
			 (raw_hum << 14) - (((int32_t)cal.dig_H4) << 20)
			 - (((int32_t)cal.dig_H5) * x1)
			) + ((int32_t)0x4000)) >> 15)
		  * (((((
			     ((x1 * ((int32_t)cal.dig_H6)) >> 10)
			    * (((x1 * ((int32_t)cal.dig_H3)) >> 11) 
     2f8:	a3 01       	movw	r20, r6
     2fa:	92 01       	movw	r18, r4
     2fc:	0e 94 4a 09 	call	0x1294	; 0x1294 <__mulsi3>
			    + ((int32_t)0x8000))
		        ) >> 10) + ((int32_t)0x200000))
     300:	dc 01       	movw	r26, r24
     302:	cb 01       	movw	r24, r22
     304:	07 2e       	mov	r0, r23
     306:	7a e0       	ldi	r23, 0x0A	; 10
     308:	b5 95       	asr	r27
     30a:	a7 95       	ror	r26
     30c:	97 95       	ror	r25
     30e:	87 95       	ror	r24
     310:	7a 95       	dec	r23
     312:	d1 f7       	brne	.-12     	; 0x308 <_ZN6BME28016convert_humidityEv+0xfa>
     314:	70 2d       	mov	r23, r0
     316:	9c 01       	movw	r18, r24
     318:	ad 01       	movw	r20, r26
     31a:	40 5e       	subi	r20, 0xE0	; 224
     31c:	5f 4f       	sbci	r21, 0xFF	; 255
			 * ((int32_t)cal.dig_H2) + 0x2000) >> 14));
     31e:	a3 a9       	ldd	r26, Z+51	; 0x33
     320:	b4 a9       	ldd	r27, Z+52	; 0x34
     322:	0e 94 9b 09 	call	0x1336	; 0x1336 <__mulshisi3>
     326:	dc 01       	movw	r26, r24
     328:	cb 01       	movw	r24, r22
     32a:	90 5e       	subi	r25, 0xE0	; 224
     32c:	af 4f       	sbci	r26, 0xFF	; 255
     32e:	bf 4f       	sbci	r27, 0xFF	; 255
     330:	bc 01       	movw	r22, r24
     332:	cd 01       	movw	r24, r26
     334:	05 2e       	mov	r0, r21
     336:	5e e0       	ldi	r21, 0x0E	; 14
     338:	95 95       	asr	r25
     33a:	87 95       	ror	r24
     33c:	77 95       	ror	r23
     33e:	67 95       	ror	r22
     340:	5a 95       	dec	r21
     342:	d1 f7       	brne	.-12     	; 0x338 <_ZN6BME28016convert_humidityEv+0x12a>
     344:	50 2d       	mov	r21, r0
     346:	a7 01       	movw	r20, r14
     348:	96 01       	movw	r18, r12
     34a:	0e 94 4a 09 	call	0x1294	; 0x1294 <__mulsi3>
     34e:	6b 01       	movw	r12, r22
     350:	7c 01       	movw	r14, r24
	/* Calculate x1 - part 2 */
	x1 = (x1 - (((((x1 >> 15)
				 * (x1 >> 15)) >> 7)
     352:	05 2e       	mov	r0, r21
     354:	5f e0       	ldi	r21, 0x0F	; 15
     356:	95 95       	asr	r25
     358:	87 95       	ror	r24
     35a:	77 95       	ror	r23
     35c:	67 95       	ror	r22
     35e:	5a 95       	dec	r21
     360:	d1 f7       	brne	.-12     	; 0x356 <_ZN6BME28016convert_humidityEv+0x148>
     362:	50 2d       	mov	r21, r0
     364:	9b 01       	movw	r18, r22
     366:	ac 01       	movw	r20, r24
     368:	0e 94 4a 09 	call	0x1294	; 0x1294 <__mulsi3>
     36c:	9b 01       	movw	r18, r22
     36e:	ac 01       	movw	r20, r24
     370:	68 94       	set
     372:	16 f8       	bld	r1, 6
     374:	55 95       	asr	r21
     376:	47 95       	ror	r20
     378:	37 95       	ror	r19
     37a:	27 95       	ror	r18
     37c:	16 94       	lsr	r1
     37e:	d1 f7       	brne	.-12     	; 0x374 <_ZN6BME28016convert_humidityEv+0x166>
				* ((int32_t)cal.dig_H1)) >> 4));
     380:	a2 a9       	ldd	r26, Z+50	; 0x32
     382:	b0 e0       	ldi	r27, 0x00	; 0
     384:	0e 94 90 09 	call	0x1320	; 0x1320 <__muluhisi3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	68 94       	set
     38e:	13 f8       	bld	r1, 3
     390:	b5 95       	asr	r27
     392:	a7 95       	ror	r26
     394:	97 95       	ror	r25
     396:	87 95       	ror	r24
     398:	16 94       	lsr	r1
     39a:	d1 f7       	brne	.-12     	; 0x390 <_ZN6BME28016convert_humidityEv+0x182>
	
	/* Check boundaries */
	x1 = (x1 < 0) ? 0 : ((x1 > 0x19000000) ? 0x19000000 : x1);
     39c:	a7 01       	movw	r20, r14
     39e:	96 01       	movw	r18, r12
     3a0:	28 1b       	sub	r18, r24
     3a2:	39 0b       	sbc	r19, r25
     3a4:	4a 0b       	sbc	r20, r26
     3a6:	5b 0b       	sbc	r21, r27
     3a8:	da 01       	movw	r26, r20
     3aa:	c9 01       	movw	r24, r18
     3ac:	81 30       	cpi	r24, 0x01	; 1
     3ae:	91 05       	cpc	r25, r1
     3b0:	a1 05       	cpc	r26, r1
     3b2:	39 e1       	ldi	r19, 0x19	; 25
     3b4:	b3 07       	cpc	r27, r19
     3b6:	24 f0       	brlt	.+8      	; 0x3c0 <_ZN6BME28016convert_humidityEv+0x1b2>
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	a0 e0       	ldi	r26, 0x00	; 0
     3be:	b9 e1       	ldi	r27, 0x19	; 25
     3c0:	bb 23       	and	r27, r27
     3c2:	1c f4       	brge	.+6      	; 0x3ca <_ZN6BME28016convert_humidityEv+0x1bc>
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	dc 01       	movw	r26, r24
	
	return (uint32_t)(x1 >> 12);
     3ca:	bc 01       	movw	r22, r24
     3cc:	cd 01       	movw	r24, r26
     3ce:	05 2e       	mov	r0, r21
     3d0:	5c e0       	ldi	r21, 0x0C	; 12
     3d2:	95 95       	asr	r25
     3d4:	87 95       	ror	r24
     3d6:	77 95       	ror	r23
     3d8:	67 95       	ror	r22
     3da:	5a 95       	dec	r21
     3dc:	d1 f7       	brne	.-12     	; 0x3d2 <_ZN6BME28016convert_humidityEv+0x1c4>
     3de:	50 2d       	mov	r21, r0
}
     3e0:	ff 90       	pop	r15
     3e2:	ef 90       	pop	r14
     3e4:	df 90       	pop	r13
     3e6:	cf 90       	pop	r12
     3e8:	bf 90       	pop	r11
     3ea:	af 90       	pop	r10
     3ec:	9f 90       	pop	r9
     3ee:	8f 90       	pop	r8
     3f0:	7f 90       	pop	r7
     3f2:	6f 90       	pop	r6
     3f4:	5f 90       	pop	r5
     3f6:	4f 90       	pop	r4
     3f8:	08 95       	ret

000003fa <_ZN6BME2809read_dataEv>:
 * 
 * Return:		bool - the status of the operation (false = success,
 *													true = failure)
 ****************************************************************************/
bool BME280::read_data (void)
{
     3fa:	df 92       	push	r13
     3fc:	ef 92       	push	r14
     3fe:	ff 92       	push	r15
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	28 97       	sbiw	r28, 0x08	; 8
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	de bf       	out	0x3e, r29	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	cd bf       	out	0x3d, r28	; 61
     418:	7c 01       	movw	r14, r24
// 	{
// 		;	// Wait for register to signal a complete read
// 	}
	
	// read in the data from the registers
	if (p_i2c->read(BME280_ADDR, BME280_P_RAW_MSB, data, NUM_DATA_REG))
     41a:	08 e0       	ldi	r16, 0x08	; 8
     41c:	9e 01       	movw	r18, r28
     41e:	2f 5f       	subi	r18, 0xFF	; 255
     420:	3f 4f       	sbci	r19, 0xFF	; 255
     422:	47 ef       	ldi	r20, 0xF7	; 247
     424:	6e ee       	ldi	r22, 0xEE	; 238
     426:	fc 01       	movw	r30, r24
     428:	80 81       	ld	r24, Z
     42a:	91 81       	ldd	r25, Z+1	; 0x01
     42c:	0e 94 73 05 	call	0xae6	; 0xae6 <_ZN3i2c4readEhhPhh>
     430:	d8 2e       	mov	r13, r24
     432:	88 23       	and	r24, r24
     434:	89 f0       	breq	.+34     	; 0x458 <_ZN6BME2809read_dataEv+0x5e>
	{
		// There was an error in the read operation, propagate this message
		sprintf(debug, "read_data read registers failed\r\n");
     436:	82 e2       	ldi	r24, 0x22	; 34
     438:	e8 e2       	ldi	r30, 0x28	; 40
     43a:	f1 e0       	ldi	r31, 0x01	; 1
     43c:	a8 e2       	ldi	r26, 0x28	; 40
     43e:	b4 e0       	ldi	r27, 0x04	; 4
     440:	01 90       	ld	r0, Z+
     442:	0d 92       	st	X+, r0
     444:	8a 95       	dec	r24
     446:	e1 f7       	brne	.-8      	; 0x440 <_ZN6BME2809read_dataEv+0x46>
		p_serial->send(debug);
     448:	68 e2       	ldi	r22, 0x28	; 40
     44a:	74 e0       	ldi	r23, 0x04	; 4
     44c:	f7 01       	movw	r30, r14
     44e:	82 81       	ldd	r24, Z+2	; 0x02
     450:	93 81       	ldd	r25, Z+3	; 0x03
     452:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
		return true;
     456:	77 c0       	rjmp	.+238    	; 0x546 <_ZN6BME2809read_dataEv+0x14c>
	}
	
	// store data in class variables
	raw_pres = (int32_t)(
				((uint32_t)data[NDX_P_MSB]  << P_T_MSB_SHIFT)
			  | ((uint32_t)data[NDX_P_LSB]  << P_T_LSB_SHIFT)
     458:	8a 81       	ldd	r24, Y+2	; 0x02
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	a0 e0       	ldi	r26, 0x00	; 0
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	aa 1f       	adc	r26, r26
     466:	bb 1f       	adc	r27, r27
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	aa 1f       	adc	r26, r26
     46e:	bb 1f       	adc	r27, r27
     470:	88 0f       	add	r24, r24
     472:	99 1f       	adc	r25, r25
     474:	aa 1f       	adc	r26, r26
     476:	bb 1f       	adc	r27, r27
     478:	88 0f       	add	r24, r24
     47a:	99 1f       	adc	r25, r25
     47c:	aa 1f       	adc	r26, r26
     47e:	bb 1f       	adc	r27, r27
		return true;
	}
	
	// store data in class variables
	raw_pres = (int32_t)(
				((uint32_t)data[NDX_P_MSB]  << P_T_MSB_SHIFT)
     480:	49 81       	ldd	r20, Y+1	; 0x01
     482:	50 e0       	ldi	r21, 0x00	; 0
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	03 2e       	mov	r0, r19
     48a:	3c e0       	ldi	r19, 0x0C	; 12
     48c:	44 0f       	add	r20, r20
     48e:	55 1f       	adc	r21, r21
     490:	66 1f       	adc	r22, r22
     492:	77 1f       	adc	r23, r23
     494:	3a 95       	dec	r19
     496:	d1 f7       	brne	.-12     	; 0x48c <_ZN6BME2809read_dataEv+0x92>
     498:	30 2d       	mov	r19, r0
			  | ((uint32_t)data[NDX_P_LSB]  << P_T_LSB_SHIFT)
     49a:	84 2b       	or	r24, r20
     49c:	95 2b       	or	r25, r21
     49e:	a6 2b       	or	r26, r22
     4a0:	b7 2b       	or	r27, r23
			  | (((uint32_t)data[NDX_P_XLSB] >> P_T_XLSB_SHIFT) & 0x0F)
     4a2:	2b 81       	ldd	r18, Y+3	; 0x03
     4a4:	22 95       	swap	r18
     4a6:	2f 70       	andi	r18, 0x0F	; 15
     4a8:	82 2b       	or	r24, r18
				);
     4aa:	f7 01       	movw	r30, r14
     4ac:	84 83       	std	Z+4, r24	; 0x04
     4ae:	95 83       	std	Z+5, r25	; 0x05
     4b0:	a6 83       	std	Z+6, r26	; 0x06
     4b2:	b7 83       	std	Z+7, r27	; 0x07
	
	raw_temp = (int32_t)(
						((uint32_t)data[NDX_T_MSB]  << P_T_MSB_SHIFT)
						| ((uint32_t)data[NDX_T_LSB]  << P_T_LSB_SHIFT)
     4b4:	4d 81       	ldd	r20, Y+5	; 0x05
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	44 0f       	add	r20, r20
     4be:	55 1f       	adc	r21, r21
     4c0:	66 1f       	adc	r22, r22
     4c2:	77 1f       	adc	r23, r23
     4c4:	44 0f       	add	r20, r20
     4c6:	55 1f       	adc	r21, r21
     4c8:	66 1f       	adc	r22, r22
     4ca:	77 1f       	adc	r23, r23
     4cc:	44 0f       	add	r20, r20
     4ce:	55 1f       	adc	r21, r21
     4d0:	66 1f       	adc	r22, r22
     4d2:	77 1f       	adc	r23, r23
     4d4:	44 0f       	add	r20, r20
     4d6:	55 1f       	adc	r21, r21
     4d8:	66 1f       	adc	r22, r22
     4da:	77 1f       	adc	r23, r23
			  | ((uint32_t)data[NDX_P_LSB]  << P_T_LSB_SHIFT)
			  | (((uint32_t)data[NDX_P_XLSB] >> P_T_XLSB_SHIFT) & 0x0F)
				);
	
	raw_temp = (int32_t)(
						((uint32_t)data[NDX_T_MSB]  << P_T_MSB_SHIFT)
     4dc:	0c 81       	ldd	r16, Y+4	; 0x04
     4de:	10 e0       	ldi	r17, 0x00	; 0
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	0f 2e       	mov	r0, r31
     4e6:	fc e0       	ldi	r31, 0x0C	; 12
     4e8:	00 0f       	add	r16, r16
     4ea:	11 1f       	adc	r17, r17
     4ec:	22 1f       	adc	r18, r18
     4ee:	33 1f       	adc	r19, r19
     4f0:	fa 95       	dec	r31
     4f2:	d1 f7       	brne	.-12     	; 0x4e8 <_ZN6BME2809read_dataEv+0xee>
     4f4:	f0 2d       	mov	r31, r0
						| ((uint32_t)data[NDX_T_LSB]  << P_T_LSB_SHIFT)
     4f6:	40 2b       	or	r20, r16
     4f8:	51 2b       	or	r21, r17
     4fa:	62 2b       	or	r22, r18
     4fc:	73 2b       	or	r23, r19
						| (((uint32_t)data[NDX_T_XLSB] >> P_T_XLSB_SHIFT) & 0x0F)
     4fe:	8e 81       	ldd	r24, Y+6	; 0x06
     500:	82 95       	swap	r24
     502:	8f 70       	andi	r24, 0x0F	; 15
     504:	48 2b       	or	r20, r24
						);
     506:	40 87       	std	Z+8, r20	; 0x08
     508:	51 87       	std	Z+9, r21	; 0x09
     50a:	62 87       	std	Z+10, r22	; 0x0a
     50c:	73 87       	std	Z+11, r23	; 0x0b
			  
	raw_hum  = (int32_t)(
				((uint32_t)data[NDX_H_MSB] << BYTE_SHIFT)
			  | ((uint32_t)data[NDX_H_LSB])
				);
     50e:	8f 81       	ldd	r24, Y+7	; 0x07
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	98 2f       	mov	r25, r24
     514:	88 27       	eor	r24, r24
     516:	28 85       	ldd	r18, Y+8	; 0x08
     518:	82 2b       	or	r24, r18
     51a:	95 87       	std	Z+13, r25	; 0x0d
     51c:	84 87       	std	Z+12, r24	; 0x0c
	
	// convert the raw values into human readable format
	pressure = convert_pressure();
     51e:	16 86       	std	Z+14, r1	; 0x0e
     520:	17 86       	std	Z+15, r1	; 0x0f
     522:	10 8a       	std	Z+16, r1	; 0x10
     524:	11 8a       	std	Z+17, r1	; 0x11
	temperature = convert_temperature();
     526:	c7 01       	movw	r24, r14
     528:	0e 94 72 00 	call	0xe4	; 0xe4 <_ZN6BME28019convert_temperatureEv>
     52c:	f7 01       	movw	r30, r14
     52e:	62 8b       	std	Z+18, r22	; 0x12
     530:	73 8b       	std	Z+19, r23	; 0x13
     532:	84 8b       	std	Z+20, r24	; 0x14
     534:	95 8b       	std	Z+21, r25	; 0x15
	humidity = convert_humidity();
     536:	c7 01       	movw	r24, r14
     538:	0e 94 07 01 	call	0x20e	; 0x20e <_ZN6BME28016convert_humidityEv>
     53c:	f7 01       	movw	r30, r14
     53e:	66 8b       	std	Z+22, r22	; 0x16
     540:	77 8b       	std	Z+23, r23	; 0x17
     542:	80 8f       	std	Z+24, r24	; 0x18
     544:	91 8f       	std	Z+25, r25	; 0x19
	
	return false;
}
     546:	8d 2d       	mov	r24, r13
     548:	28 96       	adiw	r28, 0x08	; 8
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	de bf       	out	0x3e, r29	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	cd bf       	out	0x3d, r28	; 61
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	1f 91       	pop	r17
     55a:	0f 91       	pop	r16
     55c:	ff 90       	pop	r15
     55e:	ef 90       	pop	r14
     560:	df 90       	pop	r13
     562:	08 95       	ret

00000564 <_ZN6BME2808read_calEv>:
 * 
 * Return:		bool - the status of the operation (false = success,
 *													true = failure)
 ****************************************************************************/
bool BME280::read_cal (void)
{
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	a1 97       	sbiw	r28, 0x21	; 33
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	7c 01       	movw	r14, r24
	uint8_t data1[BME280_CAL_RNG_1];	// hold calibration data from range 1
	uint8_t data2[BME280_CAL_RNG_2];	// hold calibration data from range 2
	
	if (p_i2c->read(BME280_ADDR, BME280_CAL_START_1, data1, BME280_CAL_RNG_1)
     580:	0a e1       	ldi	r16, 0x1A	; 26
     582:	9e 01       	movw	r18, r28
     584:	2f 5f       	subi	r18, 0xFF	; 255
     586:	3f 4f       	sbci	r19, 0xFF	; 255
     588:	48 e8       	ldi	r20, 0x88	; 136
     58a:	6e ee       	ldi	r22, 0xEE	; 238
     58c:	fc 01       	movw	r30, r24
     58e:	80 81       	ld	r24, Z
     590:	91 81       	ldd	r25, Z+1	; 0x01
     592:	0e 94 73 05 	call	0xae6	; 0xae6 <_ZN3i2c4readEhhPhh>
	 || p_i2c->read(BME280_ADDR, BME280_CAL_START_2, data2, BME280_CAL_RNG_2))
     596:	81 11       	cpse	r24, r1
     598:	0d c0       	rjmp	.+26     	; 0x5b4 <_ZN6BME2808read_calEv+0x50>
     59a:	07 e0       	ldi	r16, 0x07	; 7
     59c:	9e 01       	movw	r18, r28
     59e:	25 5e       	subi	r18, 0xE5	; 229
     5a0:	3f 4f       	sbci	r19, 0xFF	; 255
     5a2:	41 ee       	ldi	r20, 0xE1	; 225
     5a4:	6e ee       	ldi	r22, 0xEE	; 238
     5a6:	f7 01       	movw	r30, r14
     5a8:	80 81       	ld	r24, Z
     5aa:	91 81       	ldd	r25, Z+1	; 0x01
     5ac:	0e 94 73 05 	call	0xae6	; 0xae6 <_ZN3i2c4readEhhPhh>
bool BME280::read_cal (void)
{
	uint8_t data1[BME280_CAL_RNG_1];	// hold calibration data from range 1
	uint8_t data2[BME280_CAL_RNG_2];	// hold calibration data from range 2
	
	if (p_i2c->read(BME280_ADDR, BME280_CAL_START_1, data1, BME280_CAL_RNG_1)
     5b0:	88 23       	and	r24, r24
     5b2:	91 f0       	breq	.+36     	; 0x5d8 <_ZN6BME2808read_calEv+0x74>
	 || p_i2c->read(BME280_ADDR, BME280_CAL_START_2, data2, BME280_CAL_RNG_2))
	{
		// There was an error in the read operation, propagate this message
		sprintf(debug, "read_cal read registers failed\r\n");
     5b4:	81 e2       	ldi	r24, 0x21	; 33
     5b6:	ea e4       	ldi	r30, 0x4A	; 74
     5b8:	f1 e0       	ldi	r31, 0x01	; 1
     5ba:	a8 e2       	ldi	r26, 0x28	; 40
     5bc:	b4 e0       	ldi	r27, 0x04	; 4
     5be:	01 90       	ld	r0, Z+
     5c0:	0d 92       	st	X+, r0
     5c2:	8a 95       	dec	r24
     5c4:	e1 f7       	brne	.-8      	; 0x5be <_ZN6BME2808read_calEv+0x5a>
		p_serial->send(debug);
     5c6:	68 e2       	ldi	r22, 0x28	; 40
     5c8:	74 e0       	ldi	r23, 0x04	; 4
     5ca:	f7 01       	movw	r30, r14
     5cc:	82 81       	ldd	r24, Z+2	; 0x02
     5ce:	93 81       	ldd	r25, Z+3	; 0x03
     5d0:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
		return true;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	86 c0       	rjmp	.+268    	; 0x6e4 <_ZN6BME2808read_calEv+0x180>
	}
	
	cal.dig_T1 = (uint16_t)(((uint16_t)data1[CAL_DIG_T1_MSB] << BYTE_SHIFT)
     5d8:	2a 81       	ldd	r18, Y+2	; 0x02
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	32 2f       	mov	r19, r18
     5de:	22 27       	eor	r18, r18
							| data1[CAL_DIG_T1_LSB]);
     5e0:	99 81       	ldd	r25, Y+1	; 0x01
     5e2:	29 2b       	or	r18, r25
     5e4:	f7 01       	movw	r30, r14
     5e6:	33 8f       	std	Z+27, r19	; 0x1b
     5e8:	22 8f       	std	Z+26, r18	; 0x1a
	cal.dig_T2 = (int16_t)(((uint16_t)data1[CAL_DIG_T2_MSB] << BYTE_SHIFT)
     5ea:	2c 81       	ldd	r18, Y+4	; 0x04
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	32 2f       	mov	r19, r18
     5f0:	22 27       	eor	r18, r18
							| data1[CAL_DIG_T2_LSB]);
     5f2:	9b 81       	ldd	r25, Y+3	; 0x03
     5f4:	29 2b       	or	r18, r25
     5f6:	35 8f       	std	Z+29, r19	; 0x1d
     5f8:	24 8f       	std	Z+28, r18	; 0x1c
	cal.dig_T3 = (int16_t)(((uint16_t)data1[CAL_DIG_T3_MSB] << BYTE_SHIFT)
     5fa:	2e 81       	ldd	r18, Y+6	; 0x06
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	32 2f       	mov	r19, r18
     600:	22 27       	eor	r18, r18
							| data1[CAL_DIG_T3_LSB]);
     602:	9d 81       	ldd	r25, Y+5	; 0x05
     604:	29 2b       	or	r18, r25
     606:	37 8f       	std	Z+31, r19	; 0x1f
     608:	26 8f       	std	Z+30, r18	; 0x1e
	
	cal.dig_P1 = (uint16_t)(((uint16_t)data1[CAL_DIG_P1_MSB] << BYTE_SHIFT)
     60a:	28 85       	ldd	r18, Y+8	; 0x08
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	32 2f       	mov	r19, r18
     610:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P1_LSB]);
     612:	9f 81       	ldd	r25, Y+7	; 0x07
     614:	29 2b       	or	r18, r25
     616:	31 a3       	std	Z+33, r19	; 0x21
     618:	20 a3       	std	Z+32, r18	; 0x20
	cal.dig_P2 = (int16_t)(((uint16_t)data1[CAL_DIG_P2_MSB] << BYTE_SHIFT)
     61a:	2a 85       	ldd	r18, Y+10	; 0x0a
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	32 2f       	mov	r19, r18
     620:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P2_LSB]);
     622:	99 85       	ldd	r25, Y+9	; 0x09
     624:	29 2b       	or	r18, r25
     626:	33 a3       	std	Z+35, r19	; 0x23
     628:	22 a3       	std	Z+34, r18	; 0x22
	cal.dig_P3 = (int16_t)(((uint16_t)data1[CAL_DIG_P3_MSB] << BYTE_SHIFT)
     62a:	2c 85       	ldd	r18, Y+12	; 0x0c
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	32 2f       	mov	r19, r18
     630:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P3_LSB]);
     632:	9b 85       	ldd	r25, Y+11	; 0x0b
     634:	29 2b       	or	r18, r25
     636:	35 a3       	std	Z+37, r19	; 0x25
     638:	24 a3       	std	Z+36, r18	; 0x24
	cal.dig_P4 = (int16_t)(((uint16_t)data1[CAL_DIG_P4_MSB] << BYTE_SHIFT)
     63a:	2e 85       	ldd	r18, Y+14	; 0x0e
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	32 2f       	mov	r19, r18
     640:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P4_LSB]);
     642:	9d 85       	ldd	r25, Y+13	; 0x0d
     644:	29 2b       	or	r18, r25
     646:	37 a3       	std	Z+39, r19	; 0x27
     648:	26 a3       	std	Z+38, r18	; 0x26
	cal.dig_P5 = (int16_t)(((uint16_t)data1[CAL_DIG_P5_MSB] << BYTE_SHIFT)
     64a:	28 89       	ldd	r18, Y+16	; 0x10
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	32 2f       	mov	r19, r18
     650:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P5_LSB]);
     652:	9f 85       	ldd	r25, Y+15	; 0x0f
     654:	29 2b       	or	r18, r25
     656:	31 a7       	std	Z+41, r19	; 0x29
     658:	20 a7       	std	Z+40, r18	; 0x28
	cal.dig_P6 = (int16_t)(((uint16_t)data1[CAL_DIG_P6_MSB] << BYTE_SHIFT)
     65a:	2a 89       	ldd	r18, Y+18	; 0x12
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	32 2f       	mov	r19, r18
     660:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P6_LSB]);
     662:	99 89       	ldd	r25, Y+17	; 0x11
     664:	29 2b       	or	r18, r25
     666:	33 a7       	std	Z+43, r19	; 0x2b
     668:	22 a7       	std	Z+42, r18	; 0x2a
	cal.dig_P7 = (int16_t)(((uint16_t)data1[CAL_DIG_P7_MSB] << BYTE_SHIFT)
     66a:	2c 89       	ldd	r18, Y+20	; 0x14
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	32 2f       	mov	r19, r18
     670:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P7_LSB]);
     672:	9b 89       	ldd	r25, Y+19	; 0x13
     674:	29 2b       	or	r18, r25
     676:	35 a7       	std	Z+45, r19	; 0x2d
     678:	24 a7       	std	Z+44, r18	; 0x2c
	cal.dig_P8 = (int16_t)(((uint16_t)data1[CAL_DIG_P8_MSB] << BYTE_SHIFT)
     67a:	2e 89       	ldd	r18, Y+22	; 0x16
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	32 2f       	mov	r19, r18
     680:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P8_LSB]);
     682:	9d 89       	ldd	r25, Y+21	; 0x15
     684:	29 2b       	or	r18, r25
     686:	37 a7       	std	Z+47, r19	; 0x2f
     688:	26 a7       	std	Z+46, r18	; 0x2e
	cal.dig_P9 = (int16_t)(((uint16_t)data1[CAL_DIG_P9_MSB] << BYTE_SHIFT)
     68a:	28 8d       	ldd	r18, Y+24	; 0x18
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	32 2f       	mov	r19, r18
     690:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P9_LSB]);
     692:	9f 89       	ldd	r25, Y+23	; 0x17
     694:	29 2b       	or	r18, r25
     696:	31 ab       	std	Z+49, r19	; 0x31
     698:	20 ab       	std	Z+48, r18	; 0x30
	
	cal.dig_H1 = (uint8_t)data1[CAL_DIG_H1_LSB];
     69a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     69c:	92 ab       	std	Z+50, r25	; 0x32
	cal.dig_H2 = (int16_t)(((uint16_t)data2[CAL_DIG_H2_MSB] << BYTE_SHIFT)
     69e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	32 2f       	mov	r19, r18
     6a4:	22 27       	eor	r18, r18
							| data2[CAL_DIG_H2_LSB]);
     6a6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6a8:	29 2b       	or	r18, r25
     6aa:	34 ab       	std	Z+52, r19	; 0x34
     6ac:	23 ab       	std	Z+51, r18	; 0x33
	cal.dig_H3 = (uint8_t)data2[CAL_DIG_H3_LSB];
     6ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
     6b0:	95 ab       	std	Z+53, r25	; 0x35
	cal.dig_H4 = (int16_t)(((uint16_t)data2[CAL_DIG_H4_MSB] << NIB_SHIFT)
							| (data2[CAL_DIG_H4_LSB] & CAL_DIG_H_MSK));
     6b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     6b4:	49 2f       	mov	r20, r25
     6b6:	4f 70       	andi	r20, 0x0F	; 15
	
	cal.dig_H1 = (uint8_t)data1[CAL_DIG_H1_LSB];
	cal.dig_H2 = (int16_t)(((uint16_t)data2[CAL_DIG_H2_MSB] << BYTE_SHIFT)
							| data2[CAL_DIG_H2_LSB]);
	cal.dig_H3 = (uint8_t)data2[CAL_DIG_H3_LSB];
	cal.dig_H4 = (int16_t)(((uint16_t)data2[CAL_DIG_H4_MSB] << NIB_SHIFT)
     6b8:	2e 8d       	ldd	r18, Y+30	; 0x1e
     6ba:	f0 e1       	ldi	r31, 0x10	; 16
     6bc:	2f 9f       	mul	r18, r31
     6be:	90 01       	movw	r18, r0
     6c0:	11 24       	eor	r1, r1
							| (data2[CAL_DIG_H4_LSB] & CAL_DIG_H_MSK));
     6c2:	24 2b       	or	r18, r20
     6c4:	f7 01       	movw	r30, r14
     6c6:	37 ab       	std	Z+55, r19	; 0x37
     6c8:	26 ab       	std	Z+54, r18	; 0x36
	cal.dig_H5 = (int16_t)(((uint16_t)data2[CAL_DIG_H5_MSB] << NIB_SHIFT)
							| ((data2[CAL_DIG_H5_LSB] >> NIB_SHIFT) 
     6ca:	92 95       	swap	r25
     6cc:	9f 70       	andi	r25, 0x0F	; 15
	cal.dig_H2 = (int16_t)(((uint16_t)data2[CAL_DIG_H2_MSB] << BYTE_SHIFT)
							| data2[CAL_DIG_H2_LSB]);
	cal.dig_H3 = (uint8_t)data2[CAL_DIG_H3_LSB];
	cal.dig_H4 = (int16_t)(((uint16_t)data2[CAL_DIG_H4_MSB] << NIB_SHIFT)
							| (data2[CAL_DIG_H4_LSB] & CAL_DIG_H_MSK));
	cal.dig_H5 = (int16_t)(((uint16_t)data2[CAL_DIG_H5_MSB] << NIB_SHIFT)
     6ce:	28 a1       	ldd	r18, Y+32	; 0x20
     6d0:	f0 e1       	ldi	r31, 0x10	; 16
     6d2:	2f 9f       	mul	r18, r31
     6d4:	90 01       	movw	r18, r0
     6d6:	11 24       	eor	r1, r1
							| ((data2[CAL_DIG_H5_LSB] >> NIB_SHIFT) 
     6d8:	29 2b       	or	r18, r25
								& CAL_DIG_H_MSK));
     6da:	f7 01       	movw	r30, r14
     6dc:	31 af       	std	Z+57, r19	; 0x39
     6de:	20 af       	std	Z+56, r18	; 0x38
	cal.dig_H6 = (int8_t)data2[CAL_DIG_H6_LSB];
     6e0:	99 a1       	ldd	r25, Y+33	; 0x21
     6e2:	92 af       	std	Z+58, r25	; 0x3a
	
	return false;
}
     6e4:	a1 96       	adiw	r28, 0x21	; 33
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	0f 91       	pop	r16
     6f6:	ff 90       	pop	r15
     6f8:	ef 90       	pop	r14
     6fa:	08 95       	ret

000006fc <_ZN6BME280C1EP3i2cP6serial>:
 *				calls the init method.
 * 
 * Parameters:	ptr_i2c - the i2c object to be used for communicating with the
 *							BME280 sensor
 ****************************************************************************/
BME280::BME280 (i2c* ptr_i2c, serial *ptr_serial)
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	ec 01       	movw	r28, r24
     702:	cb 01       	movw	r24, r22
{
	p_i2c = ptr_i2c;		// store a local copy of the i2c pointer for use
     704:	79 83       	std	Y+1, r23	; 0x01
     706:	68 83       	st	Y, r22
	p_serial = ptr_serial;	// store a local copy of serial pointer for debug
     708:	5b 83       	std	Y+3, r21	; 0x03
     70a:	4a 83       	std	Y+2, r20	; 0x02
	
	if (p_i2c->ping(BME280_ADDR))
     70c:	6e ee       	ldi	r22, 0xEE	; 238
     70e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <_ZN3i2c4pingEh>
     712:	88 23       	and	r24, r24
     714:	f9 f0       	breq	.+62     	; 0x754 <_ZN6BME280C1EP3i2cP6serial+0x58>
	{
		sprintf(debug, "BME280 <0x%X> ALIVE\r\n", BME280_ADDR);
     716:	1f 92       	push	r1
     718:	8e ee       	ldi	r24, 0xEE	; 238
     71a:	8f 93       	push	r24
     71c:	8b e6       	ldi	r24, 0x6B	; 107
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	9f 93       	push	r25
     722:	8f 93       	push	r24
     724:	88 e2       	ldi	r24, 0x28	; 40
     726:	94 e0       	ldi	r25, 0x04	; 4
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	0e 94 c6 09 	call	0x138c	; 0x138c <sprintf>
		p_serial->send(debug);
     730:	68 e2       	ldi	r22, 0x28	; 40
     732:	74 e0       	ldi	r23, 0x04	; 4
     734:	8a 81       	ldd	r24, Y+2	; 0x02
     736:	9b 81       	ldd	r25, Y+3	; 0x03
     738:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
		sprintf(debug, "BME280 <0x%X> DEAD\r\n", BME280_ADDR);
		p_serial->send(debug);
		return;
	}

	if(init())					// initializes the sensor registers
     73c:	ce 01       	movw	r24, r28
     73e:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN6BME2804initEv>
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	88 23       	and	r24, r24
     750:	59 f1       	breq	.+86     	; 0x7a8 <_ZN6BME280C1EP3i2cP6serial+0xac>
     752:	1a c0       	rjmp	.+52     	; 0x788 <_ZN6BME280C1EP3i2cP6serial+0x8c>
		sprintf(debug, "BME280 <0x%X> ALIVE\r\n", BME280_ADDR);
		p_serial->send(debug);
	}
	else
	{
		sprintf(debug, "BME280 <0x%X> DEAD\r\n", BME280_ADDR);
     754:	1f 92       	push	r1
     756:	8e ee       	ldi	r24, 0xEE	; 238
     758:	8f 93       	push	r24
     75a:	81 e8       	ldi	r24, 0x81	; 129
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	9f 93       	push	r25
     760:	8f 93       	push	r24
     762:	88 e2       	ldi	r24, 0x28	; 40
     764:	94 e0       	ldi	r25, 0x04	; 4
     766:	9f 93       	push	r25
     768:	8f 93       	push	r24
     76a:	0e 94 c6 09 	call	0x138c	; 0x138c <sprintf>
		p_serial->send(debug);
     76e:	68 e2       	ldi	r22, 0x28	; 40
     770:	74 e0       	ldi	r23, 0x04	; 4
     772:	8a 81       	ldd	r24, Y+2	; 0x02
     774:	9b 81       	ldd	r25, Y+3	; 0x03
     776:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
		return;
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	37 c0       	rjmp	.+110    	; 0x7f6 <_ZN6BME280C1EP3i2cP6serial+0xfa>
	}

	if(init())					// initializes the sensor registers
	{
		sprintf(debug, "Init failed\r\n");
     788:	8e e0       	ldi	r24, 0x0E	; 14
     78a:	e6 e9       	ldi	r30, 0x96	; 150
     78c:	f1 e0       	ldi	r31, 0x01	; 1
     78e:	a8 e2       	ldi	r26, 0x28	; 40
     790:	b4 e0       	ldi	r27, 0x04	; 4
     792:	01 90       	ld	r0, Z+
     794:	0d 92       	st	X+, r0
     796:	8a 95       	dec	r24
     798:	e1 f7       	brne	.-8      	; 0x792 <_ZN6BME280C1EP3i2cP6serial+0x96>
		p_serial->send(debug);
     79a:	68 e2       	ldi	r22, 0x28	; 40
     79c:	74 e0       	ldi	r23, 0x04	; 4
     79e:	8a 81       	ldd	r24, Y+2	; 0x02
     7a0:	9b 81       	ldd	r25, Y+3	; 0x03
     7a2:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
		return;
     7a6:	27 c0       	rjmp	.+78     	; 0x7f6 <_ZN6BME280C1EP3i2cP6serial+0xfa>
	}
	
	if (read_cal())				// read out cal registers for calculations
     7a8:	ce 01       	movw	r24, r28
     7aa:	0e 94 b2 02 	call	0x564	; 0x564 <_ZN6BME2808read_calEv>
     7ae:	88 23       	and	r24, r24
     7b0:	81 f0       	breq	.+32     	; 0x7d2 <_ZN6BME280C1EP3i2cP6serial+0xd6>
	{
		sprintf(debug, "read_cal failed\r\n");
     7b2:	82 e1       	ldi	r24, 0x12	; 18
     7b4:	e4 ea       	ldi	r30, 0xA4	; 164
     7b6:	f1 e0       	ldi	r31, 0x01	; 1
     7b8:	a8 e2       	ldi	r26, 0x28	; 40
     7ba:	b4 e0       	ldi	r27, 0x04	; 4
     7bc:	01 90       	ld	r0, Z+
     7be:	0d 92       	st	X+, r0
     7c0:	8a 95       	dec	r24
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <_ZN6BME280C1EP3i2cP6serial+0xc0>
		p_serial->send(debug);
     7c4:	68 e2       	ldi	r22, 0x28	; 40
     7c6:	74 e0       	ldi	r23, 0x04	; 4
     7c8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ca:	9b 81       	ldd	r25, Y+3	; 0x03
     7cc:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
		return;
     7d0:	12 c0       	rjmp	.+36     	; 0x7f6 <_ZN6BME280C1EP3i2cP6serial+0xfa>
	}
	
	read_data();			// initial read of data to fill sensor data
     7d2:	ce 01       	movw	r24, r28
     7d4:	0e 94 fd 01 	call	0x3fa	; 0x3fa <_ZN6BME2809read_dataEv>
	
	sprintf(debug, "BME280 constructor ok!\r\n");
     7d8:	89 e1       	ldi	r24, 0x19	; 25
     7da:	e6 eb       	ldi	r30, 0xB6	; 182
     7dc:	f1 e0       	ldi	r31, 0x01	; 1
     7de:	a8 e2       	ldi	r26, 0x28	; 40
     7e0:	b4 e0       	ldi	r27, 0x04	; 4
     7e2:	01 90       	ld	r0, Z+
     7e4:	0d 92       	st	X+, r0
     7e6:	8a 95       	dec	r24
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <_ZN6BME280C1EP3i2cP6serial+0xe6>
	p_serial->send(debug);
     7ea:	68 e2       	ldi	r22, 0x28	; 40
     7ec:	74 e0       	ldi	r23, 0x04	; 4
     7ee:	8a 81       	ldd	r24, Y+2	; 0x02
     7f0:	9b 81       	ldd	r25, Y+3	; 0x03
     7f2:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
}
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <_ZN3i2cC1EP6serial>:
 * Description:	This constructor sets up the i2c protocol on the ATmega328P
 *				to operate at a frequency of 200kHz
 ****************************************************************************/
i2c::i2c (serial *ptr_serial)
{
	p_serial = ptr_serial;	// store a local copy of serial pointer for debug
     7fc:	fc 01       	movw	r30, r24
     7fe:	71 83       	std	Z+1, r23	; 0x01
     800:	60 83       	st	Z, r22
	
	// set the bit rate to 200kHz, with no prescaler
	TWSR = 0x00;
     802:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = 32;
     806:	20 e2       	ldi	r18, 0x20	; 32
     808:	20 93 b8 00 	sts	0x00B8, r18
	
	// enable i2c protocol
	TWCR = (1 << TWEN);
     80c:	24 e0       	ldi	r18, 0x04	; 4
     80e:	20 93 bc 00 	sts	0x00BC, r18
	
	sprintf(debug, "i2c constructor ok!\r\n");
     812:	26 e1       	ldi	r18, 0x16	; 22
     814:	e9 e3       	ldi	r30, 0x39	; 57
     816:	f2 e0       	ldi	r31, 0x02	; 2
     818:	a8 e2       	ldi	r26, 0x28	; 40
     81a:	b4 e0       	ldi	r27, 0x04	; 4
     81c:	01 90       	ld	r0, Z+
     81e:	0d 92       	st	X+, r0
     820:	2a 95       	dec	r18
     822:	e1 f7       	brne	.-8      	; 0x81c <_ZN3i2cC1EP6serial+0x20>
	p_serial->send(debug);
     824:	68 e2       	ldi	r22, 0x28	; 40
     826:	74 e0       	ldi	r23, 0x04	; 4
     828:	fc 01       	movw	r30, r24
     82a:	80 81       	ld	r24, Z
     82c:	91 81       	ldd	r25, Z+1	; 0x01
     82e:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
     832:	08 95       	ret

00000834 <_ZN3i2c5startEv>:
 * Description:	This method puts the start signal on the i2c bus
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::start (void)
{
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	ec 01       	movw	r28, r24
	// put a start condition on the line
	TWCR = ((1 << TWSTA) | (1 << TWEN) | (1 << TWINT));
     83a:	ec eb       	ldi	r30, 0xBC	; 188
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	84 ea       	ldi	r24, 0xA4	; 164
     840:	80 83       	st	Z, r24
	
	// wait for TWINT to go low, which signals start condition completed
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     842:	80 81       	ld	r24, Z
     844:	88 23       	and	r24, r24
     846:	ac f4       	brge	.+42     	; 0x872 <_ZN3i2c5startEv+0x3e>
     848:	1b c0       	rjmp	.+54     	; 0x880 <_ZN3i2c5startEv+0x4c>
     84a:	21 50       	subi	r18, 0x01	; 1
     84c:	31 09       	sbc	r19, r1
	{
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
     84e:	a9 f4       	brne	.+42     	; 0x87a <_ZN3i2c5startEv+0x46>
		{
			// timeout occurred, error
			sprintf(debug, "start timed out\r\n");
     850:	82 e1       	ldi	r24, 0x12	; 18
     852:	e1 e5       	ldi	r30, 0x51	; 81
     854:	f2 e0       	ldi	r31, 0x02	; 2
     856:	a8 e2       	ldi	r26, 0x28	; 40
     858:	b4 e0       	ldi	r27, 0x04	; 4
     85a:	01 90       	ld	r0, Z+
     85c:	0d 92       	st	X+, r0
     85e:	8a 95       	dec	r24
     860:	e1 f7       	brne	.-8      	; 0x85a <_ZN3i2c5startEv+0x26>
			p_serial->send(debug);
     862:	68 e2       	ldi	r22, 0x28	; 40
     864:	74 e0       	ldi	r23, 0x04	; 4
     866:	88 81       	ld	r24, Y
     868:	99 81       	ldd	r25, Y+1	; 0x01
     86a:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
			return true;
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	29 c0       	rjmp	.+82     	; 0x8c4 <_ZN3i2c5startEv+0x90>
{
	// put a start condition on the line
	TWCR = ((1 << TWSTA) | (1 << TWEN) | (1 << TWINT));
	
	// wait for TWINT to go low, which signals start condition completed
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     872:	21 e0       	ldi	r18, 0x01	; 1
     874:	34 e0       	ldi	r19, 0x04	; 4
     876:	ec eb       	ldi	r30, 0xBC	; 188
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	90 81       	ld	r25, Z
     87c:	99 23       	and	r25, r25
     87e:	2c f7       	brge	.-54     	; 0x84a <_ZN3i2c5startEv+0x16>
			return true;
		}
	}
	
	// check status register
	if ((TWSR & STAT_MSK) != STAT_START)
     880:	90 91 b9 00 	lds	r25, 0x00B9
     884:	98 7f       	andi	r25, 0xF8	; 248
     886:	98 30       	cpi	r25, 0x08	; 8
     888:	e1 f0       	breq	.+56     	; 0x8c2 <_ZN3i2c5startEv+0x8e>
	{
		// Status register is not a start signal, error
		sprintf(debug, "start status (0x%2X) bad\r\n", TWSR);
     88a:	80 91 b9 00 	lds	r24, 0x00B9
     88e:	1f 92       	push	r1
     890:	8f 93       	push	r24
     892:	85 e6       	ldi	r24, 0x65	; 101
     894:	92 e0       	ldi	r25, 0x02	; 2
     896:	9f 93       	push	r25
     898:	8f 93       	push	r24
     89a:	88 e2       	ldi	r24, 0x28	; 40
     89c:	94 e0       	ldi	r25, 0x04	; 4
     89e:	9f 93       	push	r25
     8a0:	8f 93       	push	r24
     8a2:	0e 94 c6 09 	call	0x138c	; 0x138c <sprintf>
		p_serial->send(debug);
     8a6:	68 e2       	ldi	r22, 0x28	; 40
     8a8:	74 e0       	ldi	r23, 0x04	; 4
     8aa:	88 81       	ld	r24, Y
     8ac:	99 81       	ldd	r25, Y+1	; 0x01
     8ae:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
		return true;
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <_ZN3i2c5startEv+0x90>
	}
	
	return false;
     8c2:	80 e0       	ldi	r24, 0x00	; 0
}
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	08 95       	ret

000008ca <_ZN3i2c7restartEv>:
 * Description: This method sends a repeated start signal on the i2c bus
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::restart (void)
{
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	ec 01       	movw	r28, r24
	// put another start condition on the line
	TWCR = ((1 << TWSTA) | (1 << TWEN) | (1 << TWINT));
     8d0:	ec eb       	ldi	r30, 0xBC	; 188
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	84 ea       	ldi	r24, 0xA4	; 164
     8d6:	80 83       	st	Z, r24
	
	// wait for TWINT to go low, which signals start condition completed
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     8d8:	80 81       	ld	r24, Z
     8da:	88 23       	and	r24, r24
     8dc:	ac f4       	brge	.+42     	; 0x908 <__stack+0x9>
     8de:	1b c0       	rjmp	.+54     	; 0x916 <__stack+0x17>
     8e0:	21 50       	subi	r18, 0x01	; 1
     8e2:	31 09       	sbc	r19, r1
	{
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
     8e4:	a9 f4       	brne	.+42     	; 0x910 <__stack+0x11>
		{
			// timeout occurred, error
			sprintf(debug, "restart timed out\r\n");
     8e6:	84 e1       	ldi	r24, 0x14	; 20
     8e8:	ef e4       	ldi	r30, 0x4F	; 79
     8ea:	f2 e0       	ldi	r31, 0x02	; 2
     8ec:	a8 e2       	ldi	r26, 0x28	; 40
     8ee:	b4 e0       	ldi	r27, 0x04	; 4
     8f0:	01 90       	ld	r0, Z+
     8f2:	0d 92       	st	X+, r0
     8f4:	8a 95       	dec	r24
     8f6:	e1 f7       	brne	.-8      	; 0x8f0 <_ZN3i2c7restartEv+0x26>
			p_serial->send(debug);
     8f8:	68 e2       	ldi	r22, 0x28	; 40
     8fa:	74 e0       	ldi	r23, 0x04	; 4
     8fc:	88 81       	ld	r24, Y
     8fe:	99 81       	ldd	r25, Y+1	; 0x01
     900:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
			return true;
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	29 c0       	rjmp	.+82     	; 0x95a <__stack+0x5b>
{
	// put another start condition on the line
	TWCR = ((1 << TWSTA) | (1 << TWEN) | (1 << TWINT));
	
	// wait for TWINT to go low, which signals start condition completed
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     908:	21 e0       	ldi	r18, 0x01	; 1
     90a:	34 e0       	ldi	r19, 0x04	; 4
     90c:	ec eb       	ldi	r30, 0xBC	; 188
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	90 81       	ld	r25, Z
     912:	99 23       	and	r25, r25
     914:	2c f7       	brge	.-54     	; 0x8e0 <_ZN3i2c7restartEv+0x16>
			return true;
		}
	}
	
	// check status register
	if ((TWSR & STAT_MSK) != STAT_RESTART)
     916:	90 91 b9 00 	lds	r25, 0x00B9
     91a:	98 7f       	andi	r25, 0xF8	; 248
     91c:	90 31       	cpi	r25, 0x10	; 16
     91e:	e1 f0       	breq	.+56     	; 0x958 <__stack+0x59>
	{
		// Status register is not a repeated start signal, error
		sprintf(debug, "restart status (0x%2X) bad\r\n", TWSR);
     920:	80 91 b9 00 	lds	r24, 0x00B9
     924:	1f 92       	push	r1
     926:	8f 93       	push	r24
     928:	83 e6       	ldi	r24, 0x63	; 99
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	9f 93       	push	r25
     92e:	8f 93       	push	r24
     930:	88 e2       	ldi	r24, 0x28	; 40
     932:	94 e0       	ldi	r25, 0x04	; 4
     934:	9f 93       	push	r25
     936:	8f 93       	push	r24
     938:	0e 94 c6 09 	call	0x138c	; 0x138c <sprintf>
		p_serial->send(debug);
     93c:	68 e2       	ldi	r22, 0x28	; 40
     93e:	74 e0       	ldi	r23, 0x04	; 4
     940:	88 81       	ld	r24, Y
     942:	99 81       	ldd	r25, Y+1	; 0x01
     944:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
		return true;
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	01 c0       	rjmp	.+2      	; 0x95a <__stack+0x5b>
	}
	
	return false;	
     958:	80 e0       	ldi	r24, 0x00	; 0
}
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <_ZN3i2c10write_byteEh>:
 * 
 * Parameters:	data - the byte of data being written to the bus
 * Return:		bool - status of operation (true = ack, false = nack)
 ****************************************************************************/
bool i2c::write_byte (uint8_t data)
{	
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	ac 01       	movw	r20, r24
	TWDR = data;
     966:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = ((1 << TWINT) | (1 << TWEN));
     96a:	ec eb       	ldi	r30, 0xBC	; 188
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	94 e8       	ldi	r25, 0x84	; 132
     970:	90 83       	st	Z, r25
	

	// wait for TWINT to go low, which signals write condition sent
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     972:	90 81       	ld	r25, Z
     974:	99 23       	and	r25, r25
     976:	b4 f4       	brge	.+44     	; 0x9a4 <_ZN3i2c10write_byteEh+0x44>
     978:	1c c0       	rjmp	.+56     	; 0x9b2 <_ZN3i2c10write_byteEh+0x52>
     97a:	21 50       	subi	r18, 0x01	; 1
     97c:	31 09       	sbc	r19, r1
	{
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
     97e:	b1 f4       	brne	.+44     	; 0x9ac <_ZN3i2c10write_byteEh+0x4c>
     980:	ea 01       	movw	r28, r20
		{
			// timeout occurred, error
			sprintf(debug, "write_byte timed out\r\n");
     982:	87 e1       	ldi	r24, 0x17	; 23
     984:	e0 e8       	ldi	r30, 0x80	; 128
     986:	f2 e0       	ldi	r31, 0x02	; 2
     988:	a8 e2       	ldi	r26, 0x28	; 40
     98a:	b4 e0       	ldi	r27, 0x04	; 4
     98c:	01 90       	ld	r0, Z+
     98e:	0d 92       	st	X+, r0
     990:	8a 95       	dec	r24
     992:	e1 f7       	brne	.-8      	; 0x98c <_ZN3i2c10write_byteEh+0x2c>
			p_serial->send(debug);
     994:	68 e2       	ldi	r22, 0x28	; 40
     996:	74 e0       	ldi	r23, 0x04	; 4
     998:	88 81       	ld	r24, Y
     99a:	99 81       	ldd	r25, Y+1	; 0x01
     99c:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
			return true;
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	13 c0       	rjmp	.+38     	; 0x9ca <_ZN3i2c10write_byteEh+0x6a>
	TWDR = data;
	TWCR = ((1 << TWINT) | (1 << TWEN));
	

	// wait for TWINT to go low, which signals write condition sent
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     9a4:	21 e0       	ldi	r18, 0x01	; 1
     9a6:	34 e0       	ldi	r19, 0x04	; 4
     9a8:	ec eb       	ldi	r30, 0xBC	; 188
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	90 81       	ld	r25, Z
     9ae:	99 23       	and	r25, r25
     9b0:	24 f7       	brge	.-56     	; 0x97a <_ZN3i2c10write_byteEh+0x1a>
			return true;
		}
	}
	
	// check the ACK status of the write
	switch (TWSR & STAT_MSK)
     9b2:	80 91 b9 00 	lds	r24, 0x00B9
     9b6:	88 7f       	andi	r24, 0xF8	; 248
     9b8:	88 32       	cpi	r24, 0x28	; 40
     9ba:	31 f0       	breq	.+12     	; 0x9c8 <_ZN3i2c10write_byteEh+0x68>
     9bc:	80 34       	cpi	r24, 0x40	; 64
     9be:	21 f0       	breq	.+8      	; 0x9c8 <_ZN3i2c10write_byteEh+0x68>
     9c0:	88 31       	cpi	r24, 0x18	; 24
     9c2:	11 f0       	breq	.+4      	; 0x9c8 <_ZN3i2c10write_byteEh+0x68>
			// An ACK was received
			return true;
		
		default:
			// a Nack of Some kind received
			return false;	
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	01 c0       	rjmp	.+2      	; 0x9ca <_ZN3i2c10write_byteEh+0x6a>
	{
		case (STAT_WRITE_ACK):
		case (STAT_TRANS_ACK):
		case (STAT_READ_ACK):
			// An ACK was received
			return true;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
			// a Nack of Some kind received
			return false;	
	}
	
	return false;
}
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	08 95       	ret

000009d0 <_ZN3i2c4pingEh>:
 * 
 * Parameters:	addr - the address to be checked
 * Return:		bool - state of if an ACK was received
 ****************************************************************************/
bool i2c::ping (uint8_t addr)
{
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	ec 01       	movw	r28, r24
     9d8:	16 2f       	mov	r17, r22
	bool sign_of_life;
	start();
     9da:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN3i2c5startEv>
	sign_of_life = write_byte(addr);
     9de:	61 2f       	mov	r22, r17
     9e0:	ce 01       	movw	r24, r28
     9e2:	0e 94 b0 04 	call	0x960	; 0x960 <_ZN3i2c10write_byteEh>
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::stop (void)
{
	TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
     9e6:	94 e9       	ldi	r25, 0x94	; 148
     9e8:	90 93 bc 00 	sts	0x00BC, r25
	start();
	sign_of_life = write_byte(addr);
	stop();
	
	return sign_of_life;
}
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	08 95       	ret

000009f4 <_ZN3i2c9read_byteEb>:
 * Parameters:	ack - true if an ack is expected after the byte,
 *					  false if a nack is expected after they byte
 * Return:		uint8_t - the byte of data received, or 0xFF if error occurs
 ****************************************************************************/
uint8_t i2c::read_byte (bool ack)
{
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	ac 01       	movw	r20, r24
	//uint8_t expected_response;
	
	if (ack) // an ack is expected, so we are expecting more data after this
     9fa:	66 23       	and	r22, r22
     9fc:	21 f0       	breq	.+8      	; 0xa06 <_ZN3i2c9read_byteEb+0x12>
	{
		TWCR = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
     9fe:	84 ec       	ldi	r24, 0xC4	; 196
     a00:	80 93 bc 00 	sts	0x00BC, r24
     a04:	03 c0       	rjmp	.+6      	; 0xa0c <_ZN3i2c9read_byteEb+0x18>
		//expected_response = STAT_TRANS_ACK; // changed from STAT_REC_ACK
	}
	else
	{
		TWCR = ((1 << TWINT) | (1 << TWEN));
     a06:	84 e8       	ldi	r24, 0x84	; 132
     a08:	80 93 bc 00 	sts	0x00BC, r24
		//expected_response = STAT_REC_NACK;
	}
	
	// wait for TWINT to go low, which signals read complete
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     a0c:	90 91 bc 00 	lds	r25, 0x00BC
     a10:	99 23       	and	r25, r25
     a12:	b4 f4       	brge	.+44     	; 0xa40 <_ZN3i2c9read_byteEb+0x4c>
     a14:	1c c0       	rjmp	.+56     	; 0xa4e <_ZN3i2c9read_byteEb+0x5a>
     a16:	21 50       	subi	r18, 0x01	; 1
     a18:	31 09       	sbc	r19, r1
	{
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
     a1a:	b1 f4       	brne	.+44     	; 0xa48 <_ZN3i2c9read_byteEb+0x54>
     a1c:	ea 01       	movw	r28, r20
		{
			// timeout occurred, error
			sprintf(debug, "read_byte timed out\r\n");
     a1e:	86 e1       	ldi	r24, 0x16	; 22
     a20:	e7 e9       	ldi	r30, 0x97	; 151
     a22:	f2 e0       	ldi	r31, 0x02	; 2
     a24:	a8 e2       	ldi	r26, 0x28	; 40
     a26:	b4 e0       	ldi	r27, 0x04	; 4
     a28:	01 90       	ld	r0, Z+
     a2a:	0d 92       	st	X+, r0
     a2c:	8a 95       	dec	r24
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <_ZN3i2c9read_byteEb+0x34>
			p_serial->send(debug);
     a30:	68 e2       	ldi	r22, 0x28	; 40
     a32:	74 e0       	ldi	r23, 0x04	; 4
     a34:	88 81       	ld	r24, Y
     a36:	99 81       	ldd	r25, Y+1	; 0x01
     a38:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
			return 0xFF;
     a3c:	8f ef       	ldi	r24, 0xFF	; 255
     a3e:	09 c0       	rjmp	.+18     	; 0xa52 <_ZN3i2c9read_byteEb+0x5e>
		TWCR = ((1 << TWINT) | (1 << TWEN));
		//expected_response = STAT_REC_NACK;
	}
	
	// wait for TWINT to go low, which signals read complete
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     a40:	21 e0       	ldi	r18, 0x01	; 1
     a42:	34 e0       	ldi	r19, 0x04	; 4
     a44:	ec eb       	ldi	r30, 0xBC	; 188
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	90 81       	ld	r25, Z
     a4a:	99 23       	and	r25, r25
     a4c:	24 f7       	brge	.-56     	; 0xa16 <_ZN3i2c9read_byteEb+0x22>
		return 0xFF;
	}
	*/
	
	// everything ok, return the data, which is stored in TWDR
	return TWDR;
     a4e:	80 91 bb 00 	lds	r24, 0x00BB
}
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	08 95       	ret

00000a58 <_ZN3i2c5writeEhhh>:
 *				reg	 - the register to be written to
 *				data - the data being written
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::write (uint8_t addr, uint8_t reg, uint8_t data)
{
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	ec 01       	movw	r28, r24
     a64:	16 2f       	mov	r17, r22
     a66:	04 2f       	mov	r16, r20
     a68:	f2 2e       	mov	r15, r18
	start();
     a6a:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN3i2c5startEv>
	if (!write_byte(addr) || !write_byte(reg) || !write_byte(data))
     a6e:	61 2f       	mov	r22, r17
     a70:	ce 01       	movw	r24, r28
     a72:	0e 94 b0 04 	call	0x960	; 0x960 <_ZN3i2c10write_byteEh>
     a76:	88 23       	and	r24, r24
     a78:	61 f0       	breq	.+24     	; 0xa92 <_ZN3i2c5writeEhhh+0x3a>
     a7a:	60 2f       	mov	r22, r16
     a7c:	ce 01       	movw	r24, r28
     a7e:	0e 94 b0 04 	call	0x960	; 0x960 <_ZN3i2c10write_byteEh>
     a82:	88 23       	and	r24, r24
     a84:	31 f0       	breq	.+12     	; 0xa92 <_ZN3i2c5writeEhhh+0x3a>
     a86:	6f 2d       	mov	r22, r15
     a88:	ce 01       	movw	r24, r28
     a8a:	0e 94 b0 04 	call	0x960	; 0x960 <_ZN3i2c10write_byteEh>
     a8e:	81 11       	cpse	r24, r1
     a90:	20 c0       	rjmp	.+64     	; 0xad2 <_ZN3i2c5writeEhhh+0x7a>
	{
		// an error occurred, one of these had a NACK
		sprintf(debug, "NACK on write <addr:0x%2X, reg:0x%2X, data:0x%2X>\r\n",
			addr, reg, data);
     a92:	1f 92       	push	r1
     a94:	ff 92       	push	r15
     a96:	1f 92       	push	r1
     a98:	0f 93       	push	r16
     a9a:	1f 92       	push	r1
     a9c:	1f 93       	push	r17
     a9e:	8d ea       	ldi	r24, 0xAD	; 173
     aa0:	92 e0       	ldi	r25, 0x02	; 2
     aa2:	9f 93       	push	r25
     aa4:	8f 93       	push	r24
     aa6:	88 e2       	ldi	r24, 0x28	; 40
     aa8:	94 e0       	ldi	r25, 0x04	; 4
     aaa:	9f 93       	push	r25
     aac:	8f 93       	push	r24
     aae:	0e 94 c6 09 	call	0x138c	; 0x138c <sprintf>
		p_serial->send(debug);
     ab2:	68 e2       	ldi	r22, 0x28	; 40
     ab4:	74 e0       	ldi	r23, 0x04	; 4
     ab6:	88 81       	ld	r24, Y
     ab8:	99 81       	ldd	r25, Y+1	; 0x01
     aba:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
		return true;
     abe:	8d b7       	in	r24, 0x3d	; 61
     ac0:	9e b7       	in	r25, 0x3e	; 62
     ac2:	0a 96       	adiw	r24, 0x0a	; 10
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	f8 94       	cli
     ac8:	9e bf       	out	0x3e, r25	; 62
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	8d bf       	out	0x3d, r24	; 61
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	04 c0       	rjmp	.+8      	; 0xada <_ZN3i2c5writeEhhh+0x82>
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::stop (void)
{
	TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
     ad2:	84 e9       	ldi	r24, 0x94	; 148
     ad4:	80 93 bc 00 	sts	0x00BC, r24
		return true;
	}
	stop();
	
	// all good, success!
	return false;
     ad8:	80 e0       	ldi	r24, 0x00	; 0
}
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	08 95       	ret

00000ae6 <_ZN3i2c4readEhhPhh>:
 *				p_buff - the buffer to hold the data being read
 *				count  - the total number of bytes to read
 * Return:		bool   - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::read (uint8_t addr, uint8_t reg, uint8_t* p_buff, uint8_t count)
{
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	7c 01       	movw	r14, r24
     af8:	c6 2f       	mov	r28, r22
     afa:	14 2f       	mov	r17, r20
     afc:	69 01       	movw	r12, r18
		start();
     afe:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN3i2c5startEv>
		if (!write_byte(addr) || !write_byte(reg))
     b02:	6c 2f       	mov	r22, r28
     b04:	c7 01       	movw	r24, r14
     b06:	0e 94 b0 04 	call	0x960	; 0x960 <_ZN3i2c10write_byteEh>
     b0a:	88 23       	and	r24, r24
     b0c:	39 f0       	breq	.+14     	; 0xb1c <_ZN3i2c4readEhhPhh+0x36>
     b0e:	61 2f       	mov	r22, r17
     b10:	c7 01       	movw	r24, r14
     b12:	0e 94 b0 04 	call	0x960	; 0x960 <_ZN3i2c10write_byteEh>
     b16:	d8 2f       	mov	r29, r24
     b18:	81 11       	cpse	r24, r1
     b1a:	1f c0       	rjmp	.+62     	; 0xb5a <_ZN3i2c4readEhhPhh+0x74>
		{
			// an error occurred, one of these had a NACK
			sprintf(debug, "Write NACK on read <addr:0x%2X, reg:0x%2X>\r\n",
			addr, reg);
     b1c:	1f 92       	push	r1
     b1e:	1f 93       	push	r17
     b20:	1f 92       	push	r1
     b22:	cf 93       	push	r28
     b24:	81 e2       	ldi	r24, 0x21	; 33
     b26:	93 e0       	ldi	r25, 0x03	; 3
     b28:	9f 93       	push	r25
     b2a:	8f 93       	push	r24
     b2c:	88 e2       	ldi	r24, 0x28	; 40
     b2e:	94 e0       	ldi	r25, 0x04	; 4
     b30:	9f 93       	push	r25
     b32:	8f 93       	push	r24
     b34:	0e 94 c6 09 	call	0x138c	; 0x138c <sprintf>
			p_serial->send(debug);
     b38:	68 e2       	ldi	r22, 0x28	; 40
     b3a:	74 e0       	ldi	r23, 0x04	; 4
     b3c:	f7 01       	movw	r30, r14
     b3e:	80 81       	ld	r24, Z
     b40:	91 81       	ldd	r25, Z+1	; 0x01
     b42:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
			return true;
     b46:	8d b7       	in	r24, 0x3d	; 61
     b48:	9e b7       	in	r25, 0x3e	; 62
     b4a:	08 96       	adiw	r24, 0x08	; 8
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	9e bf       	out	0x3e, r25	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	8d bf       	out	0x3d, r24	; 61
     b56:	d1 e0       	ldi	r29, 0x01	; 1
     b58:	44 c0       	rjmp	.+136    	; 0xbe2 <_ZN3i2c4readEhhPhh+0xfc>
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::stop (void)
{
	TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
     b5a:	84 e9       	ldi	r24, 0x94	; 148
     b5c:	80 93 bc 00 	sts	0x00BC, r24
			addr, reg);
			p_serial->send(debug);
			return true;
		}
		stop();
		restart();	// change?
     b60:	c7 01       	movw	r24, r14
     b62:	0e 94 65 04 	call	0x8ca	; 0x8ca <_ZN3i2c7restartEv>
		// read the info
		if (!write_byte(addr | READ_BIT))
     b66:	c1 60       	ori	r28, 0x01	; 1
     b68:	6c 2f       	mov	r22, r28
     b6a:	c7 01       	movw	r24, r14
     b6c:	0e 94 b0 04 	call	0x960	; 0x960 <_ZN3i2c10write_byteEh>
     b70:	88 23       	and	r24, r24
     b72:	19 f0       	breq	.+6      	; 0xb7a <_ZN3i2c4readEhhPhh+0x94>
			p_serial->send(debug);
			return 0xFF;
		}
		
		// Read the data
		for (uint8_t ndx = 1; ndx < count; ndx++)
     b74:	02 30       	cpi	r16, 0x02	; 2
     b76:	d8 f4       	brcc	.+54     	; 0xbae <_ZN3i2c4readEhhPhh+0xc8>
     b78:	2a c0       	rjmp	.+84     	; 0xbce <_ZN3i2c4readEhhPhh+0xe8>
		// read the info
		if (!write_byte(addr | READ_BIT))
		{
			// an error occurred, a NACK was received
			sprintf(debug, "NACK on read <addr:0x%2X>\r\n",
			addr | READ_BIT);
     b7a:	1f 92       	push	r1
     b7c:	cf 93       	push	r28
     b7e:	8e e4       	ldi	r24, 0x4E	; 78
     b80:	93 e0       	ldi	r25, 0x03	; 3
     b82:	9f 93       	push	r25
     b84:	8f 93       	push	r24
     b86:	88 e2       	ldi	r24, 0x28	; 40
     b88:	94 e0       	ldi	r25, 0x04	; 4
     b8a:	9f 93       	push	r25
     b8c:	8f 93       	push	r24
     b8e:	0e 94 c6 09 	call	0x138c	; 0x138c <sprintf>
			p_serial->send(debug);
     b92:	68 e2       	ldi	r22, 0x28	; 40
     b94:	74 e0       	ldi	r23, 0x04	; 4
     b96:	f7 01       	movw	r30, r14
     b98:	80 81       	ld	r24, Z
     b9a:	91 81       	ldd	r25, Z+1	; 0x01
     b9c:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
			return 0xFF;
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	1a c0       	rjmp	.+52     	; 0xbe2 <_ZN3i2c4readEhhPhh+0xfc>
     bae:	e6 01       	movw	r28, r12
     bb0:	02 50       	subi	r16, 0x02	; 2
     bb2:	10 e0       	ldi	r17, 0x00	; 0
     bb4:	0f 5f       	subi	r16, 0xFF	; 255
     bb6:	1f 4f       	sbci	r17, 0xFF	; 255
     bb8:	c0 0e       	add	r12, r16
     bba:	d1 1e       	adc	r13, r17
     bbc:	86 01       	movw	r16, r12
		
		// Read the data
		for (uint8_t ndx = 1; ndx < count; ndx++)
		{
			// still have more to read, so expect an ACK
			*p_buff++ = read_byte(true);
     bbe:	61 e0       	ldi	r22, 0x01	; 1
     bc0:	c7 01       	movw	r24, r14
     bc2:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <_ZN3i2c9read_byteEb>
     bc6:	89 93       	st	Y+, r24
			p_serial->send(debug);
			return 0xFF;
		}
		
		// Read the data
		for (uint8_t ndx = 1; ndx < count; ndx++)
     bc8:	c0 17       	cp	r28, r16
     bca:	d1 07       	cpc	r29, r17
     bcc:	c1 f7       	brne	.-16     	; 0xbbe <_ZN3i2c4readEhhPhh+0xd8>
		{
			// still have more to read, so expect an ACK
			*p_buff++ = read_byte(true);
		}
		// Read last bit of data, so expect a NACK
		*p_buff++ = read_byte(false);
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	c7 01       	movw	r24, r14
     bd2:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <_ZN3i2c9read_byteEb>
     bd6:	f6 01       	movw	r30, r12
     bd8:	80 83       	st	Z, r24
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::stop (void)
{
	TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
     bda:	84 e9       	ldi	r24, 0x94	; 148
     bdc:	80 93 bc 00 	sts	0x00BC, r24
		}
		// Read last bit of data, so expect a NACK
		*p_buff++ = read_byte(false);
		stop();
		
		return false;
     be0:	d0 e0       	ldi	r29, 0x00	; 0
     be2:	8d 2f       	mov	r24, r29
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	cf 90       	pop	r12
     bf4:	08 95       	ret

00000bf6 <main>:

/* initialize shared variables */
char debug[SERIAL_MAX_SEND];

int main(void)
{
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	c1 55       	subi	r28, 0x51	; 81
     c00:	d1 09       	sbc	r29, r1
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
	/* create serial object */
	serial ser_dev = serial(9600, 16000000);
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	34 e2       	ldi	r19, 0x24	; 36
     c10:	44 ef       	ldi	r20, 0xF4	; 244
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	60 e8       	ldi	r22, 0x80	; 128
     c16:	75 e2       	ldi	r23, 0x25	; 37
     c18:	ce 01       	movw	r24, r28
     c1a:	80 5c       	subi	r24, 0xC0	; 192
     c1c:	9f 4f       	sbci	r25, 0xFF	; 255
     c1e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN6serialC1Ejm>
	
	/* create a i2c object */
	i2c my_i2c = i2c(&ser_dev);
     c22:	be 01       	movw	r22, r28
     c24:	60 5c       	subi	r22, 0xC0	; 192
     c26:	7f 4f       	sbci	r23, 0xFF	; 255
     c28:	ce 01       	movw	r24, r28
     c2a:	80 5b       	subi	r24, 0xB0	; 176
     c2c:	9f 4f       	sbci	r25, 0xFF	; 255
     c2e:	0e 94 fe 03 	call	0x7fc	; 0x7fc <_ZN3i2cC1EP6serial>

	/* create a BME280 object */
	BME280 my_BME280 = BME280(&my_i2c, &ser_dev);
     c32:	ae 01       	movw	r20, r28
     c34:	40 5c       	subi	r20, 0xC0	; 192
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	be 01       	movw	r22, r28
     c3a:	60 5b       	subi	r22, 0xB0	; 176
     c3c:	7f 4f       	sbci	r23, 0xFF	; 255
     c3e:	ce 01       	movw	r24, r28
     c40:	01 96       	adiw	r24, 0x01	; 1
     c42:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN6BME280C1EP3i2cP6serial>
	
	/* create a tilt-ball object */
	TiltBall my_TiltBall = TiltBall(&ser_dev, 2);
     c46:	42 e0       	ldi	r20, 0x02	; 2
     c48:	be 01       	movw	r22, r28
     c4a:	60 5c       	subi	r22, 0xC0	; 192
     c4c:	7f 4f       	sbci	r23, 0xFF	; 255
     c4e:	ce 01       	movw	r24, r28
     c50:	83 5b       	subi	r24, 0xB3	; 179
     c52:	9f 4f       	sbci	r25, 0xFF	; 255
     c54:	0e 94 99 08 	call	0x1132	; 0x1132 <_ZN8TiltBallC1EP6serialh>
	
	/* create a water temperature sensor - surface */
	oneWire my_oneWire_surface_temp = oneWire(&ser_dev, 0, ID_SURFACE_TEMP);
     c58:	21 e0       	ldi	r18, 0x01	; 1
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	be 01       	movw	r22, r28
     c5e:	60 5c       	subi	r22, 0xC0	; 192
     c60:	7f 4f       	sbci	r23, 0xFF	; 255
     c62:	ce 01       	movw	r24, r28
     c64:	8a 5b       	subi	r24, 0xBA	; 186
     c66:	9f 4f       	sbci	r25, 0xFF	; 255
     c68:	0e 94 74 06 	call	0xce8	; 0xce8 <_ZN7oneWireC1EP6serialhh>
	
	/* create a UVIndex sensor */
	UVIndex my_UVIndex = UVIndex(&ser_dev, 7);
     c6c:	47 e0       	ldi	r20, 0x07	; 7
     c6e:	be 01       	movw	r22, r28
     c70:	60 5c       	subi	r22, 0xC0	; 192
     c72:	7f 4f       	sbci	r23, 0xFF	; 255
     c74:	ce 01       	movw	r24, r28
     c76:	86 5b       	subi	r24, 0xB6	; 182
     c78:	9f 4f       	sbci	r25, 0xFF	; 255
     c7a:	0e 94 c4 08 	call	0x1188	; 0x1188 <_ZN7UVIndexC1EP6serialh>
    /* Replace with your application code */
    while (1) 
    {
		//my_TiltBall.TiltBallTask();
		
		sprintf(debug, "\r\n\r\n");
     c7e:	15 e0       	ldi	r17, 0x05	; 5
     c80:	ea e6       	ldi	r30, 0x6A	; 106
     c82:	f3 e0       	ldi	r31, 0x03	; 3
     c84:	a8 e2       	ldi	r26, 0x28	; 40
     c86:	b4 e0       	ldi	r27, 0x04	; 4
     c88:	81 2f       	mov	r24, r17
     c8a:	01 90       	ld	r0, Z+
     c8c:	0d 92       	st	X+, r0
     c8e:	8a 95       	dec	r24
     c90:	e1 f7       	brne	.-8      	; 0xc8a <main+0x94>
		ser_dev.send(debug);
     c92:	68 e2       	ldi	r22, 0x28	; 40
     c94:	74 e0       	ldi	r23, 0x04	; 4
     c96:	ce 01       	movw	r24, r28
     c98:	80 5c       	subi	r24, 0xC0	; 192
     c9a:	9f 4f       	sbci	r25, 0xFF	; 255
     c9c:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
		
		my_oneWire_surface_temp.oneWireTask();
     ca0:	ce 01       	movw	r24, r28
     ca2:	8a 5b       	subi	r24, 0xBA	; 186
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
     ca6:	0e 94 c3 07 	call	0xf86	; 0xf86 <_ZN7oneWire11oneWireTaskEv>
		
		sprintf(debug, "\r\n\r\n");
     caa:	ea e6       	ldi	r30, 0x6A	; 106
     cac:	f3 e0       	ldi	r31, 0x03	; 3
     cae:	a8 e2       	ldi	r26, 0x28	; 40
     cb0:	b4 e0       	ldi	r27, 0x04	; 4
     cb2:	81 2f       	mov	r24, r17
     cb4:	01 90       	ld	r0, Z+
     cb6:	0d 92       	st	X+, r0
     cb8:	8a 95       	dec	r24
     cba:	e1 f7       	brne	.-8      	; 0xcb4 <main+0xbe>
		ser_dev.send(debug);
     cbc:	68 e2       	ldi	r22, 0x28	; 40
     cbe:	74 e0       	ldi	r23, 0x04	; 4
     cc0:	ce 01       	movw	r24, r28
     cc2:	80 5c       	subi	r24, 0xC0	; 192
     cc4:	9f 4f       	sbci	r25, 0xFF	; 255
     cc6:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
		
		my_UVIndex.UVIndexTask();
     cca:	ce 01       	movw	r24, r28
     ccc:	86 5b       	subi	r24, 0xB6	; 182
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	0e 94 1f 09 	call	0x123e	; 0x123e <_ZN7UVIndex11UVIndexTaskEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cd4:	2f ef       	ldi	r18, 0xFF	; 255
     cd6:	83 ed       	ldi	r24, 0xD3	; 211
     cd8:	90 e3       	ldi	r25, 0x30	; 48
     cda:	21 50       	subi	r18, 0x01	; 1
     cdc:	80 40       	sbci	r24, 0x00	; 0
     cde:	90 40       	sbci	r25, 0x00	; 0
     ce0:	e1 f7       	brne	.-8      	; 0xcda <main+0xe4>
     ce2:	00 c0       	rjmp	.+0      	; 0xce4 <main+0xee>
     ce4:	00 00       	nop
     ce6:	cc cf       	rjmp	.-104    	; 0xc80 <main+0x8a>

00000ce8 <_ZN7oneWireC1EP6serialhh>:
 */ 

#include "oneWire.h"
#include "shares.h"

oneWire::oneWire(serial *ptr_serial, uint8_t pin, uint8_t id)
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	ec 01       	movw	r28, r24
{
	p_serial = ptr_serial;	// store local copy for debug
     cee:	79 83       	std	Y+1, r23	; 0x01
     cf0:	68 83       	st	Y, r22
	data_line = pin;		// store local copy
     cf2:	4a 83       	std	Y+2, r20	; 0x02
	dev_id = id;			// store local copy
     cf4:	2b 83       	std	Y+3, r18	; 0x03
	
	// make the data an input
	INPUT(DATA_DDR, data_line);
     cf6:	24 b1       	in	r18, 0x04	; 4
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <_ZN7oneWireC1EP6serialhh+0x1a>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	4a 95       	dec	r20
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <_ZN7oneWireC1EP6serialhh+0x16>
     d06:	80 95       	com	r24
     d08:	82 23       	and	r24, r18
     d0a:	84 b9       	out	0x04, r24	; 4
	
	sprintf(debug, "oneWire Constructor ok! Device id: %d\r\n", dev_id);
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	1f 92       	push	r1
     d10:	8f 93       	push	r24
     d12:	8f e6       	ldi	r24, 0x6F	; 111
     d14:	93 e0       	ldi	r25, 0x03	; 3
     d16:	9f 93       	push	r25
     d18:	8f 93       	push	r24
     d1a:	88 e2       	ldi	r24, 0x28	; 40
     d1c:	94 e0       	ldi	r25, 0x04	; 4
     d1e:	9f 93       	push	r25
     d20:	8f 93       	push	r24
     d22:	0e 94 c6 09 	call	0x138c	; 0x138c <sprintf>
	p_serial->send(debug);
     d26:	68 e2       	ldi	r22, 0x28	; 40
     d28:	74 e0       	ldi	r23, 0x04	; 4
     d2a:	88 81       	ld	r24, Y
     d2c:	99 81       	ldd	r25, Y+1	; 0x01
     d2e:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
}
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <_ZN7oneWire5resetEv>:

bool oneWire::reset (void)
{
     d44:	fc 01       	movw	r30, r24
	bool presence_pulse;
	uint8_t retries = 125;
	
	// make pin an input
	INPUT(DATA_DDR, data_line);
     d46:	24 b1       	in	r18, 0x04	; 4
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 80       	ldd	r0, Z+2	; 0x02
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <_ZN7oneWire5resetEv+0x10>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <_ZN7oneWire5resetEv+0xc>
     d58:	80 95       	com	r24
     d5a:	82 23       	and	r24, r18
     d5c:	84 b9       	out	0x04, r24	; 4
     d5e:	4c e7       	ldi	r20, 0x7C	; 124
     d60:	03 c0       	rjmp	.+6      	; 0xd68 <_ZN7oneWire5resetEv+0x24>
     d62:	41 50       	subi	r20, 0x01	; 1
	
	// wait for wire to go high
	do 
	{
		if (--retries == 0)
     d64:	09 f4       	brne	.+2      	; 0xd68 <_ZN7oneWire5resetEv+0x24>
     d66:	4e c0       	rjmp	.+156    	; 0xe04 <_ZN7oneWire5resetEv+0xc0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d68:	2a e0       	ldi	r18, 0x0A	; 10
     d6a:	2a 95       	dec	r18
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <_ZN7oneWire5resetEv+0x26>
     d6e:	00 c0       	rjmp	.+0      	; 0xd70 <_ZN7oneWire5resetEv+0x2c>
		{
			return false;
		}
		_delay_us(2);
	} while (!(DATA_PIN & (1 << data_line)));
     d70:	23 b1       	in	r18, 0x03	; 3
     d72:	92 81       	ldd	r25, Z+2	; 0x02
     d74:	69 2f       	mov	r22, r25
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <_ZN7oneWire5resetEv+0x3a>
     d7a:	35 95       	asr	r19
     d7c:	27 95       	ror	r18
     d7e:	9a 95       	dec	r25
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <_ZN7oneWire5resetEv+0x36>
	
	// make pin an input
	INPUT(DATA_DDR, data_line);
	
	// wait for wire to go high
	do 
     d82:	20 ff       	sbrs	r18, 0
     d84:	ee cf       	rjmp	.-36     	; 0xd62 <_ZN7oneWire5resetEv+0x1e>
		}
		_delay_us(2);
	} while (!(DATA_PIN & (1 << data_line)));
	
	// set data_line low
	DATA_PORT &= ~(1 << data_line);
     d86:	35 b1       	in	r19, 0x05	; 5
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	ac 01       	movw	r20, r24
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <_ZN7oneWire5resetEv+0x50>
     d90:	44 0f       	add	r20, r20
     d92:	55 1f       	adc	r21, r21
     d94:	6a 95       	dec	r22
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <_ZN7oneWire5resetEv+0x4c>
     d98:	24 2f       	mov	r18, r20
     d9a:	20 95       	com	r18
     d9c:	23 23       	and	r18, r19
     d9e:	25 b9       	out	0x05, r18	; 5
	
	// set data_line as output
	OUTPUT(DATA_DDR, data_line);
     da0:	44 b1       	in	r20, 0x04	; 4
     da2:	9c 01       	movw	r18, r24
     da4:	02 80       	ldd	r0, Z+2	; 0x02
     da6:	02 c0       	rjmp	.+4      	; 0xdac <_ZN7oneWire5resetEv+0x68>
     da8:	22 0f       	add	r18, r18
     daa:	33 1f       	adc	r19, r19
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <_ZN7oneWire5resetEv+0x64>
     db0:	24 2b       	or	r18, r20
     db2:	24 b9       	out	0x04, r18	; 4
     db4:	af e7       	ldi	r26, 0x7F	; 127
     db6:	b7 e0       	ldi	r27, 0x07	; 7
     db8:	11 97       	sbiw	r26, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <_ZN7oneWire5resetEv+0x74>
     dbc:	00 c0       	rjmp	.+0      	; 0xdbe <_ZN7oneWire5resetEv+0x7a>
     dbe:	00 00       	nop
	
	_delay_us(480);
		
	// set data_line as input
	INPUT(DATA_DDR, data_line);
     dc0:	24 b1       	in	r18, 0x04	; 4
     dc2:	02 80       	ldd	r0, Z+2	; 0x02
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <_ZN7oneWire5resetEv+0x86>
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	0a 94       	dec	r0
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <_ZN7oneWire5resetEv+0x82>
     dce:	80 95       	com	r24
     dd0:	82 23       	and	r24, r18
     dd2:	84 b9       	out	0x04, r24	; 4
     dd4:	87 e1       	ldi	r24, 0x17	; 23
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	f1 f7       	brne	.-4      	; 0xdd8 <_ZN7oneWire5resetEv+0x94>
     ddc:	00 c0       	rjmp	.+0      	; 0xdde <_ZN7oneWire5resetEv+0x9a>
     dde:	00 00       	nop
	
	_delay_us(70);
	
	presence_pulse = (bool)!((DATA_PIN & (1 << data_line)));
     de0:	83 b1       	in	r24, 0x03	; 3
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 80       	ldd	r0, Z+2	; 0x02
     de6:	02 c0       	rjmp	.+4      	; 0xdec <_ZN7oneWire5resetEv+0xa8>
     de8:	95 95       	asr	r25
     dea:	87 95       	ror	r24
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <_ZN7oneWire5resetEv+0xa4>
     df0:	a1 e0       	ldi	r26, 0x01	; 1
     df2:	8a 27       	eor	r24, r26
     df4:	81 70       	andi	r24, 0x01	; 1
     df6:	e7 e6       	ldi	r30, 0x67	; 103
     df8:	f6 e0       	ldi	r31, 0x06	; 6
     dfa:	31 97       	sbiw	r30, 0x01	; 1
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <_ZN7oneWire5resetEv+0xb6>
     dfe:	00 c0       	rjmp	.+0      	; 0xe00 <_ZN7oneWire5resetEv+0xbc>
     e00:	00 00       	nop
	
	_delay_us(410);
	
	return presence_pulse;
     e02:	08 95       	ret
	// wait for wire to go high
	do 
	{
		if (--retries == 0)
		{
			return false;
     e04:	80 e0       	ldi	r24, 0x00	; 0
	presence_pulse = (bool)!((DATA_PIN & (1 << data_line)));
	
	_delay_us(410);
	
	return presence_pulse;
}
     e06:	08 95       	ret

00000e08 <_ZN7oneWire7write_1Ev>:
		data >>= 1;
	}
}

void oneWire::write_1 (void)
{
     e08:	fc 01       	movw	r30, r24
	// set data_line low
	DATA_PORT &= ~(1 << data_line);
     e0a:	95 b1       	in	r25, 0x05	; 5
     e0c:	21 e0       	ldi	r18, 0x01	; 1
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	a9 01       	movw	r20, r18
     e12:	02 80       	ldd	r0, Z+2	; 0x02
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <_ZN7oneWire7write_1Ev+0x12>
     e16:	44 0f       	add	r20, r20
     e18:	55 1f       	adc	r21, r21
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <_ZN7oneWire7write_1Ev+0xe>
     e1e:	84 2f       	mov	r24, r20
     e20:	80 95       	com	r24
     e22:	89 23       	and	r24, r25
     e24:	85 b9       	out	0x05, r24	; 5
	
	// make data_line an output
	OUTPUT(DATA_DDR, data_line);
     e26:	44 b1       	in	r20, 0x04	; 4
     e28:	c9 01       	movw	r24, r18
     e2a:	02 80       	ldd	r0, Z+2	; 0x02
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <_ZN7oneWire7write_1Ev+0x2a>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <_ZN7oneWire7write_1Ev+0x26>
     e36:	84 2b       	or	r24, r20
     e38:	84 b9       	out	0x04, r24	; 4
     e3a:	85 e3       	ldi	r24, 0x35	; 53
     e3c:	8a 95       	dec	r24
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <_ZN7oneWire7write_1Ev+0x34>
     e40:	00 00       	nop
	
	_delay_us(10);
	
	// make data_line an input
	INPUT(DATA_DDR, data_line);
     e42:	94 b1       	in	r25, 0x04	; 4
     e44:	02 80       	ldd	r0, Z+2	; 0x02
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <_ZN7oneWire7write_1Ev+0x44>
     e48:	22 0f       	add	r18, r18
     e4a:	33 1f       	adc	r19, r19
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <_ZN7oneWire7write_1Ev+0x40>
     e50:	20 95       	com	r18
     e52:	29 23       	and	r18, r25
     e54:	24 b9       	out	0x04, r18	; 4
     e56:	8b ed       	ldi	r24, 0xDB	; 219
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <_ZN7oneWire7write_1Ev+0x52>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <_ZN7oneWire7write_1Ev+0x58>
     e60:	00 00       	nop
     e62:	08 95       	ret

00000e64 <_ZN7oneWire7write_0Ev>:
	
	_delay_us(55);
}

void oneWire::write_0 (void)
{
     e64:	fc 01       	movw	r30, r24
	// set data_line low
	DATA_PORT &= ~(1 << data_line);
     e66:	95 b1       	in	r25, 0x05	; 5
     e68:	21 e0       	ldi	r18, 0x01	; 1
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	a9 01       	movw	r20, r18
     e6e:	02 80       	ldd	r0, Z+2	; 0x02
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <_ZN7oneWire7write_0Ev+0x12>
     e72:	44 0f       	add	r20, r20
     e74:	55 1f       	adc	r21, r21
     e76:	0a 94       	dec	r0
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <_ZN7oneWire7write_0Ev+0xe>
     e7a:	84 2f       	mov	r24, r20
     e7c:	80 95       	com	r24
     e7e:	89 23       	and	r24, r25
     e80:	85 b9       	out	0x05, r24	; 5
	
	// make data_line an output
	OUTPUT(DATA_DDR, data_line);
     e82:	44 b1       	in	r20, 0x04	; 4
     e84:	c9 01       	movw	r24, r18
     e86:	02 80       	ldd	r0, Z+2	; 0x02
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <_ZN7oneWire7write_0Ev+0x2a>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <_ZN7oneWire7write_0Ev+0x26>
     e92:	84 2b       	or	r24, r20
     e94:	84 b9       	out	0x04, r24	; 4
     e96:	83 e0       	ldi	r24, 0x03	; 3
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <_ZN7oneWire7write_0Ev+0x36>
     e9e:	00 c0       	rjmp	.+0      	; 0xea0 <_ZN7oneWire7write_0Ev+0x3c>
     ea0:	00 00       	nop
	
	_delay_us(65);
	
	// make data_line an input
	INPUT(DATA_DDR, data_line);
     ea2:	94 b1       	in	r25, 0x04	; 4
     ea4:	02 80       	ldd	r0, Z+2	; 0x02
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <_ZN7oneWire7write_0Ev+0x48>
     ea8:	22 0f       	add	r18, r18
     eaa:	33 1f       	adc	r19, r19
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <_ZN7oneWire7write_0Ev+0x44>
     eb0:	20 95       	com	r18
     eb2:	29 23       	and	r18, r25
     eb4:	24 b9       	out	0x04, r18	; 4
     eb6:	9a e1       	ldi	r25, 0x1A	; 26
     eb8:	9a 95       	dec	r25
     eba:	f1 f7       	brne	.-4      	; 0xeb8 <_ZN7oneWire7write_0Ev+0x54>
     ebc:	00 c0       	rjmp	.+0      	; 0xebe <_ZN7oneWire7write_0Ev+0x5a>
     ebe:	08 95       	ret

00000ec0 <_ZN7oneWire10write_byteEh>:
	
	return presence_pulse;
}

void oneWire::write_byte (uint8_t data)
{
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	8c 01       	movw	r16, r24
     eca:	d6 2f       	mov	r29, r22
     ecc:	c8 e0       	ldi	r28, 0x08	; 8
	for (uint8_t i = 0; i < 8; i++)
	{
		if (data & 0x01)
     ece:	d0 ff       	sbrs	r29, 0
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <_ZN7oneWire10write_byteEh+0x1a>
		{
			write_1();
     ed2:	c8 01       	movw	r24, r16
     ed4:	0e 94 04 07 	call	0xe08	; 0xe08 <_ZN7oneWire7write_1Ev>
     ed8:	03 c0       	rjmp	.+6      	; 0xee0 <_ZN7oneWire10write_byteEh+0x20>
		}
		else
		{
			write_0();
     eda:	c8 01       	movw	r24, r16
     edc:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN7oneWire7write_0Ev>
		}
		data >>= 1;
     ee0:	d6 95       	lsr	r29
     ee2:	c1 50       	subi	r28, 0x01	; 1
	return presence_pulse;
}

void oneWire::write_byte (uint8_t data)
{
	for (uint8_t i = 0; i < 8; i++)
     ee4:	a1 f7       	brne	.-24     	; 0xece <_ZN7oneWire10write_byteEh+0xe>
		{
			write_0();
		}
		data >>= 1;
	}
}
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	08 95       	ret

00000ef0 <_ZN7oneWire9read_byteEv>:
	
	_delay_us(5);
}

uint8_t oneWire::read_byte (void)
{
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	fc 01       	movw	r30, r24
     ef8:	a8 e0       	ldi	r26, 0x08	; 8
     efa:	b0 e0       	ldi	r27, 0x00	; 0
	uint8_t data_in;
	uint8_t data_read = 0;
	
	for (uint8_t bit_msk = 0x01; bit_msk; bit_msk <<= 1)
     efc:	11 e0       	ldi	r17, 0x01	; 1
}

uint8_t oneWire::read_byte (void)
{
	uint8_t data_in;
	uint8_t data_read = 0;
     efe:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint8_t bit_msk = 0x01; bit_msk; bit_msk <<= 1)
	{
		// make data_line low
		DATA_PORT &= ~(1 << data_line);
     f00:	21 e0       	ldi	r18, 0x01	; 1
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	45 b1       	in	r20, 0x05	; 5
     f06:	b9 01       	movw	r22, r18
     f08:	02 80       	ldd	r0, Z+2	; 0x02
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <_ZN7oneWire9read_byteEv+0x20>
     f0c:	66 0f       	add	r22, r22
     f0e:	77 1f       	adc	r23, r23
     f10:	0a 94       	dec	r0
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <_ZN7oneWire9read_byteEv+0x1c>
     f14:	96 2f       	mov	r25, r22
     f16:	90 95       	com	r25
     f18:	94 23       	and	r25, r20
     f1a:	95 b9       	out	0x05, r25	; 5
		// make data_line output
		OUTPUT(DATA_DDR, data_line);
     f1c:	94 b1       	in	r25, 0x04	; 4
     f1e:	a9 01       	movw	r20, r18
     f20:	02 80       	ldd	r0, Z+2	; 0x02
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <_ZN7oneWire9read_byteEv+0x38>
     f24:	44 0f       	add	r20, r20
     f26:	55 1f       	adc	r21, r21
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <_ZN7oneWire9read_byteEv+0x34>
     f2c:	49 2b       	or	r20, r25
     f2e:	44 b9       	out	0x04, r20	; 4
     f30:	90 e1       	ldi	r25, 0x10	; 16
     f32:	9a 95       	dec	r25
     f34:	f1 f7       	brne	.-4      	; 0xf32 <_ZN7oneWire9read_byteEv+0x42>
		
		_delay_us(3);
		// make data_line input
		INPUT(DATA_DDR, data_line);
     f36:	44 b1       	in	r20, 0x04	; 4
     f38:	b9 01       	movw	r22, r18
     f3a:	02 80       	ldd	r0, Z+2	; 0x02
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <_ZN7oneWire9read_byteEv+0x52>
     f3e:	66 0f       	add	r22, r22
     f40:	77 1f       	adc	r23, r23
     f42:	0a 94       	dec	r0
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <_ZN7oneWire9read_byteEv+0x4e>
     f46:	96 2f       	mov	r25, r22
     f48:	90 95       	com	r25
     f4a:	94 23       	and	r25, r20
     f4c:	94 b9       	out	0x04, r25	; 4
     f4e:	c5 e3       	ldi	r28, 0x35	; 53
     f50:	ca 95       	dec	r28
     f52:	f1 f7       	brne	.-4      	; 0xf50 <_ZN7oneWire9read_byteEv+0x60>
     f54:	00 00       	nop
		_delay_us(10);
		
		data_in = DATA_PIN & (1 << data_line);
     f56:	93 b1       	in	r25, 0x03	; 3
     f58:	a9 01       	movw	r20, r18
     f5a:	02 80       	ldd	r0, Z+2	; 0x02
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <_ZN7oneWire9read_byteEv+0x72>
     f5e:	44 0f       	add	r20, r20
     f60:	55 1f       	adc	r21, r21
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <_ZN7oneWire9read_byteEv+0x6e>
     f66:	49 23       	and	r20, r25
     f68:	c3 ed       	ldi	r28, 0xD3	; 211
     f6a:	d0 e0       	ldi	r29, 0x00	; 0
     f6c:	21 97       	sbiw	r28, 0x01	; 1
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <_ZN7oneWire9read_byteEv+0x7c>
     f70:	00 c0       	rjmp	.+0      	; 0xf72 <_ZN7oneWire9read_byteEv+0x82>
     f72:	00 00       	nop
		_delay_us(53);
		
		if (data_in)
     f74:	41 11       	cpse	r20, r1
		{
			data_read |= bit_msk;
     f76:	81 2b       	or	r24, r17
uint8_t oneWire::read_byte (void)
{
	uint8_t data_in;
	uint8_t data_read = 0;
	
	for (uint8_t bit_msk = 0x01; bit_msk; bit_msk <<= 1)
     f78:	11 0f       	add	r17, r17
     f7a:	11 97       	sbiw	r26, 0x01	; 1
     f7c:	19 f6       	brne	.-122    	; 0xf04 <_ZN7oneWire9read_byteEv+0x14>
			data_read |= bit_msk;
		}
	}
	
	return data_read;
}
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	08 95       	ret

00000f86 <_ZN7oneWire11oneWireTaskEv>:
{
	return (raw * 6) + (raw / 4);
}

void oneWire::oneWireTask (void)
{
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	ec 01       	movw	r28, r24
	static uint8_t runs = 0;
	
	uint8_t low_byte, high_byte;
	int16_t temp;
	
	if ((runs % 5) == 0)
     f8e:	20 91 27 05 	lds	r18, 0x0527
     f92:	9d ec       	ldi	r25, 0xCD	; 205
     f94:	29 9f       	mul	r18, r25
     f96:	91 2d       	mov	r25, r1
     f98:	11 24       	eor	r1, r1
     f9a:	96 95       	lsr	r25
     f9c:	96 95       	lsr	r25
     f9e:	39 2f       	mov	r19, r25
     fa0:	33 0f       	add	r19, r19
     fa2:	33 0f       	add	r19, r19
     fa4:	93 0f       	add	r25, r19
     fa6:	29 13       	cpse	r18, r25
     fa8:	55 c0       	rjmp	.+170    	; 0x1054 <_ZN7oneWire11oneWireTaskEv+0xce>
	{
		// perform temperature conversion
		reset();
     faa:	ce 01       	movw	r24, r28
     fac:	0e 94 a2 06 	call	0xd44	; 0xd44 <_ZN7oneWire5resetEv>
		write_byte(0xCC);	// skip ROM
     fb0:	6c ec       	ldi	r22, 0xCC	; 204
     fb2:	ce 01       	movw	r24, r28
     fb4:	0e 94 60 07 	call	0xec0	; 0xec0 <_ZN7oneWire10write_byteEh>
		write_byte(0x44);	// single temp conversion
     fb8:	64 e4       	ldi	r22, 0x44	; 68
     fba:	ce 01       	movw	r24, r28
     fbc:	0e 94 60 07 	call	0xec0	; 0xec0 <_ZN7oneWire10write_byteEh>
		
		// read in scratch pad
		reset();
     fc0:	ce 01       	movw	r24, r28
     fc2:	0e 94 a2 06 	call	0xd44	; 0xd44 <_ZN7oneWire5resetEv>
		write_byte(0xCC);	// skip ROM
     fc6:	6c ec       	ldi	r22, 0xCC	; 204
     fc8:	ce 01       	movw	r24, r28
     fca:	0e 94 60 07 	call	0xec0	; 0xec0 <_ZN7oneWire10write_byteEh>
		write_byte(0xBE);	// read scratchpad
     fce:	6e eb       	ldi	r22, 0xBE	; 190
     fd0:	ce 01       	movw	r24, r28
     fd2:	0e 94 60 07 	call	0xec0	; 0xec0 <_ZN7oneWire10write_byteEh>
		
		// read temperature
		low_byte = read_byte();
     fd6:	ce 01       	movw	r24, r28
     fd8:	0e 94 78 07 	call	0xef0	; 0xef0 <_ZN7oneWire9read_byteEv>
     fdc:	18 2f       	mov	r17, r24
		high_byte = read_byte();
     fde:	ce 01       	movw	r24, r28
     fe0:	0e 94 78 07 	call	0xef0	; 0xef0 <_ZN7oneWire9read_byteEv>
		temp = (high_byte << BYTE_SHIFT) | low_byte;
     fe4:	21 2f       	mov	r18, r17
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	38 2b       	or	r19, r24
	return data_read;
}

int16_t oneWire::convert_temp(int16_t raw)
{
	return (raw * 6) + (raw / 4);
     fea:	c9 01       	movw	r24, r18
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	82 0f       	add	r24, r18
     ff2:	93 1f       	adc	r25, r19
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	a9 01       	movw	r20, r18
     ffa:	55 23       	and	r21, r21
     ffc:	14 f4       	brge	.+4      	; 0x1002 <_ZN7oneWire11oneWireTaskEv+0x7c>
     ffe:	4d 5f       	subi	r20, 0xFD	; 253
    1000:	5f 4f       	sbci	r21, 0xFF	; 255
    1002:	55 95       	asr	r21
    1004:	47 95       	ror	r20
    1006:	55 95       	asr	r21
    1008:	47 95       	ror	r20
    100a:	84 0f       	add	r24, r20
    100c:	95 1f       	adc	r25, r21
		low_byte = read_byte();
		high_byte = read_byte();
		temp = (high_byte << BYTE_SHIFT) | low_byte;
		
		// TODO - print out to serial
		sprintf(debug,"temp sensor %d: %d.%d\r\n", dev_id, convert_temp(temp) / 100, convert_temp(temp) % 100);
    100e:	64 e6       	ldi	r22, 0x64	; 100
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__divmodhi4>
    1016:	9f 93       	push	r25
    1018:	8f 93       	push	r24
    101a:	7f 93       	push	r23
    101c:	6f 93       	push	r22
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	1f 92       	push	r1
    1022:	8f 93       	push	r24
    1024:	87 e9       	ldi	r24, 0x97	; 151
    1026:	93 e0       	ldi	r25, 0x03	; 3
    1028:	9f 93       	push	r25
    102a:	8f 93       	push	r24
    102c:	88 e2       	ldi	r24, 0x28	; 40
    102e:	94 e0       	ldi	r25, 0x04	; 4
    1030:	9f 93       	push	r25
    1032:	8f 93       	push	r24
    1034:	0e 94 c6 09 	call	0x138c	; 0x138c <sprintf>
		p_serial->send(debug);
    1038:	68 e2       	ldi	r22, 0x28	; 40
    103a:	74 e0       	ldi	r23, 0x04	; 4
    103c:	88 81       	ld	r24, Y
    103e:	99 81       	ldd	r25, Y+1	; 0x01
    1040:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
    1044:	8d b7       	in	r24, 0x3d	; 61
    1046:	9e b7       	in	r25, 0x3e	; 62
    1048:	0a 96       	adiw	r24, 0x0a	; 10
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	9e bf       	out	0x3e, r25	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	8d bf       	out	0x3d, r24	; 61
	}
	runs++;
    1054:	80 91 27 05 	lds	r24, 0x0527
    1058:	8f 5f       	subi	r24, 0xFF	; 255
    105a:	80 93 27 05 	sts	0x0527, r24
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	08 95       	ret

00001066 <_ZN6serial4initEv>:
 * 
 * Return:		bool - the status of the operation (true  = success,
 *													false = failure)
 ****************************************************************************/
void serial::init (void)
{
    1066:	fc 01       	movw	r30, r24
	/* calculate ubrr for desired baud rate */
	uint32_t ubrr = ((clk_speed / 16UL) / baud_rate) - 1;
    1068:	82 81       	ldd	r24, Z+2	; 0x02
    106a:	93 81       	ldd	r25, Z+3	; 0x03
    106c:	a4 81       	ldd	r26, Z+4	; 0x04
    106e:	b5 81       	ldd	r27, Z+5	; 0x05
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	68 94       	set
    1076:	13 f8       	bld	r1, 3
    1078:	96 95       	lsr	r25
    107a:	87 95       	ror	r24
    107c:	77 95       	ror	r23
    107e:	67 95       	ror	r22
    1080:	16 94       	lsr	r1
    1082:	d1 f7       	brne	.-12     	; 0x1078 <_ZN6serial4initEv+0x12>
    1084:	20 81       	ld	r18, Z
    1086:	31 81       	ldd	r19, Z+1	; 0x01
    1088:	40 e0       	ldi	r20, 0x00	; 0
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__udivmodsi4>
    1090:	ba 01       	movw	r22, r20
    1092:	a9 01       	movw	r20, r18
    1094:	41 50       	subi	r20, 0x01	; 1
    1096:	51 09       	sbc	r21, r1
    1098:	61 09       	sbc	r22, r1
    109a:	71 09       	sbc	r23, r1
	UBRR0H = (uint8_t)(ubrr >> 8);
    109c:	bb 27       	eor	r27, r27
    109e:	a7 2f       	mov	r26, r23
    10a0:	96 2f       	mov	r25, r22
    10a2:	85 2f       	mov	r24, r21
    10a4:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (uint8_t)ubrr;
    10a8:	40 93 c4 00 	sts	0x00C4, r20
	
	/* Enable receiver and transmitter */
	UCSR0B = ((1 << RXEN0) | (1 << TXEN0));
    10ac:	88 e1       	ldi	r24, 0x18	; 24
    10ae:	80 93 c1 00 	sts	0x00C1, r24
	
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = ((1 << USBS0) | (3 << UCSZ00));
    10b2:	8e e0       	ldi	r24, 0x0E	; 14
    10b4:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0A &= ~(1 << U2X0);
    10b8:	e0 ec       	ldi	r30, 0xC0	; 192
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8d 7f       	andi	r24, 0xFD	; 253
    10c0:	80 83       	st	Z, r24
    10c2:	08 95       	ret

000010c4 <_ZN6serialC1Ejm>:
 * Parameters:	baud - the baud rate to establish
 *				clk  - the clock speed of the device
 ****************************************************************************/
serial::serial (uint16_t baud, uint32_t clk)
{
	baud_rate = baud;		// store a local copy
    10c4:	fc 01       	movw	r30, r24
    10c6:	71 83       	std	Z+1, r23	; 0x01
    10c8:	60 83       	st	Z, r22
	clk_speed = clk;		// store a local copy
    10ca:	22 83       	std	Z+2, r18	; 0x02
    10cc:	33 83       	std	Z+3, r19	; 0x03
    10ce:	44 83       	std	Z+4, r20	; 0x04
    10d0:	55 83       	std	Z+5, r21	; 0x05
	
	init();
    10d2:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN6serial4initEv>
    10d6:	08 95       	ret

000010d8 <_ZN6serial4sendEh>:
bool serial::send (uint8_t data)
{
	uint16_t cnt = 0;
	
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1 << UDRE0)))// && cnt < SERIAL_TIMEOUT)
    10d8:	e0 ec       	ldi	r30, 0xC0	; 192
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	85 ff       	sbrs	r24, 5
    10e0:	fd cf       	rjmp	.-6      	; 0x10dc <_ZN6serial4sendEh+0x4>
		return false;
	}
	*/
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
    10e2:	60 93 c6 00 	sts	0x00C6, r22
	
	return true;
}
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	08 95       	ret

000010ea <_ZN6serial4sendEPc>:
 * 
 * Parameters:	str - the string of data to be sent, maximum 255 bytes
 * Return:		uint8_t - the total number of characters successfully sent
 ****************************************************************************/
uint8_t serial::send (char *str)
{
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	fb 01       	movw	r30, r22
	uint8_t sent = 0;
	
	while (*str && sent < SERIAL_MAX_SEND)
    10f6:	60 81       	ld	r22, Z
    10f8:	66 23       	and	r22, r22
    10fa:	99 f0       	breq	.+38     	; 0x1122 <_ZN6serial4sendEPc+0x38>
    10fc:	8f 01       	movw	r16, r30
    10fe:	7c 01       	movw	r14, r24
    1100:	0f 5f       	subi	r16, 0xFF	; 255
    1102:	1f 4f       	sbci	r17, 0xFF	; 255
    1104:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if (send(*str++))
    1106:	c7 01       	movw	r24, r14
    1108:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <_ZN6serial4sendEh>
    110c:	88 23       	and	r24, r24
    110e:	51 f0       	breq	.+20     	; 0x1124 <_ZN6serial4sendEPc+0x3a>
		{
			sent++;
    1110:	cf 5f       	subi	r28, 0xFF	; 255
 ****************************************************************************/
uint8_t serial::send (char *str)
{
	uint8_t sent = 0;
	
	while (*str && sent < SERIAL_MAX_SEND)
    1112:	f8 01       	movw	r30, r16
    1114:	61 91       	ld	r22, Z+
    1116:	8f 01       	movw	r16, r30
    1118:	66 23       	and	r22, r22
    111a:	21 f0       	breq	.+8      	; 0x1124 <_ZN6serial4sendEPc+0x3a>
    111c:	cf 3f       	cpi	r28, 0xFF	; 255
    111e:	99 f7       	brne	.-26     	; 0x1106 <_ZN6serial4sendEPc+0x1c>
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <_ZN6serial4sendEPc+0x3a>
 * Parameters:	str - the string of data to be sent, maximum 255 bytes
 * Return:		uint8_t - the total number of characters successfully sent
 ****************************************************************************/
uint8_t serial::send (char *str)
{
	uint8_t sent = 0;
    1122:	c0 e0       	ldi	r28, 0x00	; 0
			break;
		}
	}
	
	return sent;
}
    1124:	8c 2f       	mov	r24, r28
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	ff 90       	pop	r15
    112e:	ef 90       	pop	r14
    1130:	08 95       	ret

00001132 <_ZN8TiltBallC1EP6serialh>:

/*****************************************************************************
 * Method:		TiltBall
 * Description:	This constructor sets up the tiltBall sensor on the ATmega328P
 ****************************************************************************/
TiltBall::TiltBall (serial *ptr_serial, uint8_t p)
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	ec 01       	movw	r28, r24
{
	pin = p;					// store local copy of tilt ball pin
    1138:	4a 83       	std	Y+2, r20	; 0x02
	p_serial = ptr_serial;		// store local copy of serial for debug
    113a:	79 83       	std	Y+1, r23	; 0x01
    113c:	68 83       	st	Y, r22
	TILT_DDR &= ~(1 << pin);	// Make tilt ball an input
    113e:	8a b1       	in	r24, 0x0a	; 10
    1140:	21 e0       	ldi	r18, 0x01	; 1
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	02 c0       	rjmp	.+4      	; 0x114a <_ZN8TiltBallC1EP6serialh+0x18>
    1146:	22 0f       	add	r18, r18
    1148:	33 1f       	adc	r19, r19
    114a:	4a 95       	dec	r20
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <_ZN8TiltBallC1EP6serialh+0x14>
    114e:	20 95       	com	r18
    1150:	28 23       	and	r18, r24
    1152:	2a b9       	out	0x0a, r18	; 10
	
	sprintf(debug, "TiltBall Constructor OK!\r\n");
    1154:	8b e1       	ldi	r24, 0x1B	; 27
    1156:	ef ea       	ldi	r30, 0xAF	; 175
    1158:	f3 e0       	ldi	r31, 0x03	; 3
    115a:	a8 e2       	ldi	r26, 0x28	; 40
    115c:	b4 e0       	ldi	r27, 0x04	; 4
    115e:	01 90       	ld	r0, Z+
    1160:	0d 92       	st	X+, r0
    1162:	8a 95       	dec	r24
    1164:	e1 f7       	brne	.-8      	; 0x115e <_ZN8TiltBallC1EP6serialh+0x2c>
	p_serial->send(debug);
    1166:	68 e2       	ldi	r22, 0x28	; 40
    1168:	74 e0       	ldi	r23, 0x04	; 4
    116a:	88 81       	ld	r24, Y
    116c:	99 81       	ldd	r25, Y+1	; 0x01
    116e:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
}
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	08 95       	ret

00001178 <_ZN7UVIndex4initEv>:
	init();	
}

void UVIndex::init (void)
{
	ADCSRA = 0x87;	//Turn On ADC and set prescaler (CLK/128)
    1178:	87 e8       	ldi	r24, 0x87	; 135
    117a:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0x00;	//Set gain & turn off autotrigger
    117e:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x00;   //Set ADC channel ADC0 with 1X gain
    1182:	10 92 7c 00 	sts	0x007C, r1
    1186:	08 95       	ret

00001188 <_ZN7UVIndexC1EP6serialh>:
#include "UVIndex.h"
#include "shares.h"

UVIndex::UVIndex (serial *ptr_serial, uint8_t pin)
{
	p_serial = ptr_serial;
    1188:	fc 01       	movw	r30, r24
    118a:	71 83       	std	Z+1, r23	; 0x01
    118c:	60 83       	st	Z, r22
	enable_pin = pin;
    118e:	42 83       	std	Z+2, r20	; 0x02
	
	init();	
    1190:	0e 94 bc 08 	call	0x1178	; 0x1178 <_ZN7UVIndex4initEv>
    1194:	08 95       	ret

00001196 <_ZN7UVIndex6enableEv>:
}

void UVIndex::enable (void)
{
	// set enable pin high
	UV_EN_PORT |= (1 << enable_pin);
    1196:	6b b1       	in	r22, 0x0b	; 11
    1198:	21 e0       	ldi	r18, 0x01	; 1
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	a9 01       	movw	r20, r18
    119e:	fc 01       	movw	r30, r24
    11a0:	02 80       	ldd	r0, Z+2	; 0x02
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <_ZN7UVIndex6enableEv+0x12>
    11a4:	44 0f       	add	r20, r20
    11a6:	55 1f       	adc	r21, r21
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <_ZN7UVIndex6enableEv+0xe>
    11ac:	46 2b       	or	r20, r22
    11ae:	4b b9       	out	0x0b, r20	; 11
	OUTPUT(UV_EN_DDR, enable_pin);
    11b0:	4a b1       	in	r20, 0x0a	; 10
    11b2:	02 80       	ldd	r0, Z+2	; 0x02
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <_ZN7UVIndex6enableEv+0x24>
    11b6:	22 0f       	add	r18, r18
    11b8:	33 1f       	adc	r19, r19
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <_ZN7UVIndex6enableEv+0x20>
    11be:	24 2b       	or	r18, r20
    11c0:	2a b9       	out	0x0a, r18	; 10
    11c2:	08 95       	ret

000011c4 <_ZN7UVIndex7disableEv>:
}

void UVIndex::disable (void)
{
    11c4:	fc 01       	movw	r30, r24
	// set enable pin low
	UV_EN_PORT &= ~(1 << enable_pin);
    11c6:	4b b1       	in	r20, 0x0b	; 11
    11c8:	21 e0       	ldi	r18, 0x01	; 1
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	b9 01       	movw	r22, r18
    11ce:	02 80       	ldd	r0, Z+2	; 0x02
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <_ZN7UVIndex7disableEv+0x12>
    11d2:	66 0f       	add	r22, r22
    11d4:	77 1f       	adc	r23, r23
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <_ZN7UVIndex7disableEv+0xe>
    11da:	96 2f       	mov	r25, r22
    11dc:	90 95       	com	r25
    11de:	94 23       	and	r25, r20
    11e0:	9b b9       	out	0x0b, r25	; 11
	OUTPUT(UV_EN_DDR, enable_pin);
    11e2:	8a b1       	in	r24, 0x0a	; 10
    11e4:	02 80       	ldd	r0, Z+2	; 0x02
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <_ZN7UVIndex7disableEv+0x28>
    11e8:	22 0f       	add	r18, r18
    11ea:	33 1f       	adc	r19, r19
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <_ZN7UVIndex7disableEv+0x24>
    11f0:	28 2b       	or	r18, r24
    11f2:	2a b9       	out	0x0a, r18	; 10
    11f4:	08 95       	ret

000011f6 <_ZN7UVIndex4readEv>:
}

int16_t UVIndex::read (void)
{
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	ec 01       	movw	r28, r24
	int16_t value;
	
	enable();
    1200:	0e 94 cb 08 	call	0x1196	; 0x1196 <_ZN7UVIndex6enableEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1204:	8f e9       	ldi	r24, 0x9F	; 159
    1206:	9f e0       	ldi	r25, 0x0F	; 15
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	f1 f7       	brne	.-4      	; 0x1208 <_ZN7UVIndex4readEv+0x12>
    120c:	00 c0       	rjmp	.+0      	; 0x120e <_ZN7UVIndex4readEv+0x18>
    120e:	00 00       	nop
	
	// stabilization period
	_delay_ms(1);
	
	// start conversion
	ADCSRA = 0xC7;
    1210:	87 ec       	ldi	r24, 0xC7	; 199
    1212:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1216:	8f e0       	ldi	r24, 0x0F	; 15
    1218:	94 e0       	ldi	r25, 0x04	; 4
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <_ZN7UVIndex4readEv+0x24>
    121e:	00 c0       	rjmp	.+0      	; 0x1220 <_ZN7UVIndex4readEv+0x2a>
    1220:	00 00       	nop
	
	// wait for conversion to finish
	_delay_us(260);
	
	value = ADC & 0x3FF;
    1222:	00 91 78 00 	lds	r16, 0x0078
    1226:	10 91 79 00 	lds	r17, 0x0079
	
	disable();
    122a:	ce 01       	movw	r24, r28
    122c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZN7UVIndex7disableEv>
	
	return value;
}
    1230:	c8 01       	movw	r24, r16
    1232:	93 70       	andi	r25, 0x03	; 3
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	08 95       	ret

0000123e <_ZN7UVIndex11UVIndexTaskEv>:

void UVIndex::UVIndexTask (void)
{
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	9c 01       	movw	r18, r24
	static uint8_t runs  = 0;
	
	if ((runs % 4) == 0)
    1244:	90 91 28 05 	lds	r25, 0x0528
    1248:	93 70       	andi	r25, 0x03	; 3
    124a:	e1 f4       	brne	.+56     	; 0x1284 <_ZN7UVIndex11UVIndexTaskEv+0x46>
    124c:	e9 01       	movw	r28, r18
	{
		sprintf(debug, "UV Index reading: %d\r\n", read());
    124e:	c9 01       	movw	r24, r18
    1250:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <_ZN7UVIndex4readEv>
    1254:	9f 93       	push	r25
    1256:	8f 93       	push	r24
    1258:	81 e1       	ldi	r24, 0x11	; 17
    125a:	94 e0       	ldi	r25, 0x04	; 4
    125c:	9f 93       	push	r25
    125e:	8f 93       	push	r24
    1260:	88 e2       	ldi	r24, 0x28	; 40
    1262:	94 e0       	ldi	r25, 0x04	; 4
    1264:	9f 93       	push	r25
    1266:	8f 93       	push	r24
    1268:	0e 94 c6 09 	call	0x138c	; 0x138c <sprintf>
		p_serial->send(debug);
    126c:	68 e2       	ldi	r22, 0x28	; 40
    126e:	74 e0       	ldi	r23, 0x04	; 4
    1270:	88 81       	ld	r24, Y
    1272:	99 81       	ldd	r25, Y+1	; 0x01
    1274:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN6serial4sendEPc>
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
	}
	
	runs++;
    1284:	80 91 28 05 	lds	r24, 0x0528
    1288:	8f 5f       	subi	r24, 0xFF	; 255
    128a:	80 93 28 05 	sts	0x0528, r24
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	08 95       	ret

00001294 <__mulsi3>:
    1294:	db 01       	movw	r26, r22
    1296:	8f 93       	push	r24
    1298:	9f 93       	push	r25
    129a:	0e 94 90 09 	call	0x1320	; 0x1320 <__muluhisi3>
    129e:	bf 91       	pop	r27
    12a0:	af 91       	pop	r26
    12a2:	a2 9f       	mul	r26, r18
    12a4:	80 0d       	add	r24, r0
    12a6:	91 1d       	adc	r25, r1
    12a8:	a3 9f       	mul	r26, r19
    12aa:	90 0d       	add	r25, r0
    12ac:	b2 9f       	mul	r27, r18
    12ae:	90 0d       	add	r25, r0
    12b0:	11 24       	eor	r1, r1
    12b2:	08 95       	ret

000012b4 <__divmodhi4>:
    12b4:	97 fb       	bst	r25, 7
    12b6:	07 2e       	mov	r0, r23
    12b8:	16 f4       	brtc	.+4      	; 0x12be <__divmodhi4+0xa>
    12ba:	00 94       	com	r0
    12bc:	07 d0       	rcall	.+14     	; 0x12cc <__divmodhi4_neg1>
    12be:	77 fd       	sbrc	r23, 7
    12c0:	09 d0       	rcall	.+18     	; 0x12d4 <__divmodhi4_neg2>
    12c2:	0e 94 a3 09 	call	0x1346	; 0x1346 <__udivmodhi4>
    12c6:	07 fc       	sbrc	r0, 7
    12c8:	05 d0       	rcall	.+10     	; 0x12d4 <__divmodhi4_neg2>
    12ca:	3e f4       	brtc	.+14     	; 0x12da <__divmodhi4_exit>

000012cc <__divmodhi4_neg1>:
    12cc:	90 95       	com	r25
    12ce:	81 95       	neg	r24
    12d0:	9f 4f       	sbci	r25, 0xFF	; 255
    12d2:	08 95       	ret

000012d4 <__divmodhi4_neg2>:
    12d4:	70 95       	com	r23
    12d6:	61 95       	neg	r22
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255

000012da <__divmodhi4_exit>:
    12da:	08 95       	ret

000012dc <__udivmodsi4>:
    12dc:	a1 e2       	ldi	r26, 0x21	; 33
    12de:	1a 2e       	mov	r1, r26
    12e0:	aa 1b       	sub	r26, r26
    12e2:	bb 1b       	sub	r27, r27
    12e4:	fd 01       	movw	r30, r26
    12e6:	0d c0       	rjmp	.+26     	; 0x1302 <__udivmodsi4_ep>

000012e8 <__udivmodsi4_loop>:
    12e8:	aa 1f       	adc	r26, r26
    12ea:	bb 1f       	adc	r27, r27
    12ec:	ee 1f       	adc	r30, r30
    12ee:	ff 1f       	adc	r31, r31
    12f0:	a2 17       	cp	r26, r18
    12f2:	b3 07       	cpc	r27, r19
    12f4:	e4 07       	cpc	r30, r20
    12f6:	f5 07       	cpc	r31, r21
    12f8:	20 f0       	brcs	.+8      	; 0x1302 <__udivmodsi4_ep>
    12fa:	a2 1b       	sub	r26, r18
    12fc:	b3 0b       	sbc	r27, r19
    12fe:	e4 0b       	sbc	r30, r20
    1300:	f5 0b       	sbc	r31, r21

00001302 <__udivmodsi4_ep>:
    1302:	66 1f       	adc	r22, r22
    1304:	77 1f       	adc	r23, r23
    1306:	88 1f       	adc	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	1a 94       	dec	r1
    130c:	69 f7       	brne	.-38     	; 0x12e8 <__udivmodsi4_loop>
    130e:	60 95       	com	r22
    1310:	70 95       	com	r23
    1312:	80 95       	com	r24
    1314:	90 95       	com	r25
    1316:	9b 01       	movw	r18, r22
    1318:	ac 01       	movw	r20, r24
    131a:	bd 01       	movw	r22, r26
    131c:	cf 01       	movw	r24, r30
    131e:	08 95       	ret

00001320 <__muluhisi3>:
    1320:	0e 94 b7 09 	call	0x136e	; 0x136e <__umulhisi3>
    1324:	a5 9f       	mul	r26, r21
    1326:	90 0d       	add	r25, r0
    1328:	b4 9f       	mul	r27, r20
    132a:	90 0d       	add	r25, r0
    132c:	a4 9f       	mul	r26, r20
    132e:	80 0d       	add	r24, r0
    1330:	91 1d       	adc	r25, r1
    1332:	11 24       	eor	r1, r1
    1334:	08 95       	ret

00001336 <__mulshisi3>:
    1336:	b7 ff       	sbrs	r27, 7
    1338:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__muluhisi3>

0000133c <__mulohisi3>:
    133c:	0e 94 90 09 	call	0x1320	; 0x1320 <__muluhisi3>
    1340:	82 1b       	sub	r24, r18
    1342:	93 0b       	sbc	r25, r19
    1344:	08 95       	ret

00001346 <__udivmodhi4>:
    1346:	aa 1b       	sub	r26, r26
    1348:	bb 1b       	sub	r27, r27
    134a:	51 e1       	ldi	r21, 0x11	; 17
    134c:	07 c0       	rjmp	.+14     	; 0x135c <__udivmodhi4_ep>

0000134e <__udivmodhi4_loop>:
    134e:	aa 1f       	adc	r26, r26
    1350:	bb 1f       	adc	r27, r27
    1352:	a6 17       	cp	r26, r22
    1354:	b7 07       	cpc	r27, r23
    1356:	10 f0       	brcs	.+4      	; 0x135c <__udivmodhi4_ep>
    1358:	a6 1b       	sub	r26, r22
    135a:	b7 0b       	sbc	r27, r23

0000135c <__udivmodhi4_ep>:
    135c:	88 1f       	adc	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	5a 95       	dec	r21
    1362:	a9 f7       	brne	.-22     	; 0x134e <__udivmodhi4_loop>
    1364:	80 95       	com	r24
    1366:	90 95       	com	r25
    1368:	bc 01       	movw	r22, r24
    136a:	cd 01       	movw	r24, r26
    136c:	08 95       	ret

0000136e <__umulhisi3>:
    136e:	a2 9f       	mul	r26, r18
    1370:	b0 01       	movw	r22, r0
    1372:	b3 9f       	mul	r27, r19
    1374:	c0 01       	movw	r24, r0
    1376:	a3 9f       	mul	r26, r19
    1378:	70 0d       	add	r23, r0
    137a:	81 1d       	adc	r24, r1
    137c:	11 24       	eor	r1, r1
    137e:	91 1d       	adc	r25, r1
    1380:	b2 9f       	mul	r27, r18
    1382:	70 0d       	add	r23, r0
    1384:	81 1d       	adc	r24, r1
    1386:	11 24       	eor	r1, r1
    1388:	91 1d       	adc	r25, r1
    138a:	08 95       	ret

0000138c <sprintf>:
    138c:	ae e0       	ldi	r26, 0x0E	; 14
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	ec ec       	ldi	r30, 0xCC	; 204
    1392:	f9 e0       	ldi	r31, 0x09	; 9
    1394:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__prologue_saves__+0x1c>
    1398:	0d 89       	ldd	r16, Y+21	; 0x15
    139a:	1e 89       	ldd	r17, Y+22	; 0x16
    139c:	86 e0       	ldi	r24, 0x06	; 6
    139e:	8c 83       	std	Y+4, r24	; 0x04
    13a0:	1a 83       	std	Y+2, r17	; 0x02
    13a2:	09 83       	std	Y+1, r16	; 0x01
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	9f e7       	ldi	r25, 0x7F	; 127
    13a8:	9e 83       	std	Y+6, r25	; 0x06
    13aa:	8d 83       	std	Y+5, r24	; 0x05
    13ac:	ae 01       	movw	r20, r28
    13ae:	47 5e       	subi	r20, 0xE7	; 231
    13b0:	5f 4f       	sbci	r21, 0xFF	; 255
    13b2:	6f 89       	ldd	r22, Y+23	; 0x17
    13b4:	78 8d       	ldd	r23, Y+24	; 0x18
    13b6:	ce 01       	movw	r24, r28
    13b8:	01 96       	adiw	r24, 0x01	; 1
    13ba:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <vfprintf>
    13be:	2f 81       	ldd	r18, Y+7	; 0x07
    13c0:	38 85       	ldd	r19, Y+8	; 0x08
    13c2:	f8 01       	movw	r30, r16
    13c4:	e2 0f       	add	r30, r18
    13c6:	f3 1f       	adc	r31, r19
    13c8:	10 82       	st	Z, r1
    13ca:	2e 96       	adiw	r28, 0x0e	; 14
    13cc:	e4 e0       	ldi	r30, 0x04	; 4
    13ce:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__epilogue_restores__+0x1c>

000013d2 <vfprintf>:
    13d2:	ac e0       	ldi	r26, 0x0C	; 12
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	ef ee       	ldi	r30, 0xEF	; 239
    13d8:	f9 e0       	ldi	r31, 0x09	; 9
    13da:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__prologue_saves__>
    13de:	7c 01       	movw	r14, r24
    13e0:	6b 01       	movw	r12, r22
    13e2:	8a 01       	movw	r16, r20
    13e4:	fc 01       	movw	r30, r24
    13e6:	17 82       	std	Z+7, r1	; 0x07
    13e8:	16 82       	std	Z+6, r1	; 0x06
    13ea:	83 81       	ldd	r24, Z+3	; 0x03
    13ec:	81 ff       	sbrs	r24, 1
    13ee:	bd c1       	rjmp	.+890    	; 0x176a <vfprintf+0x398>
    13f0:	ce 01       	movw	r24, r28
    13f2:	01 96       	adiw	r24, 0x01	; 1
    13f4:	4c 01       	movw	r8, r24
    13f6:	f7 01       	movw	r30, r14
    13f8:	93 81       	ldd	r25, Z+3	; 0x03
    13fa:	f6 01       	movw	r30, r12
    13fc:	93 fd       	sbrc	r25, 3
    13fe:	85 91       	lpm	r24, Z+
    1400:	93 ff       	sbrs	r25, 3
    1402:	81 91       	ld	r24, Z+
    1404:	6f 01       	movw	r12, r30
    1406:	88 23       	and	r24, r24
    1408:	09 f4       	brne	.+2      	; 0x140c <vfprintf+0x3a>
    140a:	ab c1       	rjmp	.+854    	; 0x1762 <vfprintf+0x390>
    140c:	85 32       	cpi	r24, 0x25	; 37
    140e:	39 f4       	brne	.+14     	; 0x141e <vfprintf+0x4c>
    1410:	93 fd       	sbrc	r25, 3
    1412:	85 91       	lpm	r24, Z+
    1414:	93 ff       	sbrs	r25, 3
    1416:	81 91       	ld	r24, Z+
    1418:	6f 01       	movw	r12, r30
    141a:	85 32       	cpi	r24, 0x25	; 37
    141c:	29 f4       	brne	.+10     	; 0x1428 <vfprintf+0x56>
    141e:	b7 01       	movw	r22, r14
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <fputc>
    1426:	e7 cf       	rjmp	.-50     	; 0x13f6 <vfprintf+0x24>
    1428:	51 2c       	mov	r5, r1
    142a:	31 2c       	mov	r3, r1
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	20 32       	cpi	r18, 0x20	; 32
    1430:	a0 f4       	brcc	.+40     	; 0x145a <vfprintf+0x88>
    1432:	8b 32       	cpi	r24, 0x2B	; 43
    1434:	69 f0       	breq	.+26     	; 0x1450 <vfprintf+0x7e>
    1436:	30 f4       	brcc	.+12     	; 0x1444 <vfprintf+0x72>
    1438:	80 32       	cpi	r24, 0x20	; 32
    143a:	59 f0       	breq	.+22     	; 0x1452 <vfprintf+0x80>
    143c:	83 32       	cpi	r24, 0x23	; 35
    143e:	69 f4       	brne	.+26     	; 0x145a <vfprintf+0x88>
    1440:	20 61       	ori	r18, 0x10	; 16
    1442:	2c c0       	rjmp	.+88     	; 0x149c <vfprintf+0xca>
    1444:	8d 32       	cpi	r24, 0x2D	; 45
    1446:	39 f0       	breq	.+14     	; 0x1456 <vfprintf+0x84>
    1448:	80 33       	cpi	r24, 0x30	; 48
    144a:	39 f4       	brne	.+14     	; 0x145a <vfprintf+0x88>
    144c:	21 60       	ori	r18, 0x01	; 1
    144e:	26 c0       	rjmp	.+76     	; 0x149c <vfprintf+0xca>
    1450:	22 60       	ori	r18, 0x02	; 2
    1452:	24 60       	ori	r18, 0x04	; 4
    1454:	23 c0       	rjmp	.+70     	; 0x149c <vfprintf+0xca>
    1456:	28 60       	ori	r18, 0x08	; 8
    1458:	21 c0       	rjmp	.+66     	; 0x149c <vfprintf+0xca>
    145a:	27 fd       	sbrc	r18, 7
    145c:	27 c0       	rjmp	.+78     	; 0x14ac <vfprintf+0xda>
    145e:	30 ed       	ldi	r19, 0xD0	; 208
    1460:	38 0f       	add	r19, r24
    1462:	3a 30       	cpi	r19, 0x0A	; 10
    1464:	78 f4       	brcc	.+30     	; 0x1484 <vfprintf+0xb2>
    1466:	26 ff       	sbrs	r18, 6
    1468:	06 c0       	rjmp	.+12     	; 0x1476 <vfprintf+0xa4>
    146a:	fa e0       	ldi	r31, 0x0A	; 10
    146c:	5f 9e       	mul	r5, r31
    146e:	30 0d       	add	r19, r0
    1470:	11 24       	eor	r1, r1
    1472:	53 2e       	mov	r5, r19
    1474:	13 c0       	rjmp	.+38     	; 0x149c <vfprintf+0xca>
    1476:	8a e0       	ldi	r24, 0x0A	; 10
    1478:	38 9e       	mul	r3, r24
    147a:	30 0d       	add	r19, r0
    147c:	11 24       	eor	r1, r1
    147e:	33 2e       	mov	r3, r19
    1480:	20 62       	ori	r18, 0x20	; 32
    1482:	0c c0       	rjmp	.+24     	; 0x149c <vfprintf+0xca>
    1484:	8e 32       	cpi	r24, 0x2E	; 46
    1486:	21 f4       	brne	.+8      	; 0x1490 <vfprintf+0xbe>
    1488:	26 fd       	sbrc	r18, 6
    148a:	6b c1       	rjmp	.+726    	; 0x1762 <vfprintf+0x390>
    148c:	20 64       	ori	r18, 0x40	; 64
    148e:	06 c0       	rjmp	.+12     	; 0x149c <vfprintf+0xca>
    1490:	8c 36       	cpi	r24, 0x6C	; 108
    1492:	11 f4       	brne	.+4      	; 0x1498 <vfprintf+0xc6>
    1494:	20 68       	ori	r18, 0x80	; 128
    1496:	02 c0       	rjmp	.+4      	; 0x149c <vfprintf+0xca>
    1498:	88 36       	cpi	r24, 0x68	; 104
    149a:	41 f4       	brne	.+16     	; 0x14ac <vfprintf+0xda>
    149c:	f6 01       	movw	r30, r12
    149e:	93 fd       	sbrc	r25, 3
    14a0:	85 91       	lpm	r24, Z+
    14a2:	93 ff       	sbrs	r25, 3
    14a4:	81 91       	ld	r24, Z+
    14a6:	6f 01       	movw	r12, r30
    14a8:	81 11       	cpse	r24, r1
    14aa:	c1 cf       	rjmp	.-126    	; 0x142e <vfprintf+0x5c>
    14ac:	98 2f       	mov	r25, r24
    14ae:	9f 7d       	andi	r25, 0xDF	; 223
    14b0:	95 54       	subi	r25, 0x45	; 69
    14b2:	93 30       	cpi	r25, 0x03	; 3
    14b4:	28 f4       	brcc	.+10     	; 0x14c0 <vfprintf+0xee>
    14b6:	0c 5f       	subi	r16, 0xFC	; 252
    14b8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ba:	ff e3       	ldi	r31, 0x3F	; 63
    14bc:	f9 83       	std	Y+1, r31	; 0x01
    14be:	0d c0       	rjmp	.+26     	; 0x14da <vfprintf+0x108>
    14c0:	83 36       	cpi	r24, 0x63	; 99
    14c2:	31 f0       	breq	.+12     	; 0x14d0 <vfprintf+0xfe>
    14c4:	83 37       	cpi	r24, 0x73	; 115
    14c6:	71 f0       	breq	.+28     	; 0x14e4 <vfprintf+0x112>
    14c8:	83 35       	cpi	r24, 0x53	; 83
    14ca:	09 f0       	breq	.+2      	; 0x14ce <vfprintf+0xfc>
    14cc:	5b c0       	rjmp	.+182    	; 0x1584 <vfprintf+0x1b2>
    14ce:	22 c0       	rjmp	.+68     	; 0x1514 <vfprintf+0x142>
    14d0:	f8 01       	movw	r30, r16
    14d2:	80 81       	ld	r24, Z
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	0e 5f       	subi	r16, 0xFE	; 254
    14d8:	1f 4f       	sbci	r17, 0xFF	; 255
    14da:	44 24       	eor	r4, r4
    14dc:	43 94       	inc	r4
    14de:	51 2c       	mov	r5, r1
    14e0:	54 01       	movw	r10, r8
    14e2:	15 c0       	rjmp	.+42     	; 0x150e <vfprintf+0x13c>
    14e4:	38 01       	movw	r6, r16
    14e6:	f2 e0       	ldi	r31, 0x02	; 2
    14e8:	6f 0e       	add	r6, r31
    14ea:	71 1c       	adc	r7, r1
    14ec:	f8 01       	movw	r30, r16
    14ee:	a0 80       	ld	r10, Z
    14f0:	b1 80       	ldd	r11, Z+1	; 0x01
    14f2:	26 ff       	sbrs	r18, 6
    14f4:	03 c0       	rjmp	.+6      	; 0x14fc <vfprintf+0x12a>
    14f6:	65 2d       	mov	r22, r5
    14f8:	70 e0       	ldi	r23, 0x00	; 0
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <vfprintf+0x12e>
    14fc:	6f ef       	ldi	r22, 0xFF	; 255
    14fe:	7f ef       	ldi	r23, 0xFF	; 255
    1500:	c5 01       	movw	r24, r10
    1502:	2c 87       	std	Y+12, r18	; 0x0c
    1504:	0e 94 c6 0b 	call	0x178c	; 0x178c <strnlen>
    1508:	2c 01       	movw	r4, r24
    150a:	83 01       	movw	r16, r6
    150c:	2c 85       	ldd	r18, Y+12	; 0x0c
    150e:	2f 77       	andi	r18, 0x7F	; 127
    1510:	22 2e       	mov	r2, r18
    1512:	17 c0       	rjmp	.+46     	; 0x1542 <vfprintf+0x170>
    1514:	38 01       	movw	r6, r16
    1516:	f2 e0       	ldi	r31, 0x02	; 2
    1518:	6f 0e       	add	r6, r31
    151a:	71 1c       	adc	r7, r1
    151c:	f8 01       	movw	r30, r16
    151e:	a0 80       	ld	r10, Z
    1520:	b1 80       	ldd	r11, Z+1	; 0x01
    1522:	26 ff       	sbrs	r18, 6
    1524:	03 c0       	rjmp	.+6      	; 0x152c <vfprintf+0x15a>
    1526:	65 2d       	mov	r22, r5
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <vfprintf+0x15e>
    152c:	6f ef       	ldi	r22, 0xFF	; 255
    152e:	7f ef       	ldi	r23, 0xFF	; 255
    1530:	c5 01       	movw	r24, r10
    1532:	2c 87       	std	Y+12, r18	; 0x0c
    1534:	0e 94 bb 0b 	call	0x1776	; 0x1776 <strnlen_P>
    1538:	2c 01       	movw	r4, r24
    153a:	2c 85       	ldd	r18, Y+12	; 0x0c
    153c:	20 68       	ori	r18, 0x80	; 128
    153e:	22 2e       	mov	r2, r18
    1540:	83 01       	movw	r16, r6
    1542:	23 fc       	sbrc	r2, 3
    1544:	1b c0       	rjmp	.+54     	; 0x157c <vfprintf+0x1aa>
    1546:	83 2d       	mov	r24, r3
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	48 16       	cp	r4, r24
    154c:	59 06       	cpc	r5, r25
    154e:	b0 f4       	brcc	.+44     	; 0x157c <vfprintf+0x1aa>
    1550:	b7 01       	movw	r22, r14
    1552:	80 e2       	ldi	r24, 0x20	; 32
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <fputc>
    155a:	3a 94       	dec	r3
    155c:	f4 cf       	rjmp	.-24     	; 0x1546 <vfprintf+0x174>
    155e:	f5 01       	movw	r30, r10
    1560:	27 fc       	sbrc	r2, 7
    1562:	85 91       	lpm	r24, Z+
    1564:	27 fe       	sbrs	r2, 7
    1566:	81 91       	ld	r24, Z+
    1568:	5f 01       	movw	r10, r30
    156a:	b7 01       	movw	r22, r14
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <fputc>
    1572:	31 10       	cpse	r3, r1
    1574:	3a 94       	dec	r3
    1576:	f1 e0       	ldi	r31, 0x01	; 1
    1578:	4f 1a       	sub	r4, r31
    157a:	51 08       	sbc	r5, r1
    157c:	41 14       	cp	r4, r1
    157e:	51 04       	cpc	r5, r1
    1580:	71 f7       	brne	.-36     	; 0x155e <vfprintf+0x18c>
    1582:	e5 c0       	rjmp	.+458    	; 0x174e <vfprintf+0x37c>
    1584:	84 36       	cpi	r24, 0x64	; 100
    1586:	11 f0       	breq	.+4      	; 0x158c <vfprintf+0x1ba>
    1588:	89 36       	cpi	r24, 0x69	; 105
    158a:	39 f5       	brne	.+78     	; 0x15da <vfprintf+0x208>
    158c:	f8 01       	movw	r30, r16
    158e:	27 ff       	sbrs	r18, 7
    1590:	07 c0       	rjmp	.+14     	; 0x15a0 <vfprintf+0x1ce>
    1592:	60 81       	ld	r22, Z
    1594:	71 81       	ldd	r23, Z+1	; 0x01
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	93 81       	ldd	r25, Z+3	; 0x03
    159a:	0c 5f       	subi	r16, 0xFC	; 252
    159c:	1f 4f       	sbci	r17, 0xFF	; 255
    159e:	08 c0       	rjmp	.+16     	; 0x15b0 <vfprintf+0x1de>
    15a0:	60 81       	ld	r22, Z
    15a2:	71 81       	ldd	r23, Z+1	; 0x01
    15a4:	07 2e       	mov	r0, r23
    15a6:	00 0c       	add	r0, r0
    15a8:	88 0b       	sbc	r24, r24
    15aa:	99 0b       	sbc	r25, r25
    15ac:	0e 5f       	subi	r16, 0xFE	; 254
    15ae:	1f 4f       	sbci	r17, 0xFF	; 255
    15b0:	2f 76       	andi	r18, 0x6F	; 111
    15b2:	72 2e       	mov	r7, r18
    15b4:	97 ff       	sbrs	r25, 7
    15b6:	09 c0       	rjmp	.+18     	; 0x15ca <vfprintf+0x1f8>
    15b8:	90 95       	com	r25
    15ba:	80 95       	com	r24
    15bc:	70 95       	com	r23
    15be:	61 95       	neg	r22
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	8f 4f       	sbci	r24, 0xFF	; 255
    15c4:	9f 4f       	sbci	r25, 0xFF	; 255
    15c6:	20 68       	ori	r18, 0x80	; 128
    15c8:	72 2e       	mov	r7, r18
    15ca:	2a e0       	ldi	r18, 0x0A	; 10
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	a4 01       	movw	r20, r8
    15d0:	0e 94 09 0c 	call	0x1812	; 0x1812 <__ultoa_invert>
    15d4:	a8 2e       	mov	r10, r24
    15d6:	a8 18       	sub	r10, r8
    15d8:	44 c0       	rjmp	.+136    	; 0x1662 <vfprintf+0x290>
    15da:	85 37       	cpi	r24, 0x75	; 117
    15dc:	29 f4       	brne	.+10     	; 0x15e8 <vfprintf+0x216>
    15de:	2f 7e       	andi	r18, 0xEF	; 239
    15e0:	b2 2e       	mov	r11, r18
    15e2:	2a e0       	ldi	r18, 0x0A	; 10
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	25 c0       	rjmp	.+74     	; 0x1632 <vfprintf+0x260>
    15e8:	f2 2f       	mov	r31, r18
    15ea:	f9 7f       	andi	r31, 0xF9	; 249
    15ec:	bf 2e       	mov	r11, r31
    15ee:	8f 36       	cpi	r24, 0x6F	; 111
    15f0:	c1 f0       	breq	.+48     	; 0x1622 <vfprintf+0x250>
    15f2:	18 f4       	brcc	.+6      	; 0x15fa <vfprintf+0x228>
    15f4:	88 35       	cpi	r24, 0x58	; 88
    15f6:	79 f0       	breq	.+30     	; 0x1616 <vfprintf+0x244>
    15f8:	b4 c0       	rjmp	.+360    	; 0x1762 <vfprintf+0x390>
    15fa:	80 37       	cpi	r24, 0x70	; 112
    15fc:	19 f0       	breq	.+6      	; 0x1604 <vfprintf+0x232>
    15fe:	88 37       	cpi	r24, 0x78	; 120
    1600:	21 f0       	breq	.+8      	; 0x160a <vfprintf+0x238>
    1602:	af c0       	rjmp	.+350    	; 0x1762 <vfprintf+0x390>
    1604:	2f 2f       	mov	r18, r31
    1606:	20 61       	ori	r18, 0x10	; 16
    1608:	b2 2e       	mov	r11, r18
    160a:	b4 fe       	sbrs	r11, 4
    160c:	0d c0       	rjmp	.+26     	; 0x1628 <vfprintf+0x256>
    160e:	8b 2d       	mov	r24, r11
    1610:	84 60       	ori	r24, 0x04	; 4
    1612:	b8 2e       	mov	r11, r24
    1614:	09 c0       	rjmp	.+18     	; 0x1628 <vfprintf+0x256>
    1616:	24 ff       	sbrs	r18, 4
    1618:	0a c0       	rjmp	.+20     	; 0x162e <vfprintf+0x25c>
    161a:	9f 2f       	mov	r25, r31
    161c:	96 60       	ori	r25, 0x06	; 6
    161e:	b9 2e       	mov	r11, r25
    1620:	06 c0       	rjmp	.+12     	; 0x162e <vfprintf+0x25c>
    1622:	28 e0       	ldi	r18, 0x08	; 8
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	05 c0       	rjmp	.+10     	; 0x1632 <vfprintf+0x260>
    1628:	20 e1       	ldi	r18, 0x10	; 16
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <vfprintf+0x260>
    162e:	20 e1       	ldi	r18, 0x10	; 16
    1630:	32 e0       	ldi	r19, 0x02	; 2
    1632:	f8 01       	movw	r30, r16
    1634:	b7 fe       	sbrs	r11, 7
    1636:	07 c0       	rjmp	.+14     	; 0x1646 <vfprintf+0x274>
    1638:	60 81       	ld	r22, Z
    163a:	71 81       	ldd	r23, Z+1	; 0x01
    163c:	82 81       	ldd	r24, Z+2	; 0x02
    163e:	93 81       	ldd	r25, Z+3	; 0x03
    1640:	0c 5f       	subi	r16, 0xFC	; 252
    1642:	1f 4f       	sbci	r17, 0xFF	; 255
    1644:	06 c0       	rjmp	.+12     	; 0x1652 <vfprintf+0x280>
    1646:	60 81       	ld	r22, Z
    1648:	71 81       	ldd	r23, Z+1	; 0x01
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	0e 5f       	subi	r16, 0xFE	; 254
    1650:	1f 4f       	sbci	r17, 0xFF	; 255
    1652:	a4 01       	movw	r20, r8
    1654:	0e 94 09 0c 	call	0x1812	; 0x1812 <__ultoa_invert>
    1658:	a8 2e       	mov	r10, r24
    165a:	a8 18       	sub	r10, r8
    165c:	fb 2d       	mov	r31, r11
    165e:	ff 77       	andi	r31, 0x7F	; 127
    1660:	7f 2e       	mov	r7, r31
    1662:	76 fe       	sbrs	r7, 6
    1664:	0b c0       	rjmp	.+22     	; 0x167c <vfprintf+0x2aa>
    1666:	37 2d       	mov	r19, r7
    1668:	3e 7f       	andi	r19, 0xFE	; 254
    166a:	a5 14       	cp	r10, r5
    166c:	50 f4       	brcc	.+20     	; 0x1682 <vfprintf+0x2b0>
    166e:	74 fe       	sbrs	r7, 4
    1670:	0a c0       	rjmp	.+20     	; 0x1686 <vfprintf+0x2b4>
    1672:	72 fc       	sbrc	r7, 2
    1674:	08 c0       	rjmp	.+16     	; 0x1686 <vfprintf+0x2b4>
    1676:	37 2d       	mov	r19, r7
    1678:	3e 7e       	andi	r19, 0xEE	; 238
    167a:	05 c0       	rjmp	.+10     	; 0x1686 <vfprintf+0x2b4>
    167c:	ba 2c       	mov	r11, r10
    167e:	37 2d       	mov	r19, r7
    1680:	03 c0       	rjmp	.+6      	; 0x1688 <vfprintf+0x2b6>
    1682:	ba 2c       	mov	r11, r10
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <vfprintf+0x2b6>
    1686:	b5 2c       	mov	r11, r5
    1688:	34 ff       	sbrs	r19, 4
    168a:	0d c0       	rjmp	.+26     	; 0x16a6 <vfprintf+0x2d4>
    168c:	fe 01       	movw	r30, r28
    168e:	ea 0d       	add	r30, r10
    1690:	f1 1d       	adc	r31, r1
    1692:	80 81       	ld	r24, Z
    1694:	80 33       	cpi	r24, 0x30	; 48
    1696:	11 f4       	brne	.+4      	; 0x169c <vfprintf+0x2ca>
    1698:	39 7e       	andi	r19, 0xE9	; 233
    169a:	09 c0       	rjmp	.+18     	; 0x16ae <vfprintf+0x2dc>
    169c:	32 ff       	sbrs	r19, 2
    169e:	06 c0       	rjmp	.+12     	; 0x16ac <vfprintf+0x2da>
    16a0:	b3 94       	inc	r11
    16a2:	b3 94       	inc	r11
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <vfprintf+0x2dc>
    16a6:	83 2f       	mov	r24, r19
    16a8:	86 78       	andi	r24, 0x86	; 134
    16aa:	09 f0       	breq	.+2      	; 0x16ae <vfprintf+0x2dc>
    16ac:	b3 94       	inc	r11
    16ae:	33 fd       	sbrc	r19, 3
    16b0:	13 c0       	rjmp	.+38     	; 0x16d8 <vfprintf+0x306>
    16b2:	30 ff       	sbrs	r19, 0
    16b4:	06 c0       	rjmp	.+12     	; 0x16c2 <vfprintf+0x2f0>
    16b6:	5a 2c       	mov	r5, r10
    16b8:	b3 14       	cp	r11, r3
    16ba:	18 f4       	brcc	.+6      	; 0x16c2 <vfprintf+0x2f0>
    16bc:	53 0c       	add	r5, r3
    16be:	5b 18       	sub	r5, r11
    16c0:	b3 2c       	mov	r11, r3
    16c2:	b3 14       	cp	r11, r3
    16c4:	68 f4       	brcc	.+26     	; 0x16e0 <vfprintf+0x30e>
    16c6:	b7 01       	movw	r22, r14
    16c8:	80 e2       	ldi	r24, 0x20	; 32
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	3c 87       	std	Y+12, r19	; 0x0c
    16ce:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <fputc>
    16d2:	b3 94       	inc	r11
    16d4:	3c 85       	ldd	r19, Y+12	; 0x0c
    16d6:	f5 cf       	rjmp	.-22     	; 0x16c2 <vfprintf+0x2f0>
    16d8:	b3 14       	cp	r11, r3
    16da:	10 f4       	brcc	.+4      	; 0x16e0 <vfprintf+0x30e>
    16dc:	3b 18       	sub	r3, r11
    16de:	01 c0       	rjmp	.+2      	; 0x16e2 <vfprintf+0x310>
    16e0:	31 2c       	mov	r3, r1
    16e2:	34 ff       	sbrs	r19, 4
    16e4:	12 c0       	rjmp	.+36     	; 0x170a <vfprintf+0x338>
    16e6:	b7 01       	movw	r22, r14
    16e8:	80 e3       	ldi	r24, 0x30	; 48
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	3c 87       	std	Y+12, r19	; 0x0c
    16ee:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <fputc>
    16f2:	3c 85       	ldd	r19, Y+12	; 0x0c
    16f4:	32 ff       	sbrs	r19, 2
    16f6:	17 c0       	rjmp	.+46     	; 0x1726 <vfprintf+0x354>
    16f8:	31 fd       	sbrc	r19, 1
    16fa:	03 c0       	rjmp	.+6      	; 0x1702 <vfprintf+0x330>
    16fc:	88 e7       	ldi	r24, 0x78	; 120
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <vfprintf+0x334>
    1702:	88 e5       	ldi	r24, 0x58	; 88
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	b7 01       	movw	r22, r14
    1708:	0c c0       	rjmp	.+24     	; 0x1722 <vfprintf+0x350>
    170a:	83 2f       	mov	r24, r19
    170c:	86 78       	andi	r24, 0x86	; 134
    170e:	59 f0       	breq	.+22     	; 0x1726 <vfprintf+0x354>
    1710:	31 ff       	sbrs	r19, 1
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <vfprintf+0x346>
    1714:	8b e2       	ldi	r24, 0x2B	; 43
    1716:	01 c0       	rjmp	.+2      	; 0x171a <vfprintf+0x348>
    1718:	80 e2       	ldi	r24, 0x20	; 32
    171a:	37 fd       	sbrc	r19, 7
    171c:	8d e2       	ldi	r24, 0x2D	; 45
    171e:	b7 01       	movw	r22, r14
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <fputc>
    1726:	a5 14       	cp	r10, r5
    1728:	38 f4       	brcc	.+14     	; 0x1738 <vfprintf+0x366>
    172a:	b7 01       	movw	r22, r14
    172c:	80 e3       	ldi	r24, 0x30	; 48
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <fputc>
    1734:	5a 94       	dec	r5
    1736:	f7 cf       	rjmp	.-18     	; 0x1726 <vfprintf+0x354>
    1738:	aa 94       	dec	r10
    173a:	f4 01       	movw	r30, r8
    173c:	ea 0d       	add	r30, r10
    173e:	f1 1d       	adc	r31, r1
    1740:	80 81       	ld	r24, Z
    1742:	b7 01       	movw	r22, r14
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <fputc>
    174a:	a1 10       	cpse	r10, r1
    174c:	f5 cf       	rjmp	.-22     	; 0x1738 <vfprintf+0x366>
    174e:	33 20       	and	r3, r3
    1750:	09 f4       	brne	.+2      	; 0x1754 <vfprintf+0x382>
    1752:	51 ce       	rjmp	.-862    	; 0x13f6 <vfprintf+0x24>
    1754:	b7 01       	movw	r22, r14
    1756:	80 e2       	ldi	r24, 0x20	; 32
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <fputc>
    175e:	3a 94       	dec	r3
    1760:	f6 cf       	rjmp	.-20     	; 0x174e <vfprintf+0x37c>
    1762:	f7 01       	movw	r30, r14
    1764:	86 81       	ldd	r24, Z+6	; 0x06
    1766:	97 81       	ldd	r25, Z+7	; 0x07
    1768:	02 c0       	rjmp	.+4      	; 0x176e <vfprintf+0x39c>
    176a:	8f ef       	ldi	r24, 0xFF	; 255
    176c:	9f ef       	ldi	r25, 0xFF	; 255
    176e:	2c 96       	adiw	r28, 0x0c	; 12
    1770:	e2 e1       	ldi	r30, 0x12	; 18
    1772:	0c 94 83 0c 	jmp	0x1906	; 0x1906 <__epilogue_restores__>

00001776 <strnlen_P>:
    1776:	fc 01       	movw	r30, r24
    1778:	05 90       	lpm	r0, Z+
    177a:	61 50       	subi	r22, 0x01	; 1
    177c:	70 40       	sbci	r23, 0x00	; 0
    177e:	01 10       	cpse	r0, r1
    1780:	d8 f7       	brcc	.-10     	; 0x1778 <strnlen_P+0x2>
    1782:	80 95       	com	r24
    1784:	90 95       	com	r25
    1786:	8e 0f       	add	r24, r30
    1788:	9f 1f       	adc	r25, r31
    178a:	08 95       	ret

0000178c <strnlen>:
    178c:	fc 01       	movw	r30, r24
    178e:	61 50       	subi	r22, 0x01	; 1
    1790:	70 40       	sbci	r23, 0x00	; 0
    1792:	01 90       	ld	r0, Z+
    1794:	01 10       	cpse	r0, r1
    1796:	d8 f7       	brcc	.-10     	; 0x178e <strnlen+0x2>
    1798:	80 95       	com	r24
    179a:	90 95       	com	r25
    179c:	8e 0f       	add	r24, r30
    179e:	9f 1f       	adc	r25, r31
    17a0:	08 95       	ret

000017a2 <fputc>:
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	fb 01       	movw	r30, r22
    17ac:	23 81       	ldd	r18, Z+3	; 0x03
    17ae:	21 fd       	sbrc	r18, 1
    17b0:	03 c0       	rjmp	.+6      	; 0x17b8 <fputc+0x16>
    17b2:	8f ef       	ldi	r24, 0xFF	; 255
    17b4:	9f ef       	ldi	r25, 0xFF	; 255
    17b6:	28 c0       	rjmp	.+80     	; 0x1808 <fputc+0x66>
    17b8:	22 ff       	sbrs	r18, 2
    17ba:	16 c0       	rjmp	.+44     	; 0x17e8 <fputc+0x46>
    17bc:	46 81       	ldd	r20, Z+6	; 0x06
    17be:	57 81       	ldd	r21, Z+7	; 0x07
    17c0:	24 81       	ldd	r18, Z+4	; 0x04
    17c2:	35 81       	ldd	r19, Z+5	; 0x05
    17c4:	42 17       	cp	r20, r18
    17c6:	53 07       	cpc	r21, r19
    17c8:	44 f4       	brge	.+16     	; 0x17da <fputc+0x38>
    17ca:	a0 81       	ld	r26, Z
    17cc:	b1 81       	ldd	r27, Z+1	; 0x01
    17ce:	9d 01       	movw	r18, r26
    17d0:	2f 5f       	subi	r18, 0xFF	; 255
    17d2:	3f 4f       	sbci	r19, 0xFF	; 255
    17d4:	31 83       	std	Z+1, r19	; 0x01
    17d6:	20 83       	st	Z, r18
    17d8:	8c 93       	st	X, r24
    17da:	26 81       	ldd	r18, Z+6	; 0x06
    17dc:	37 81       	ldd	r19, Z+7	; 0x07
    17de:	2f 5f       	subi	r18, 0xFF	; 255
    17e0:	3f 4f       	sbci	r19, 0xFF	; 255
    17e2:	37 83       	std	Z+7, r19	; 0x07
    17e4:	26 83       	std	Z+6, r18	; 0x06
    17e6:	10 c0       	rjmp	.+32     	; 0x1808 <fputc+0x66>
    17e8:	eb 01       	movw	r28, r22
    17ea:	09 2f       	mov	r16, r25
    17ec:	18 2f       	mov	r17, r24
    17ee:	00 84       	ldd	r0, Z+8	; 0x08
    17f0:	f1 85       	ldd	r31, Z+9	; 0x09
    17f2:	e0 2d       	mov	r30, r0
    17f4:	09 95       	icall
    17f6:	89 2b       	or	r24, r25
    17f8:	e1 f6       	brne	.-72     	; 0x17b2 <fputc+0x10>
    17fa:	8e 81       	ldd	r24, Y+6	; 0x06
    17fc:	9f 81       	ldd	r25, Y+7	; 0x07
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	9f 83       	std	Y+7, r25	; 0x07
    1802:	8e 83       	std	Y+6, r24	; 0x06
    1804:	81 2f       	mov	r24, r17
    1806:	90 2f       	mov	r25, r16
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	08 95       	ret

00001812 <__ultoa_invert>:
    1812:	fa 01       	movw	r30, r20
    1814:	aa 27       	eor	r26, r26
    1816:	28 30       	cpi	r18, 0x08	; 8
    1818:	51 f1       	breq	.+84     	; 0x186e <__ultoa_invert+0x5c>
    181a:	20 31       	cpi	r18, 0x10	; 16
    181c:	81 f1       	breq	.+96     	; 0x187e <__ultoa_invert+0x6c>
    181e:	e8 94       	clt
    1820:	6f 93       	push	r22
    1822:	6e 7f       	andi	r22, 0xFE	; 254
    1824:	6e 5f       	subi	r22, 0xFE	; 254
    1826:	7f 4f       	sbci	r23, 0xFF	; 255
    1828:	8f 4f       	sbci	r24, 0xFF	; 255
    182a:	9f 4f       	sbci	r25, 0xFF	; 255
    182c:	af 4f       	sbci	r26, 0xFF	; 255
    182e:	b1 e0       	ldi	r27, 0x01	; 1
    1830:	3e d0       	rcall	.+124    	; 0x18ae <__ultoa_invert+0x9c>
    1832:	b4 e0       	ldi	r27, 0x04	; 4
    1834:	3c d0       	rcall	.+120    	; 0x18ae <__ultoa_invert+0x9c>
    1836:	67 0f       	add	r22, r23
    1838:	78 1f       	adc	r23, r24
    183a:	89 1f       	adc	r24, r25
    183c:	9a 1f       	adc	r25, r26
    183e:	a1 1d       	adc	r26, r1
    1840:	68 0f       	add	r22, r24
    1842:	79 1f       	adc	r23, r25
    1844:	8a 1f       	adc	r24, r26
    1846:	91 1d       	adc	r25, r1
    1848:	a1 1d       	adc	r26, r1
    184a:	6a 0f       	add	r22, r26
    184c:	71 1d       	adc	r23, r1
    184e:	81 1d       	adc	r24, r1
    1850:	91 1d       	adc	r25, r1
    1852:	a1 1d       	adc	r26, r1
    1854:	20 d0       	rcall	.+64     	; 0x1896 <__ultoa_invert+0x84>
    1856:	09 f4       	brne	.+2      	; 0x185a <__ultoa_invert+0x48>
    1858:	68 94       	set
    185a:	3f 91       	pop	r19
    185c:	2a e0       	ldi	r18, 0x0A	; 10
    185e:	26 9f       	mul	r18, r22
    1860:	11 24       	eor	r1, r1
    1862:	30 19       	sub	r19, r0
    1864:	30 5d       	subi	r19, 0xD0	; 208
    1866:	31 93       	st	Z+, r19
    1868:	de f6       	brtc	.-74     	; 0x1820 <__ultoa_invert+0xe>
    186a:	cf 01       	movw	r24, r30
    186c:	08 95       	ret
    186e:	46 2f       	mov	r20, r22
    1870:	47 70       	andi	r20, 0x07	; 7
    1872:	40 5d       	subi	r20, 0xD0	; 208
    1874:	41 93       	st	Z+, r20
    1876:	b3 e0       	ldi	r27, 0x03	; 3
    1878:	0f d0       	rcall	.+30     	; 0x1898 <__ultoa_invert+0x86>
    187a:	c9 f7       	brne	.-14     	; 0x186e <__ultoa_invert+0x5c>
    187c:	f6 cf       	rjmp	.-20     	; 0x186a <__ultoa_invert+0x58>
    187e:	46 2f       	mov	r20, r22
    1880:	4f 70       	andi	r20, 0x0F	; 15
    1882:	40 5d       	subi	r20, 0xD0	; 208
    1884:	4a 33       	cpi	r20, 0x3A	; 58
    1886:	18 f0       	brcs	.+6      	; 0x188e <__ultoa_invert+0x7c>
    1888:	49 5d       	subi	r20, 0xD9	; 217
    188a:	31 fd       	sbrc	r19, 1
    188c:	40 52       	subi	r20, 0x20	; 32
    188e:	41 93       	st	Z+, r20
    1890:	02 d0       	rcall	.+4      	; 0x1896 <__ultoa_invert+0x84>
    1892:	a9 f7       	brne	.-22     	; 0x187e <__ultoa_invert+0x6c>
    1894:	ea cf       	rjmp	.-44     	; 0x186a <__ultoa_invert+0x58>
    1896:	b4 e0       	ldi	r27, 0x04	; 4
    1898:	a6 95       	lsr	r26
    189a:	97 95       	ror	r25
    189c:	87 95       	ror	r24
    189e:	77 95       	ror	r23
    18a0:	67 95       	ror	r22
    18a2:	ba 95       	dec	r27
    18a4:	c9 f7       	brne	.-14     	; 0x1898 <__ultoa_invert+0x86>
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	61 05       	cpc	r22, r1
    18aa:	71 05       	cpc	r23, r1
    18ac:	08 95       	ret
    18ae:	9b 01       	movw	r18, r22
    18b0:	ac 01       	movw	r20, r24
    18b2:	0a 2e       	mov	r0, r26
    18b4:	06 94       	lsr	r0
    18b6:	57 95       	ror	r21
    18b8:	47 95       	ror	r20
    18ba:	37 95       	ror	r19
    18bc:	27 95       	ror	r18
    18be:	ba 95       	dec	r27
    18c0:	c9 f7       	brne	.-14     	; 0x18b4 <__ultoa_invert+0xa2>
    18c2:	62 0f       	add	r22, r18
    18c4:	73 1f       	adc	r23, r19
    18c6:	84 1f       	adc	r24, r20
    18c8:	95 1f       	adc	r25, r21
    18ca:	a0 1d       	adc	r26, r0
    18cc:	08 95       	ret

000018ce <__prologue_saves__>:
    18ce:	2f 92       	push	r2
    18d0:	3f 92       	push	r3
    18d2:	4f 92       	push	r4
    18d4:	5f 92       	push	r5
    18d6:	6f 92       	push	r6
    18d8:	7f 92       	push	r7
    18da:	8f 92       	push	r8
    18dc:	9f 92       	push	r9
    18de:	af 92       	push	r10
    18e0:	bf 92       	push	r11
    18e2:	cf 92       	push	r12
    18e4:	df 92       	push	r13
    18e6:	ef 92       	push	r14
    18e8:	ff 92       	push	r15
    18ea:	0f 93       	push	r16
    18ec:	1f 93       	push	r17
    18ee:	cf 93       	push	r28
    18f0:	df 93       	push	r29
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	ca 1b       	sub	r28, r26
    18f8:	db 0b       	sbc	r29, r27
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	09 94       	ijmp

00001906 <__epilogue_restores__>:
    1906:	2a 88       	ldd	r2, Y+18	; 0x12
    1908:	39 88       	ldd	r3, Y+17	; 0x11
    190a:	48 88       	ldd	r4, Y+16	; 0x10
    190c:	5f 84       	ldd	r5, Y+15	; 0x0f
    190e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1910:	7d 84       	ldd	r7, Y+13	; 0x0d
    1912:	8c 84       	ldd	r8, Y+12	; 0x0c
    1914:	9b 84       	ldd	r9, Y+11	; 0x0b
    1916:	aa 84       	ldd	r10, Y+10	; 0x0a
    1918:	b9 84       	ldd	r11, Y+9	; 0x09
    191a:	c8 84       	ldd	r12, Y+8	; 0x08
    191c:	df 80       	ldd	r13, Y+7	; 0x07
    191e:	ee 80       	ldd	r14, Y+6	; 0x06
    1920:	fd 80       	ldd	r15, Y+5	; 0x05
    1922:	0c 81       	ldd	r16, Y+4	; 0x04
    1924:	1b 81       	ldd	r17, Y+3	; 0x03
    1926:	aa 81       	ldd	r26, Y+2	; 0x02
    1928:	b9 81       	ldd	r27, Y+1	; 0x01
    192a:	ce 0f       	add	r28, r30
    192c:	d1 1d       	adc	r29, r1
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	f8 94       	cli
    1932:	de bf       	out	0x3e, r29	; 62
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	cd bf       	out	0x3d, r28	; 61
    1938:	ed 01       	movw	r28, r26
    193a:	08 95       	ret

0000193c <_exit>:
    193c:	f8 94       	cli

0000193e <__stop_program>:
    193e:	ff cf       	rjmp	.-2      	; 0x193e <__stop_program>
