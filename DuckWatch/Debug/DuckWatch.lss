
DuckWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003f8  00800100  000023ac  00002440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000103  008004f8  008004f8  00002838  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002838  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002894  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  000028d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000399a  00000000  00000000  00002afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000134e  00000000  00000000  00006496  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c7e  00000000  00000000  000077e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000870  00000000  00000000  00008464  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a84  00000000  00000000  00008cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024e7  00000000  00000000  00009758  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000bc3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	14 e0       	ldi	r17, 0x04	; 4
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ea       	ldi	r30, 0xAC	; 172
      7c:	f3 e2       	ldi	r31, 0x23	; 35
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 3f       	cpi	r26, 0xF8	; 248
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a8 ef       	ldi	r26, 0xF8	; 248
      8e:	b4 e0       	ldi	r27, 0x04	; 4
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 3f       	cpi	r26, 0xFB	; 251
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 72 09 	call	0x12e4	; 0x12e4 <main>
      9e:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN6BME2804initEv>:
			 p_i2c->read(BME280_ADDR, BME280_CTRL_MEAS) | BME280_NORMAL_MODE);
			break;
		case SLEEP:
		default:
			stat = p_i2c->write(BME280_ADDR, BME280_CTRL_MEAS,
			 p_i2c->read(BME280_ADDR, BME280_CTRL_MEAS) | BME280_SLEEP_MODE);
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	ec 01       	movw	r28, r24
      ac:	21 e0       	ldi	r18, 0x01	; 1
      ae:	42 ef       	ldi	r20, 0xF2	; 242
      b0:	6e ee       	ldi	r22, 0xEE	; 238
			break;
	}
	
	return stat;	
}
      b2:	88 81       	ld	r24, Y
      b4:	99 81       	ldd	r25, Y+1	; 0x01
      b6:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN3i2c5writeEhhh>
      ba:	81 11       	cpse	r24, r1
      bc:	10 c0       	rjmp	.+32     	; 0xde <_ZN6BME2804initEv+0x38>
	 * 3. Turn off IIR Filter and set inactive duration to 1s for normal
	 *	  mode
	 */
	return (p_i2c->write(BME280_ADDR, BME280_CTRL_HUM, BME280_H_OVSM_1)
			|| p_i2c->write(BME280_ADDR, BME280_CTRL_MEAS, 
				BME280_P_OVSM_1 | BME280_T_OVSM_16 | BME280_NORMAL_MODE)
      be:	27 e3       	ldi	r18, 0x37	; 55
      c0:	44 ef       	ldi	r20, 0xF4	; 244
      c2:	6e ee       	ldi	r22, 0xEE	; 238
      c4:	88 81       	ld	r24, Y
      c6:	99 81       	ldd	r25, Y+1	; 0x01
      c8:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN3i2c5writeEhhh>
	 *    by 1 and set mode to sleep
	 * 3. Turn off IIR Filter and set inactive duration to 1s for normal
	 *	  mode
	 */
	return (p_i2c->write(BME280_ADDR, BME280_CTRL_HUM, BME280_H_OVSM_1)
			|| p_i2c->write(BME280_ADDR, BME280_CTRL_MEAS, 
      cc:	81 11       	cpse	r24, r1
      ce:	07 c0       	rjmp	.+14     	; 0xde <_ZN6BME2804initEv+0x38>
				BME280_P_OVSM_1 | BME280_T_OVSM_16 | BME280_NORMAL_MODE)
			|| p_i2c->write(BME280_ADDR, BME280_CONFIG, 
				BME280_TSB_F | BME280_FLTR_OFF | BME280_SPI_DIS));
      d0:	20 e0       	ldi	r18, 0x00	; 0
      d2:	45 ef       	ldi	r20, 0xF5	; 245
      d4:	6e ee       	ldi	r22, 0xEE	; 238
      d6:	88 81       	ld	r24, Y
      d8:	99 81       	ldd	r25, Y+1	; 0x01
      da:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN3i2c5writeEhhh>
}
      de:	df 91       	pop	r29
      e0:	cf 91       	pop	r28
      e2:	08 95       	ret

000000e4 <_ZN6BME28016convert_pressureEv>:
 * Return:		int32_t - the human-readable pressure reading accurate to
 *							2 decimal places in Pascals. A value of 5382 is
 *							equal to 53.82 Pa
 ****************************************************************************/
int32_t BME280::convert_pressure (void)
{
      e4:	2f 92       	push	r2
      e6:	3f 92       	push	r3
      e8:	4f 92       	push	r4
      ea:	5f 92       	push	r5
      ec:	6f 92       	push	r6
      ee:	7f 92       	push	r7
      f0:	8f 92       	push	r8
      f2:	9f 92       	push	r9
      f4:	af 92       	push	r10
      f6:	bf 92       	push	r11
      f8:	cf 92       	push	r12
      fa:	df 92       	push	r13
      fc:	ef 92       	push	r14
      fe:	ff 92       	push	r15
     100:	0f 93       	push	r16
     102:	1f 93       	push	r17
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
     108:	cd b7       	in	r28, 0x3d	; 61
     10a:	de b7       	in	r29, 0x3e	; 62
     10c:	a0 97       	sbiw	r28, 0x20	; 32
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	f8 94       	cli
     112:	de bf       	out	0x3e, r29	; 62
     114:	0f be       	out	0x3f, r0	; 63
     116:	cd bf       	out	0x3d, r28	; 61
     118:	98 a3       	std	Y+32, r25	; 0x20
     11a:	8f 8f       	std	Y+31, r24	; 0x1f
	int64_t var1, var2, p;
	
	raw_pres >>= 4;
     11c:	fc 01       	movw	r30, r24
     11e:	84 81       	ldd	r24, Z+4	; 0x04
     120:	95 81       	ldd	r25, Z+5	; 0x05
     122:	a6 81       	ldd	r26, Z+6	; 0x06
     124:	b7 81       	ldd	r27, Z+7	; 0x07
     126:	9c 01       	movw	r18, r24
     128:	ad 01       	movw	r20, r26
     12a:	68 94       	set
     12c:	13 f8       	bld	r1, 3
     12e:	55 95       	asr	r21
     130:	47 95       	ror	r20
     132:	37 95       	ror	r19
     134:	27 95       	ror	r18
     136:	16 94       	lsr	r1
     138:	d1 f7       	brne	.-12     	; 0x12e <_ZN6BME28016convert_pressureEv+0x4a>
     13a:	2d 87       	std	Y+13, r18	; 0x0d
     13c:	3e 87       	std	Y+14, r19	; 0x0e
     13e:	4f 87       	std	Y+15, r20	; 0x0f
     140:	58 8b       	std	Y+16, r21	; 0x10
     142:	24 83       	std	Z+4, r18	; 0x04
     144:	35 83       	std	Z+5, r19	; 0x05
     146:	46 83       	std	Z+6, r20	; 0x06
     148:	57 83       	std	Z+7, r21	; 0x07
	
	var1 =	((int64_t)cal.t_fine) - 128000;
     14a:	83 ad       	ldd	r24, Z+59	; 0x3b
     14c:	94 ad       	ldd	r25, Z+60	; 0x3c
     14e:	a5 ad       	ldd	r26, Z+61	; 0x3d
     150:	b6 ad       	ldd	r27, Z+62	; 0x3e
     152:	6c 01       	movw	r12, r24
     154:	7d 01       	movw	r14, r26
     156:	ff 0c       	add	r15, r15
     158:	cc 08       	sbc	r12, r12
     15a:	dc 2c       	mov	r13, r12
     15c:	76 01       	movw	r14, r12
     15e:	28 2f       	mov	r18, r24
     160:	39 2f       	mov	r19, r25
     162:	4a 2f       	mov	r20, r26
     164:	5b 2f       	mov	r21, r27
     166:	6c 2d       	mov	r22, r12
     168:	7c 2d       	mov	r23, r12
     16a:	8c 2d       	mov	r24, r12
     16c:	9c 2d       	mov	r25, r12
     16e:	34 5f       	subi	r19, 0xF4	; 244
     170:	41 40       	sbci	r20, 0x01	; 1
     172:	51 09       	sbc	r21, r1
     174:	61 09       	sbc	r22, r1
     176:	71 09       	sbc	r23, r1
     178:	81 09       	sbc	r24, r1
     17a:	91 09       	sbc	r25, r1
     17c:	29 83       	std	Y+1, r18	; 0x01
     17e:	3a 83       	std	Y+2, r19	; 0x02
     180:	4b 83       	std	Y+3, r20	; 0x03
     182:	5c 83       	std	Y+4, r21	; 0x04
     184:	6d 83       	std	Y+5, r22	; 0x05
     186:	7e 83       	std	Y+6, r23	; 0x06
     188:	8f 83       	std	Y+7, r24	; 0x07
     18a:	98 87       	std	Y+8, r25	; 0x08
	
	var2 =	var1 * var1 * (int64_t)cal.dig_P6;
     18c:	a2 2e       	mov	r10, r18
     18e:	b3 2e       	mov	r11, r19
     190:	c4 2e       	mov	r12, r20
     192:	d5 2e       	mov	r13, r21
     194:	e6 2e       	mov	r14, r22
     196:	f7 2e       	mov	r15, r23
     198:	08 2f       	mov	r16, r24
     19a:	19 2f       	mov	r17, r25
     19c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__muldi3>
     1a0:	29 87       	std	Y+9, r18	; 0x09
     1a2:	3a 87       	std	Y+10, r19	; 0x0a
     1a4:	4b 87       	std	Y+11, r20	; 0x0b
     1a6:	5c 87       	std	Y+12, r21	; 0x0c
     1a8:	6d 8b       	std	Y+21, r22	; 0x15
     1aa:	7e 8b       	std	Y+22, r23	; 0x16
     1ac:	8f 8b       	std	Y+23, r24	; 0x17
     1ae:	98 8f       	std	Y+24, r25	; 0x18
     1b0:	af 8d       	ldd	r26, Y+31	; 0x1f
     1b2:	b8 a1       	ldd	r27, Y+32	; 0x20
     1b4:	9a 96       	adiw	r26, 0x2a	; 42
     1b6:	bc 91       	ld	r27, X
     1b8:	bc 8f       	std	Y+28, r27	; 0x1c
     1ba:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1bc:	f8 a1       	ldd	r31, Y+32	; 0x20
     1be:	f3 a5       	ldd	r31, Z+43	; 0x2b
     1c0:	f9 8f       	std	Y+25, r31	; 0x19
	var2 =	var2 + ((var1*(int64_t)cal.dig_P5) << 17);
     1c2:	af 8d       	ldd	r26, Y+31	; 0x1f
     1c4:	b8 a1       	ldd	r27, Y+32	; 0x20
     1c6:	98 96       	adiw	r26, 0x28	; 40
     1c8:	bc 91       	ld	r27, X
     1ca:	bd 8f       	std	Y+29, r27	; 0x1d
     1cc:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1ce:	f8 a1       	ldd	r31, Y+32	; 0x20
     1d0:	f1 a5       	ldd	r31, Z+41	; 0x29
     1d2:	fa 8f       	std	Y+26, r31	; 0x1a
	var2 =	var2 + (((int64_t)cal.dig_P4) << 35);
     1d4:	af 8d       	ldd	r26, Y+31	; 0x1f
     1d6:	b8 a1       	ldd	r27, Y+32	; 0x20
     1d8:	96 96       	adiw	r26, 0x26	; 38
     1da:	bc 91       	ld	r27, X
     1dc:	be 8f       	std	Y+30, r27	; 0x1e
     1de:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1e0:	f8 a1       	ldd	r31, Y+32	; 0x20
     1e2:	f7 a1       	ldd	r31, Z+39	; 0x27
     1e4:	fb 8f       	std	Y+27, r31	; 0x1b
	
	var1 =	((var1 * var1 * (int64_t)cal.dig_P3) >> 8) +
			((var1 * (int64_t)cal.dig_P2)<<12);
     1e6:	af 8d       	ldd	r26, Y+31	; 0x1f
     1e8:	b8 a1       	ldd	r27, Y+32	; 0x20
     1ea:	93 96       	adiw	r26, 0x23	; 35
     1ec:	3c 91       	ld	r19, X
     1ee:	93 97       	sbiw	r26, 0x23	; 35
     1f0:	92 96       	adiw	r26, 0x22	; 34
     1f2:	2c 91       	ld	r18, X
     1f4:	93 2f       	mov	r25, r19
     1f6:	99 0f       	add	r25, r25
     1f8:	99 0b       	sbc	r25, r25
     1fa:	49 2f       	mov	r20, r25
     1fc:	59 2f       	mov	r21, r25
     1fe:	69 2f       	mov	r22, r25
     200:	79 2f       	mov	r23, r25
     202:	89 2f       	mov	r24, r25
     204:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__muldi3>
     208:	0c e0       	ldi	r16, 0x0C	; 12
     20a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__ashldi3>
     20e:	22 2e       	mov	r2, r18
     210:	33 2e       	mov	r3, r19
     212:	44 2e       	mov	r4, r20
     214:	55 2e       	mov	r5, r21
     216:	66 2e       	mov	r6, r22
     218:	77 2e       	mov	r7, r23
     21a:	88 2e       	mov	r8, r24
     21c:	99 2e       	mov	r9, r25
	
	var2 =	var1 * var1 * (int64_t)cal.dig_P6;
	var2 =	var2 + ((var1*(int64_t)cal.dig_P5) << 17);
	var2 =	var2 + (((int64_t)cal.dig_P4) << 35);
	
	var1 =	((var1 * var1 * (int64_t)cal.dig_P3) >> 8) +
     21e:	ef 8d       	ldd	r30, Y+31	; 0x1f
     220:	f8 a1       	ldd	r31, Y+32	; 0x20
     222:	b5 a0       	ldd	r11, Z+37	; 0x25
     224:	a4 a0       	ldd	r10, Z+36	; 0x24
     226:	1b 2d       	mov	r17, r11
     228:	11 0f       	add	r17, r17
     22a:	11 0b       	sbc	r17, r17
     22c:	c1 2e       	mov	r12, r17
     22e:	d1 2e       	mov	r13, r17
     230:	e1 2e       	mov	r14, r17
     232:	f1 2e       	mov	r15, r17
     234:	01 2f       	mov	r16, r17
     236:	29 85       	ldd	r18, Y+9	; 0x09
     238:	3a 85       	ldd	r19, Y+10	; 0x0a
     23a:	4b 85       	ldd	r20, Y+11	; 0x0b
     23c:	5c 85       	ldd	r21, Y+12	; 0x0c
     23e:	6d 89       	ldd	r22, Y+21	; 0x15
     240:	7e 89       	ldd	r23, Y+22	; 0x16
     242:	8f 89       	ldd	r24, Y+23	; 0x17
     244:	98 8d       	ldd	r25, Y+24	; 0x18
     246:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__muldi3>
     24a:	08 e0       	ldi	r16, 0x08	; 8
     24c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__ashrdi3>
			((var1 * (int64_t)cal.dig_P2)<<12);
     250:	a2 2c       	mov	r10, r2
     252:	b3 2c       	mov	r11, r3
     254:	c4 2c       	mov	r12, r4
     256:	d5 2c       	mov	r13, r5
     258:	e6 2c       	mov	r14, r6
     25a:	f7 2c       	mov	r15, r7
     25c:	08 2d       	mov	r16, r8
     25e:	19 2d       	mov	r17, r9
     260:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__adddi3>
	var1 =	(((((int64_t)1) << 47) + var1)) * ((int64_t)cal.dig_P1) >> 33;
     264:	70 58       	subi	r23, 0x80	; 128
     266:	8f 4f       	sbci	r24, 0xFF	; 255
     268:	9f 4f       	sbci	r25, 0xFF	; 255
     26a:	af 8d       	ldd	r26, Y+31	; 0x1f
     26c:	b8 a1       	ldd	r27, Y+32	; 0x20
     26e:	90 96       	adiw	r26, 0x20	; 32
     270:	2d 90       	ld	r2, X+
     272:	3c 90       	ld	r3, X
     274:	91 97       	sbiw	r26, 0x21	; 33
     276:	a2 2c       	mov	r10, r2
     278:	b3 2c       	mov	r11, r3
     27a:	c1 2c       	mov	r12, r1
     27c:	d1 2c       	mov	r13, r1
     27e:	e1 2c       	mov	r14, r1
     280:	f1 2c       	mov	r15, r1
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	10 e0       	ldi	r17, 0x00	; 0
     286:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__muldi3>
     28a:	01 e2       	ldi	r16, 0x21	; 33
     28c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__ashrdi3>
     290:	29 8b       	std	Y+17, r18	; 0x11
     292:	3a 8b       	std	Y+18, r19	; 0x12
     294:	4b 8b       	std	Y+19, r20	; 0x13
     296:	45 2e       	mov	r4, r21
     298:	56 2e       	mov	r5, r22
     29a:	7c 8b       	std	Y+20, r23	; 0x14
     29c:	38 2e       	mov	r3, r24
     29e:	29 2e       	mov	r2, r25
	 
	if (var1 == 0) {
     2a0:	65 2d       	mov	r22, r5
     2a2:	83 2d       	mov	r24, r3
     2a4:	92 2d       	mov	r25, r2
     2a6:	a0 e0       	ldi	r26, 0x00	; 0
     2a8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__cmpdi2_s8>
     2ac:	09 f4       	brne	.+2      	; 0x2b0 <_ZN6BME28016convert_pressureEv+0x1cc>
     2ae:	8f c1       	rjmp	.+798    	; 0x5ce <_ZN6BME28016convert_pressureEv+0x4ea>
	
	raw_pres >>= 4;
	
	var1 =	((int64_t)cal.t_fine) - 128000;
	
	var2 =	var1 * var1 * (int64_t)cal.dig_P6;
     2b0:	ac 8c       	ldd	r10, Y+28	; 0x1c
     2b2:	19 8d       	ldd	r17, Y+25	; 0x19
     2b4:	11 0f       	add	r17, r17
     2b6:	11 0b       	sbc	r17, r17
     2b8:	b9 8c       	ldd	r11, Y+25	; 0x19
     2ba:	c1 2e       	mov	r12, r17
     2bc:	d1 2e       	mov	r13, r17
     2be:	e1 2e       	mov	r14, r17
     2c0:	f1 2e       	mov	r15, r17
     2c2:	01 2f       	mov	r16, r17
     2c4:	29 85       	ldd	r18, Y+9	; 0x09
     2c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     2c8:	4b 85       	ldd	r20, Y+11	; 0x0b
     2ca:	5c 85       	ldd	r21, Y+12	; 0x0c
     2cc:	6d 89       	ldd	r22, Y+21	; 0x15
     2ce:	7e 89       	ldd	r23, Y+22	; 0x16
     2d0:	8f 89       	ldd	r24, Y+23	; 0x17
     2d2:	98 8d       	ldd	r25, Y+24	; 0x18
     2d4:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__muldi3>
     2d8:	29 87       	std	Y+9, r18	; 0x09
     2da:	3a 87       	std	Y+10, r19	; 0x0a
     2dc:	4b 87       	std	Y+11, r20	; 0x0b
     2de:	75 2e       	mov	r7, r21
     2e0:	86 2e       	mov	r8, r22
     2e2:	97 2e       	mov	r9, r23
     2e4:	8c 87       	std	Y+12, r24	; 0x0c
     2e6:	69 2e       	mov	r6, r25
	var2 =	var2 + ((var1*(int64_t)cal.dig_P5) << 17);
     2e8:	2d 8d       	ldd	r18, Y+29	; 0x1d
     2ea:	9a 8d       	ldd	r25, Y+26	; 0x1a
     2ec:	99 0f       	add	r25, r25
     2ee:	99 0b       	sbc	r25, r25
     2f0:	a9 80       	ldd	r10, Y+1	; 0x01
     2f2:	ba 80       	ldd	r11, Y+2	; 0x02
     2f4:	cb 80       	ldd	r12, Y+3	; 0x03
     2f6:	dc 80       	ldd	r13, Y+4	; 0x04
     2f8:	ed 80       	ldd	r14, Y+5	; 0x05
     2fa:	fe 80       	ldd	r15, Y+6	; 0x06
     2fc:	0f 81       	ldd	r16, Y+7	; 0x07
     2fe:	18 85       	ldd	r17, Y+8	; 0x08
     300:	3a 8d       	ldd	r19, Y+26	; 0x1a
     302:	49 2f       	mov	r20, r25
     304:	59 2f       	mov	r21, r25
     306:	69 2f       	mov	r22, r25
     308:	79 2f       	mov	r23, r25
     30a:	89 2f       	mov	r24, r25
     30c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__muldi3>
     310:	01 e1       	ldi	r16, 0x11	; 17
     312:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__ashldi3>
     316:	a9 84       	ldd	r10, Y+9	; 0x09
     318:	ba 84       	ldd	r11, Y+10	; 0x0a
     31a:	cb 84       	ldd	r12, Y+11	; 0x0b
     31c:	d7 2c       	mov	r13, r7
     31e:	e8 2c       	mov	r14, r8
     320:	f9 2c       	mov	r15, r9
     322:	0c 85       	ldd	r16, Y+12	; 0x0c
     324:	16 2d       	mov	r17, r6
     326:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__adddi3>
     32a:	a2 2e       	mov	r10, r18
     32c:	b3 2e       	mov	r11, r19
     32e:	c4 2e       	mov	r12, r20
     330:	d5 2e       	mov	r13, r21
     332:	e6 2e       	mov	r14, r22
     334:	f7 2e       	mov	r15, r23
     336:	e8 2f       	mov	r30, r24
     338:	19 2f       	mov	r17, r25
	 
	if (var1 == 0) {
		return 0;  // avoid exception caused by division by zero 
	}
	
	p = 1048576 - raw_pres;
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	a0 e1       	ldi	r26, 0x10	; 16
     340:	b0 e0       	ldi	r27, 0x00	; 0
     342:	2d 85       	ldd	r18, Y+13	; 0x0d
     344:	3e 85       	ldd	r19, Y+14	; 0x0e
     346:	4f 85       	ldd	r20, Y+15	; 0x0f
     348:	58 89       	ldd	r21, Y+16	; 0x10
     34a:	82 1b       	sub	r24, r18
     34c:	93 0b       	sbc	r25, r19
     34e:	a4 0b       	sbc	r26, r20
     350:	b5 0b       	sbc	r27, r21
     352:	3c 01       	movw	r6, r24
     354:	4d 01       	movw	r8, r26
     356:	99 0c       	add	r9, r9
     358:	66 08       	sbc	r6, r6
     35a:	76 2c       	mov	r7, r6
     35c:	43 01       	movw	r8, r6
	p = (((p << 31) - var2) * 3125) / var1;
     35e:	28 2f       	mov	r18, r24
     360:	39 2f       	mov	r19, r25
     362:	4a 2f       	mov	r20, r26
     364:	5b 2f       	mov	r21, r27
     366:	66 2d       	mov	r22, r6
     368:	76 2d       	mov	r23, r6
     36a:	86 2d       	mov	r24, r6
     36c:	96 2d       	mov	r25, r6
     36e:	0f e1       	ldi	r16, 0x1F	; 31
     370:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__ashldi3>
     374:	82 2e       	mov	r8, r18
     376:	93 2e       	mov	r9, r19
     378:	64 2e       	mov	r6, r20
     37a:	75 2e       	mov	r7, r21
     37c:	b6 2f       	mov	r27, r22
     37e:	a7 2f       	mov	r26, r23
     380:	8a 83       	std	Y+2, r24	; 0x02
     382:	f9 2f       	mov	r31, r25
	
	var1 =	((int64_t)cal.t_fine) - 128000;
	
	var2 =	var1 * var1 * (int64_t)cal.dig_P6;
	var2 =	var2 + ((var1*(int64_t)cal.dig_P5) << 17);
	var2 =	var2 + (((int64_t)cal.dig_P4) << 35);
     384:	2e 8d       	ldd	r18, Y+30	; 0x1e
     386:	9b 8d       	ldd	r25, Y+27	; 0x1b
     388:	99 0f       	add	r25, r25
     38a:	99 0b       	sbc	r25, r25
     38c:	3b 8d       	ldd	r19, Y+27	; 0x1b
     38e:	49 2f       	mov	r20, r25
     390:	59 2f       	mov	r21, r25
     392:	69 2f       	mov	r22, r25
     394:	79 2f       	mov	r23, r25
     396:	89 2f       	mov	r24, r25
     398:	03 e2       	ldi	r16, 0x23	; 35
     39a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__ashldi3>
     39e:	0e 2f       	mov	r16, r30
     3a0:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__adddi3>
     3a4:	a2 2e       	mov	r10, r18
     3a6:	b3 2e       	mov	r11, r19
     3a8:	c4 2e       	mov	r12, r20
     3aa:	d5 2e       	mov	r13, r21
     3ac:	e6 2e       	mov	r14, r22
     3ae:	f7 2e       	mov	r15, r23
     3b0:	08 2f       	mov	r16, r24
     3b2:	19 2f       	mov	r17, r25
	if (var1 == 0) {
		return 0;  // avoid exception caused by division by zero 
	}
	
	p = 1048576 - raw_pres;
	p = (((p << 31) - var2) * 3125) / var1;
     3b4:	28 2d       	mov	r18, r8
     3b6:	39 2d       	mov	r19, r9
     3b8:	46 2d       	mov	r20, r6
     3ba:	57 2d       	mov	r21, r7
     3bc:	6b 2f       	mov	r22, r27
     3be:	7a 2f       	mov	r23, r26
     3c0:	8a 81       	ldd	r24, Y+2	; 0x02
     3c2:	9f 2f       	mov	r25, r31
     3c4:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__subdi3>
     3c8:	82 2e       	mov	r8, r18
     3ca:	93 2e       	mov	r9, r19
     3cc:	64 2e       	mov	r6, r20
     3ce:	75 2e       	mov	r7, r21
     3d0:	b6 2f       	mov	r27, r22
     3d2:	a7 2f       	mov	r26, r23
     3d4:	e8 2f       	mov	r30, r24
     3d6:	f9 2f       	mov	r31, r25
     3d8:	03 e0       	ldi	r16, 0x03	; 3
     3da:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__ashldi3>
     3de:	a8 2c       	mov	r10, r8
     3e0:	b9 2c       	mov	r11, r9
     3e2:	c6 2c       	mov	r12, r6
     3e4:	d7 2c       	mov	r13, r7
     3e6:	eb 2e       	mov	r14, r27
     3e8:	fa 2e       	mov	r15, r26
     3ea:	0e 2f       	mov	r16, r30
     3ec:	1f 2f       	mov	r17, r31
     3ee:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__subdi3>
     3f2:	a2 2e       	mov	r10, r18
     3f4:	b3 2e       	mov	r11, r19
     3f6:	c4 2e       	mov	r12, r20
     3f8:	d5 2e       	mov	r13, r21
     3fa:	e6 2e       	mov	r14, r22
     3fc:	f7 2e       	mov	r15, r23
     3fe:	89 83       	std	Y+1, r24	; 0x01
     400:	19 2f       	mov	r17, r25
     402:	03 e0       	ldi	r16, 0x03	; 3
     404:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__ashldi3>
     408:	09 81       	ldd	r16, Y+1	; 0x01
     40a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__subdi3>
     40e:	03 e0       	ldi	r16, 0x03	; 3
     410:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__ashldi3>
     414:	a8 2c       	mov	r10, r8
     416:	b9 2c       	mov	r11, r9
     418:	c6 2c       	mov	r12, r6
     41a:	d7 2c       	mov	r13, r7
     41c:	eb 2e       	mov	r14, r27
     41e:	fa 2e       	mov	r15, r26
     420:	0e 2f       	mov	r16, r30
     422:	1f 2f       	mov	r17, r31
     424:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__subdi3>
     428:	02 e0       	ldi	r16, 0x02	; 2
     42a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__ashldi3>
     42e:	0e 2f       	mov	r16, r30
     430:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__subdi3>
     434:	01 e0       	ldi	r16, 0x01	; 1
     436:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__ashldi3>
     43a:	0e 2f       	mov	r16, r30
     43c:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__subdi3>
     440:	a9 88       	ldd	r10, Y+17	; 0x11
     442:	ba 88       	ldd	r11, Y+18	; 0x12
     444:	cb 88       	ldd	r12, Y+19	; 0x13
     446:	d4 2c       	mov	r13, r4
     448:	e5 2c       	mov	r14, r5
     44a:	fc 88       	ldd	r15, Y+20	; 0x14
     44c:	03 2d       	mov	r16, r3
     44e:	12 2d       	mov	r17, r2
     450:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__divdi3>
     454:	29 83       	std	Y+1, r18	; 0x01
     456:	3a 83       	std	Y+2, r19	; 0x02
     458:	4b 83       	std	Y+3, r20	; 0x03
     45a:	5c 83       	std	Y+4, r21	; 0x04
     45c:	6d 83       	std	Y+5, r22	; 0x05
     45e:	7e 83       	std	Y+6, r23	; 0x06
     460:	8f 83       	std	Y+7, r24	; 0x07
     462:	98 87       	std	Y+8, r25	; 0x08
	
	var1 = (((int64_t)cal.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
     464:	0d e0       	ldi	r16, 0x0D	; 13
     466:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__ashrdi3>
     46a:	82 2e       	mov	r8, r18
     46c:	93 2e       	mov	r9, r19
     46e:	74 2e       	mov	r7, r20
     470:	65 2e       	mov	r6, r21
     472:	56 2e       	mov	r5, r22
     474:	47 2e       	mov	r4, r23
     476:	38 2e       	mov	r3, r24
     478:	29 2e       	mov	r2, r25
     47a:	af 8d       	ldd	r26, Y+31	; 0x1f
     47c:	b8 a1       	ldd	r27, Y+32	; 0x20
     47e:	d1 96       	adiw	r26, 0x31	; 49
     480:	3c 91       	ld	r19, X
     482:	d1 97       	sbiw	r26, 0x31	; 49
     484:	d0 96       	adiw	r26, 0x30	; 48
     486:	2c 91       	ld	r18, X
     488:	93 2f       	mov	r25, r19
     48a:	99 0f       	add	r25, r25
     48c:	99 0b       	sbc	r25, r25
     48e:	a8 2c       	mov	r10, r8
     490:	b9 2c       	mov	r11, r9
     492:	c7 2c       	mov	r12, r7
     494:	d6 2c       	mov	r13, r6
     496:	e5 2c       	mov	r14, r5
     498:	f4 2c       	mov	r15, r4
     49a:	03 2d       	mov	r16, r3
     49c:	12 2d       	mov	r17, r2
     49e:	49 2f       	mov	r20, r25
     4a0:	59 2f       	mov	r21, r25
     4a2:	69 2f       	mov	r22, r25
     4a4:	79 2f       	mov	r23, r25
     4a6:	89 2f       	mov	r24, r25
     4a8:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__muldi3>
     4ac:	a2 2e       	mov	r10, r18
     4ae:	b3 2e       	mov	r11, r19
     4b0:	c4 2e       	mov	r12, r20
     4b2:	d5 2e       	mov	r13, r21
     4b4:	e6 2e       	mov	r14, r22
     4b6:	f7 2e       	mov	r15, r23
     4b8:	08 2f       	mov	r16, r24
     4ba:	19 2f       	mov	r17, r25
     4bc:	28 2d       	mov	r18, r8
     4be:	39 2d       	mov	r19, r9
     4c0:	47 2d       	mov	r20, r7
     4c2:	56 2d       	mov	r21, r6
     4c4:	65 2d       	mov	r22, r5
     4c6:	74 2d       	mov	r23, r4
     4c8:	83 2d       	mov	r24, r3
     4ca:	92 2d       	mov	r25, r2
     4cc:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__muldi3>
     4d0:	09 e1       	ldi	r16, 0x19	; 25
     4d2:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__ashrdi3>
     4d6:	a2 2e       	mov	r10, r18
     4d8:	b3 2e       	mov	r11, r19
     4da:	c4 2e       	mov	r12, r20
     4dc:	d5 2e       	mov	r13, r21
     4de:	e6 2e       	mov	r14, r22
     4e0:	f7 2e       	mov	r15, r23
     4e2:	08 2f       	mov	r16, r24
     4e4:	19 2f       	mov	r17, r25
	var2 = (((int64_t)cal.dig_P8) * p) >> 19; 
	
	p = ((p + var1 + var2) >> 8) + (((int64_t)cal.dig_P7) << 4);
     4e6:	29 81       	ldd	r18, Y+1	; 0x01
     4e8:	3a 81       	ldd	r19, Y+2	; 0x02
     4ea:	4b 81       	ldd	r20, Y+3	; 0x03
     4ec:	5c 81       	ldd	r21, Y+4	; 0x04
     4ee:	6d 81       	ldd	r22, Y+5	; 0x05
     4f0:	7e 81       	ldd	r23, Y+6	; 0x06
     4f2:	8f 81       	ldd	r24, Y+7	; 0x07
     4f4:	98 85       	ldd	r25, Y+8	; 0x08
     4f6:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__adddi3>
     4fa:	22 2e       	mov	r2, r18
     4fc:	33 2e       	mov	r3, r19
     4fe:	44 2e       	mov	r4, r20
     500:	55 2e       	mov	r5, r21
     502:	66 2e       	mov	r6, r22
     504:	77 2e       	mov	r7, r23
     506:	88 2e       	mov	r8, r24
     508:	99 2e       	mov	r9, r25
	
	p = 1048576 - raw_pres;
	p = (((p << 31) - var2) * 3125) / var1;
	
	var1 = (((int64_t)cal.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
	var2 = (((int64_t)cal.dig_P8) * p) >> 19; 
     50a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     50c:	f8 a1       	ldd	r31, Y+32	; 0x20
     50e:	37 a5       	ldd	r19, Z+47	; 0x2f
     510:	26 a5       	ldd	r18, Z+46	; 0x2e
     512:	93 2f       	mov	r25, r19
     514:	99 0f       	add	r25, r25
     516:	99 0b       	sbc	r25, r25
     518:	a9 80       	ldd	r10, Y+1	; 0x01
     51a:	ba 80       	ldd	r11, Y+2	; 0x02
     51c:	cb 80       	ldd	r12, Y+3	; 0x03
     51e:	dc 80       	ldd	r13, Y+4	; 0x04
     520:	ed 80       	ldd	r14, Y+5	; 0x05
     522:	fe 80       	ldd	r15, Y+6	; 0x06
     524:	0f 81       	ldd	r16, Y+7	; 0x07
     526:	18 85       	ldd	r17, Y+8	; 0x08
     528:	49 2f       	mov	r20, r25
     52a:	59 2f       	mov	r21, r25
     52c:	69 2f       	mov	r22, r25
     52e:	79 2f       	mov	r23, r25
     530:	89 2f       	mov	r24, r25
     532:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__muldi3>
     536:	03 e1       	ldi	r16, 0x13	; 19
     538:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__ashrdi3>
     53c:	a2 2e       	mov	r10, r18
     53e:	b3 2e       	mov	r11, r19
     540:	c4 2e       	mov	r12, r20
     542:	d5 2e       	mov	r13, r21
     544:	e6 2e       	mov	r14, r22
     546:	f7 2e       	mov	r15, r23
     548:	08 2f       	mov	r16, r24
     54a:	19 2f       	mov	r17, r25
	
	p = ((p + var1 + var2) >> 8) + (((int64_t)cal.dig_P7) << 4);
     54c:	22 2d       	mov	r18, r2
     54e:	33 2d       	mov	r19, r3
     550:	44 2d       	mov	r20, r4
     552:	55 2d       	mov	r21, r5
     554:	66 2d       	mov	r22, r6
     556:	77 2d       	mov	r23, r7
     558:	88 2d       	mov	r24, r8
     55a:	99 2d       	mov	r25, r9
     55c:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__adddi3>
     560:	08 e0       	ldi	r16, 0x08	; 8
     562:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__ashrdi3>
     566:	52 2e       	mov	r5, r18
     568:	63 2e       	mov	r6, r19
     56a:	74 2e       	mov	r7, r20
     56c:	85 2e       	mov	r8, r21
     56e:	96 2e       	mov	r9, r22
     570:	f7 2f       	mov	r31, r23
     572:	e8 2f       	mov	r30, r24
     574:	49 2e       	mov	r4, r25
     576:	af 8d       	ldd	r26, Y+31	; 0x1f
     578:	b8 a1       	ldd	r27, Y+32	; 0x20
     57a:	9d 96       	adiw	r26, 0x2d	; 45
     57c:	3c 91       	ld	r19, X
     57e:	9d 97       	sbiw	r26, 0x2d	; 45
     580:	9c 96       	adiw	r26, 0x2c	; 44
     582:	2c 91       	ld	r18, X
     584:	93 2f       	mov	r25, r19
     586:	99 0f       	add	r25, r25
     588:	99 0b       	sbc	r25, r25
     58a:	49 2f       	mov	r20, r25
     58c:	59 2f       	mov	r21, r25
     58e:	69 2f       	mov	r22, r25
     590:	79 2f       	mov	r23, r25
     592:	89 2f       	mov	r24, r25
     594:	04 e0       	ldi	r16, 0x04	; 4
     596:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__ashldi3>
     59a:	a2 2e       	mov	r10, r18
     59c:	b3 2e       	mov	r11, r19
     59e:	c4 2e       	mov	r12, r20
     5a0:	d5 2e       	mov	r13, r21
     5a2:	e6 2e       	mov	r14, r22
     5a4:	f7 2e       	mov	r15, r23
     5a6:	08 2f       	mov	r16, r24
     5a8:	19 2f       	mov	r17, r25
     5aa:	25 2d       	mov	r18, r5
     5ac:	36 2d       	mov	r19, r6
     5ae:	47 2d       	mov	r20, r7
     5b0:	58 2d       	mov	r21, r8
     5b2:	69 2d       	mov	r22, r9
     5b4:	7f 2f       	mov	r23, r31
     5b6:	8e 2f       	mov	r24, r30
     5b8:	94 2d       	mov	r25, r4
     5ba:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__adddi3>
	 
	return p >> 8;
     5be:	08 e0       	ldi	r16, 0x08	; 8
     5c0:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__ashrdi3>
     5c4:	62 2f       	mov	r22, r18
     5c6:	73 2f       	mov	r23, r19
     5c8:	84 2f       	mov	r24, r20
     5ca:	95 2f       	mov	r25, r21
     5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <_ZN6BME28016convert_pressureEv+0x4f2>
	var1 =	((var1 * var1 * (int64_t)cal.dig_P3) >> 8) +
			((var1 * (int64_t)cal.dig_P2)<<12);
	var1 =	(((((int64_t)1) << 47) + var1)) * ((int64_t)cal.dig_P1) >> 33;
	 
	if (var1 == 0) {
		return 0;  // avoid exception caused by division by zero 
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
	var2 = (((int64_t)cal.dig_P8) * p) >> 19; 
	
	p = ((p + var1 + var2) >> 8) + (((int64_t)cal.dig_P7) << 4);
	 
	return p >> 8;
}
     5d6:	a0 96       	adiw	r28, 0x20	; 32
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	df 90       	pop	r13
     5f0:	cf 90       	pop	r12
     5f2:	bf 90       	pop	r11
     5f4:	af 90       	pop	r10
     5f6:	9f 90       	pop	r9
     5f8:	8f 90       	pop	r8
     5fa:	7f 90       	pop	r7
     5fc:	6f 90       	pop	r6
     5fe:	5f 90       	pop	r5
     600:	4f 90       	pop	r4
     602:	3f 90       	pop	r3
     604:	2f 90       	pop	r2
     606:	08 95       	ret

00000608 <_ZN6BME28019convert_temperatureEv>:
 * Return:		int32_t - the human-readable temperature reading accurate to
 *							2 decimal places in Centigrade. A value of 5382 is
 *							equal to 53.82 degrees Centigrade
 ****************************************************************************/
int32_t BME280::convert_temperature (void)
{
     608:	8f 92       	push	r8
     60a:	9f 92       	push	r9
     60c:	af 92       	push	r10
     60e:	bf 92       	push	r11
     610:	cf 92       	push	r12
     612:	df 92       	push	r13
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	fc 01       	movw	r30, r24
	int32_t var1 = 0;
	int32_t var2 = 0;
	
	temperature = 0;
     61e:	12 8a       	std	Z+18, r1	; 0x12
     620:	13 8a       	std	Z+19, r1	; 0x13
     622:	14 8a       	std	Z+20, r1	; 0x14
     624:	15 8a       	std	Z+21, r1	; 0x15
	
	/* calculate x1 */
	var1 =	((((raw_temp>>3) - ((int32_t)cal.dig_T1 <<1))) *
     626:	80 85       	ldd	r24, Z+8	; 0x08
     628:	91 85       	ldd	r25, Z+9	; 0x09
     62a:	a2 85       	ldd	r26, Z+10	; 0x0a
     62c:	b3 85       	ldd	r27, Z+11	; 0x0b
     62e:	42 8d       	ldd	r20, Z+26	; 0x1a
     630:	53 8d       	ldd	r21, Z+27	; 0x1b
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	70 e0       	ldi	r23, 0x00	; 0
		 ((int32_t)cal.dig_T2)) >> 11;
	
	/* calculate x2 */
	var2 =	(((((raw_temp>>4) - ((int32_t)cal.dig_T1)) *
			   ((raw_temp>>4) - ((int32_t)cal.dig_T1))) >> 12) *
     636:	4c 01       	movw	r8, r24
     638:	5d 01       	movw	r10, r26
     63a:	68 94       	set
     63c:	13 f8       	bld	r1, 3
     63e:	b5 94       	asr	r11
     640:	a7 94       	ror	r10
     642:	97 94       	ror	r9
     644:	87 94       	ror	r8
     646:	16 94       	lsr	r1
     648:	d1 f7       	brne	.-12     	; 0x63e <_ZN6BME28019convert_temperatureEv+0x36>
     64a:	84 1a       	sub	r8, r20
     64c:	95 0a       	sbc	r9, r21
     64e:	a6 0a       	sbc	r10, r22
     650:	b7 0a       	sbc	r11, r23
	int32_t var2 = 0;
	
	temperature = 0;
	
	/* calculate x1 */
	var1 =	((((raw_temp>>3) - ((int32_t)cal.dig_T1 <<1))) *
     652:	68 94       	set
     654:	12 f8       	bld	r1, 2
     656:	b5 95       	asr	r27
     658:	a7 95       	ror	r26
     65a:	97 95       	ror	r25
     65c:	87 95       	ror	r24
     65e:	16 94       	lsr	r1
     660:	d1 f7       	brne	.-12     	; 0x656 <_ZN6BME28019convert_temperatureEv+0x4e>
     662:	44 0f       	add	r20, r20
     664:	55 1f       	adc	r21, r21
     666:	66 1f       	adc	r22, r22
     668:	77 1f       	adc	r23, r23
     66a:	7c 01       	movw	r14, r24
     66c:	8d 01       	movw	r16, r26
     66e:	e4 1a       	sub	r14, r20
     670:	f5 0a       	sbc	r15, r21
     672:	06 0b       	sbc	r16, r22
     674:	17 0b       	sbc	r17, r23
     676:	a8 01       	movw	r20, r16
     678:	97 01       	movw	r18, r14
     67a:	a4 8d       	ldd	r26, Z+28	; 0x1c
     67c:	b5 8d       	ldd	r27, Z+29	; 0x1d
     67e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__mulshisi3>
		 ((int32_t)cal.dig_T2)) >> 11;
     682:	6b 01       	movw	r12, r22
     684:	7c 01       	movw	r14, r24
     686:	0b 2e       	mov	r0, r27
     688:	bb e0       	ldi	r27, 0x0B	; 11
     68a:	f5 94       	asr	r15
     68c:	e7 94       	ror	r14
     68e:	d7 94       	ror	r13
     690:	c7 94       	ror	r12
     692:	ba 95       	dec	r27
     694:	d1 f7       	brne	.-12     	; 0x68a <_ZN6BME28019convert_temperatureEv+0x82>
     696:	b0 2d       	mov	r27, r0
	
	/* calculate x2 */
	var2 =	(((((raw_temp>>4) - ((int32_t)cal.dig_T1)) *
     698:	a5 01       	movw	r20, r10
     69a:	94 01       	movw	r18, r8
     69c:	c5 01       	movw	r24, r10
     69e:	b4 01       	movw	r22, r8
     6a0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__mulsi3>
			   ((raw_temp>>4) - ((int32_t)cal.dig_T1))) >> 12) *
     6a4:	9b 01       	movw	r18, r22
     6a6:	ac 01       	movw	r20, r24
     6a8:	01 2e       	mov	r0, r17
     6aa:	1c e0       	ldi	r17, 0x0C	; 12
     6ac:	55 95       	asr	r21
     6ae:	47 95       	ror	r20
     6b0:	37 95       	ror	r19
     6b2:	27 95       	ror	r18
     6b4:	1a 95       	dec	r17
     6b6:	d1 f7       	brne	.-12     	; 0x6ac <_ZN6BME28019convert_temperatureEv+0xa4>
     6b8:	10 2d       	mov	r17, r0
     6ba:	a6 8d       	ldd	r26, Z+30	; 0x1e
     6bc:	b7 8d       	ldd	r27, Z+31	; 0x1f
     6be:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__mulshisi3>
			((int32_t)cal.dig_T3)) >> 14;
     6c2:	ab 01       	movw	r20, r22
     6c4:	bc 01       	movw	r22, r24
     6c6:	03 2e       	mov	r0, r19
     6c8:	3e e0       	ldi	r19, 0x0E	; 14
     6ca:	75 95       	asr	r23
     6cc:	67 95       	ror	r22
     6ce:	57 95       	ror	r21
     6d0:	47 95       	ror	r20
     6d2:	3a 95       	dec	r19
     6d4:	d1 f7       	brne	.-12     	; 0x6ca <_ZN6BME28019convert_temperatureEv+0xc2>
     6d6:	30 2d       	mov	r19, r0
	
	cal.t_fine = var1 + var2;
     6d8:	d7 01       	movw	r26, r14
     6da:	c6 01       	movw	r24, r12
     6dc:	84 0f       	add	r24, r20
     6de:	95 1f       	adc	r25, r21
     6e0:	a6 1f       	adc	r26, r22
     6e2:	b7 1f       	adc	r27, r23
     6e4:	83 af       	std	Z+59, r24	; 0x3b
     6e6:	94 af       	std	Z+60, r25	; 0x3c
     6e8:	a5 af       	std	Z+61, r26	; 0x3d
     6ea:	b6 af       	std	Z+62, r27	; 0x3e
	
	return ((cal.t_fine * 5 + 128) >> 8);
     6ec:	6c 01       	movw	r12, r24
     6ee:	7d 01       	movw	r14, r26
     6f0:	cc 0c       	add	r12, r12
     6f2:	dd 1c       	adc	r13, r13
     6f4:	ee 1c       	adc	r14, r14
     6f6:	ff 1c       	adc	r15, r15
     6f8:	cc 0c       	add	r12, r12
     6fa:	dd 1c       	adc	r13, r13
     6fc:	ee 1c       	adc	r14, r14
     6fe:	ff 1c       	adc	r15, r15
     700:	8c 0d       	add	r24, r12
     702:	9d 1d       	adc	r25, r13
     704:	ae 1d       	adc	r26, r14
     706:	bf 1d       	adc	r27, r15
     708:	80 58       	subi	r24, 0x80	; 128
     70a:	9f 4f       	sbci	r25, 0xFF	; 255
     70c:	af 4f       	sbci	r26, 0xFF	; 255
     70e:	bf 4f       	sbci	r27, 0xFF	; 255
     710:	69 2f       	mov	r22, r25
     712:	7a 2f       	mov	r23, r26
     714:	8b 2f       	mov	r24, r27
     716:	99 27       	eor	r25, r25
     718:	87 fd       	sbrc	r24, 7
     71a:	9a 95       	dec	r25
}
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	ff 90       	pop	r15
     722:	ef 90       	pop	r14
     724:	df 90       	pop	r13
     726:	cf 90       	pop	r12
     728:	bf 90       	pop	r11
     72a:	af 90       	pop	r10
     72c:	9f 90       	pop	r9
     72e:	8f 90       	pop	r8
     730:	08 95       	ret

00000732 <_ZN6BME28016convert_humidityEv>:
 * Return:		uint32_t - the human-readable humidity reading accurate to 3
 *							decimal places in %rH where 42313 represents
 *							42313 / 1024 = 41.321 %rH
 ****************************************************************************/
uint32_t BME280::convert_humidity (void)
{
     732:	4f 92       	push	r4
     734:	5f 92       	push	r5
     736:	6f 92       	push	r6
     738:	7f 92       	push	r7
     73a:	8f 92       	push	r8
     73c:	9f 92       	push	r9
     73e:	af 92       	push	r10
     740:	bf 92       	push	r11
     742:	cf 92       	push	r12
     744:	df 92       	push	r13
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	fc 01       	movw	r30, r24
	int32_t var1 = 0;
	
	/* Utilize t_fine calculation */
	var1 = (cal.t_fine - ((int32_t)76800));
     74c:	83 ac       	ldd	r8, Z+59	; 0x3b
     74e:	94 ac       	ldd	r9, Z+60	; 0x3c
     750:	a5 ac       	ldd	r10, Z+61	; 0x3d
     752:	b6 ac       	ldd	r11, Z+62	; 0x3e
     754:	2c e2       	ldi	r18, 0x2C	; 44
     756:	92 1a       	sub	r9, r18
     758:	21 e0       	ldi	r18, 0x01	; 1
     75a:	a2 0a       	sbc	r10, r18
     75c:	b1 08       	sbc	r11, r1
	
	/* Calculate x1 - part	 */
	var1 =	(((((raw_hum << 14) - (((int32_t)cal.dig_H4) << 20) -
     75e:	84 85       	ldd	r24, Z+12	; 0x0c
     760:	c1 2c       	mov	r12, r1
     762:	d1 2c       	mov	r13, r1
     764:	d8 2e       	mov	r13, r24
     766:	dd 0c       	add	r13, r13
     768:	dd 0c       	add	r13, r13
     76a:	dd 0c       	add	r13, r13
     76c:	dd 0c       	add	r13, r13
     76e:	dd 0c       	add	r13, r13
     770:	dd 0c       	add	r13, r13
     772:	0d 2c       	mov	r0, r13
     774:	00 0c       	add	r0, r0
     776:	ee 08       	sbc	r14, r14
     778:	ff 08       	sbc	r15, r15
     77a:	86 a9       	ldd	r24, Z+54	; 0x36
     77c:	97 a9       	ldd	r25, Z+55	; 0x37
     77e:	09 2e       	mov	r0, r25
     780:	00 0c       	add	r0, r0
     782:	aa 0b       	sbc	r26, r26
     784:	bb 0b       	sbc	r27, r27
     786:	07 2e       	mov	r0, r23
     788:	74 e1       	ldi	r23, 0x14	; 20
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	aa 1f       	adc	r26, r26
     790:	bb 1f       	adc	r27, r27
     792:	7a 95       	dec	r23
     794:	d1 f7       	brne	.-12     	; 0x78a <_ZN6BME28016convert_humidityEv+0x58>
     796:	70 2d       	mov	r23, r0
     798:	c8 1a       	sub	r12, r24
     79a:	d9 0a       	sbc	r13, r25
     79c:	ea 0a       	sbc	r14, r26
     79e:	fb 0a       	sbc	r15, r27
				(((int32_t)cal.dig_H5) * var1)) + ((int32_t)16384)) >> 15) *
     7a0:	a0 ad       	ldd	r26, Z+56	; 0x38
     7a2:	b1 ad       	ldd	r27, Z+57	; 0x39
     7a4:	a5 01       	movw	r20, r10
     7a6:	94 01       	movw	r18, r8
     7a8:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__mulshisi3>
	
	/* Utilize t_fine calculation */
	var1 = (cal.t_fine - ((int32_t)76800));
	
	/* Calculate x1 - part	 */
	var1 =	(((((raw_hum << 14) - (((int32_t)cal.dig_H4) << 20) -
     7ac:	c6 1a       	sub	r12, r22
     7ae:	d7 0a       	sbc	r13, r23
     7b0:	e8 0a       	sbc	r14, r24
     7b2:	f9 0a       	sbc	r15, r25
				(((int32_t)cal.dig_H5) * var1)) + ((int32_t)16384)) >> 15) *
     7b4:	30 e4       	ldi	r19, 0x40	; 64
     7b6:	d3 0e       	add	r13, r19
     7b8:	e1 1c       	adc	r14, r1
     7ba:	f1 1c       	adc	r15, r1
     7bc:	0b 2e       	mov	r0, r27
     7be:	bf e0       	ldi	r27, 0x0F	; 15
     7c0:	f5 94       	asr	r15
     7c2:	e7 94       	ror	r14
     7c4:	d7 94       	ror	r13
     7c6:	c7 94       	ror	r12
     7c8:	ba 95       	dec	r27
     7ca:	d1 f7       	brne	.-12     	; 0x7c0 <_ZN6BME28016convert_humidityEv+0x8e>
     7cc:	b0 2d       	mov	r27, r0
			 (((((((var1 * ((int32_t)cal.dig_H6)) >> 10) *
     7ce:	a2 ad       	ldd	r26, Z+58	; 0x3a
     7d0:	0a 2e       	mov	r0, r26
     7d2:	00 0c       	add	r0, r0
     7d4:	bb 0b       	sbc	r27, r27
     7d6:	a5 01       	movw	r20, r10
     7d8:	94 01       	movw	r18, r8
     7da:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__mulshisi3>
     7de:	2b 01       	movw	r4, r22
     7e0:	3c 01       	movw	r6, r24
     7e2:	03 2e       	mov	r0, r19
     7e4:	3a e0       	ldi	r19, 0x0A	; 10
     7e6:	75 94       	asr	r7
     7e8:	67 94       	ror	r6
     7ea:	57 94       	ror	r5
     7ec:	47 94       	ror	r4
     7ee:	3a 95       	dec	r19
     7f0:	d1 f7       	brne	.-12     	; 0x7e6 <_ZN6BME28016convert_humidityEv+0xb4>
     7f2:	30 2d       	mov	r19, r0
				  (((var1 * ((int32_t)cal.dig_H3)) >> 11)
     7f4:	a5 a9       	ldd	r26, Z+53	; 0x35
     7f6:	b0 e0       	ldi	r27, 0x00	; 0
     7f8:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__muluhisi3>
     7fc:	dc 01       	movw	r26, r24
     7fe:	cb 01       	movw	r24, r22
     800:	07 2e       	mov	r0, r23
     802:	7b e0       	ldi	r23, 0x0B	; 11
     804:	b5 95       	asr	r27
     806:	a7 95       	ror	r26
     808:	97 95       	ror	r25
     80a:	87 95       	ror	r24
     80c:	7a 95       	dec	r23
     80e:	d1 f7       	brne	.-12     	; 0x804 <_ZN6BME28016convert_humidityEv+0xd2>
     810:	70 2d       	mov	r23, r0
				   + ((int32_t)32768))) >> 10) +	
     812:	bc 01       	movw	r22, r24
     814:	cd 01       	movw	r24, r26
     816:	70 58       	subi	r23, 0x80	; 128
     818:	8f 4f       	sbci	r24, 0xFF	; 255
     81a:	9f 4f       	sbci	r25, 0xFF	; 255
	var1 = (cal.t_fine - ((int32_t)76800));
	
	/* Calculate x1 - part	 */
	var1 =	(((((raw_hum << 14) - (((int32_t)cal.dig_H4) << 20) -
				(((int32_t)cal.dig_H5) * var1)) + ((int32_t)16384)) >> 15) *
			 (((((((var1 * ((int32_t)cal.dig_H6)) >> 10) *
     81c:	a3 01       	movw	r20, r6
     81e:	92 01       	movw	r18, r4
     820:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__mulsi3>
				  (((var1 * ((int32_t)cal.dig_H3)) >> 11)
				   + ((int32_t)32768))) >> 10) +	
     824:	dc 01       	movw	r26, r24
     826:	cb 01       	movw	r24, r22
     828:	07 2e       	mov	r0, r23
     82a:	7a e0       	ldi	r23, 0x0A	; 10
     82c:	b5 95       	asr	r27
     82e:	a7 95       	ror	r26
     830:	97 95       	ror	r25
     832:	87 95       	ror	r24
     834:	7a 95       	dec	r23
     836:	d1 f7       	brne	.-12     	; 0x82c <_ZN6BME28016convert_humidityEv+0xfa>
     838:	70 2d       	mov	r23, r0
     83a:	9c 01       	movw	r18, r24
     83c:	ad 01       	movw	r20, r26
     83e:	40 5e       	subi	r20, 0xE0	; 224
     840:	5f 4f       	sbci	r21, 0xFF	; 255
				((int32_t)2097152)) * ((int32_t)cal.dig_H2) + 8192) >> 14));
     842:	a3 a9       	ldd	r26, Z+51	; 0x33
     844:	b4 a9       	ldd	r27, Z+52	; 0x34
     846:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__mulshisi3>
     84a:	dc 01       	movw	r26, r24
     84c:	cb 01       	movw	r24, r22
     84e:	90 5e       	subi	r25, 0xE0	; 224
     850:	af 4f       	sbci	r26, 0xFF	; 255
     852:	bf 4f       	sbci	r27, 0xFF	; 255
     854:	bc 01       	movw	r22, r24
     856:	cd 01       	movw	r24, r26
     858:	05 2e       	mov	r0, r21
     85a:	5e e0       	ldi	r21, 0x0E	; 14
     85c:	95 95       	asr	r25
     85e:	87 95       	ror	r24
     860:	77 95       	ror	r23
     862:	67 95       	ror	r22
     864:	5a 95       	dec	r21
     866:	d1 f7       	brne	.-12     	; 0x85c <_ZN6BME28016convert_humidityEv+0x12a>
     868:	50 2d       	mov	r21, r0
     86a:	a7 01       	movw	r20, r14
     86c:	96 01       	movw	r18, r12
     86e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__mulsi3>
     872:	6b 01       	movw	r12, r22
     874:	7c 01       	movw	r14, r24
	
	/* Calculate x1 - part 2 */
	var1 =	(var1 - (((((var1 >> 15) * (var1 >> 15)) >> 7)
     876:	05 2e       	mov	r0, r21
     878:	5f e0       	ldi	r21, 0x0F	; 15
     87a:	95 95       	asr	r25
     87c:	87 95       	ror	r24
     87e:	77 95       	ror	r23
     880:	67 95       	ror	r22
     882:	5a 95       	dec	r21
     884:	d1 f7       	brne	.-12     	; 0x87a <_ZN6BME28016convert_humidityEv+0x148>
     886:	50 2d       	mov	r21, r0
     888:	9b 01       	movw	r18, r22
     88a:	ac 01       	movw	r20, r24
     88c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__mulsi3>
     890:	9b 01       	movw	r18, r22
     892:	ac 01       	movw	r20, r24
     894:	68 94       	set
     896:	16 f8       	bld	r1, 6
     898:	55 95       	asr	r21
     89a:	47 95       	ror	r20
     89c:	37 95       	ror	r19
     89e:	27 95       	ror	r18
     8a0:	16 94       	lsr	r1
     8a2:	d1 f7       	brne	.-12     	; 0x898 <_ZN6BME28016convert_humidityEv+0x166>
			 * ((int32_t)cal.dig_H1)) >> 4));
     8a4:	a2 a9       	ldd	r26, Z+50	; 0x32
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__muluhisi3>
     8ac:	dc 01       	movw	r26, r24
     8ae:	cb 01       	movw	r24, r22
     8b0:	68 94       	set
     8b2:	13 f8       	bld	r1, 3
     8b4:	b5 95       	asr	r27
     8b6:	a7 95       	ror	r26
     8b8:	97 95       	ror	r25
     8ba:	87 95       	ror	r24
     8bc:	16 94       	lsr	r1
     8be:	d1 f7       	brne	.-12     	; 0x8b4 <_ZN6BME28016convert_humidityEv+0x182>
	
	/* Check boundaries */
	var1 = (var1 < 0) ? 0 : ((var1 > 419430400) ? 419430400 : var1);
     8c0:	a7 01       	movw	r20, r14
     8c2:	96 01       	movw	r18, r12
     8c4:	28 1b       	sub	r18, r24
     8c6:	39 0b       	sbc	r19, r25
     8c8:	4a 0b       	sbc	r20, r26
     8ca:	5b 0b       	sbc	r21, r27
     8cc:	da 01       	movw	r26, r20
     8ce:	c9 01       	movw	r24, r18
     8d0:	81 30       	cpi	r24, 0x01	; 1
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	39 e1       	ldi	r19, 0x19	; 25
     8d8:	b3 07       	cpc	r27, r19
     8da:	24 f0       	brlt	.+8      	; 0x8e4 <_ZN6BME28016convert_humidityEv+0x1b2>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b9 e1       	ldi	r27, 0x19	; 25
     8e4:	bb 23       	and	r27, r27
     8e6:	1c f4       	brge	.+6      	; 0x8ee <_ZN6BME28016convert_humidityEv+0x1bc>
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	dc 01       	movw	r26, r24
	
	return (uint32_t)(var1 >> 12);
     8ee:	bc 01       	movw	r22, r24
     8f0:	cd 01       	movw	r24, r26
     8f2:	05 2e       	mov	r0, r21
     8f4:	5c e0       	ldi	r21, 0x0C	; 12
     8f6:	95 95       	asr	r25
     8f8:	87 95       	ror	r24
     8fa:	77 95       	ror	r23
     8fc:	67 95       	ror	r22
     8fe:	5a 95       	dec	r21
     900:	d1 f7       	brne	.-12     	; 0x8f6 <_ZN6BME28016convert_humidityEv+0x1c4>
     902:	50 2d       	mov	r21, r0
}
     904:	ff 90       	pop	r15
     906:	ef 90       	pop	r14
     908:	df 90       	pop	r13
     90a:	cf 90       	pop	r12
     90c:	bf 90       	pop	r11
     90e:	af 90       	pop	r10
     910:	9f 90       	pop	r9
     912:	8f 90       	pop	r8
     914:	7f 90       	pop	r7
     916:	6f 90       	pop	r6
     918:	5f 90       	pop	r5
     91a:	4f 90       	pop	r4
     91c:	08 95       	ret

0000091e <_ZN6BME2809read_dataEv>:
 * 
 * Return:		bool - the status of the operation (false = success,
 *													true = failure)
 ****************************************************************************/
bool BME280::read_data (void)
{
     91e:	df 92       	push	r13
     920:	ef 92       	push	r14
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	28 97       	sbiw	r28, 0x08	; 8
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	de bf       	out	0x3e, r29	; 62
     938:	0f be       	out	0x3f, r0	; 63
     93a:	cd bf       	out	0x3d, r28	; 61
     93c:	7c 01       	movw	r14, r24
	uint8_t data[NUM_DATA_REG];		// array to hold all of raw data from read
	
	// read in the data from the registers
	if (p_i2c->read(BME280_ADDR, BME280_P_RAW_MSB, data, NUM_DATA_REG))
     93e:	08 e0       	ldi	r16, 0x08	; 8
     940:	9e 01       	movw	r18, r28
     942:	2f 5f       	subi	r18, 0xFF	; 255
     944:	3f 4f       	sbci	r19, 0xFF	; 255
     946:	47 ef       	ldi	r20, 0xF7	; 247
     948:	6e ee       	ldi	r22, 0xEE	; 238
     94a:	fc 01       	movw	r30, r24
     94c:	80 81       	ld	r24, Z
     94e:	91 81       	ldd	r25, Z+1	; 0x01
     950:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <_ZN3i2c4readEhhPhh>
     954:	d8 2e       	mov	r13, r24
     956:	88 23       	and	r24, r24
     958:	89 f0       	breq	.+34     	; 0x97c <_ZN6BME2809read_dataEv+0x5e>
	{
		// There was an error in the read operation, propagate this message
		DBG(this->p_serial, "BME280::read_data FAILED to read data registers\r\n");
     95a:	82 e3       	ldi	r24, 0x32	; 50
     95c:	e2 e3       	ldi	r30, 0x32	; 50
     95e:	f1 e0       	ldi	r31, 0x01	; 1
     960:	a9 ef       	ldi	r26, 0xF9	; 249
     962:	b4 e0       	ldi	r27, 0x04	; 4
     964:	01 90       	ld	r0, Z+
     966:	0d 92       	st	X+, r0
     968:	8a 95       	dec	r24
     96a:	e1 f7       	brne	.-8      	; 0x964 <_ZN6BME2809read_dataEv+0x46>
     96c:	69 ef       	ldi	r22, 0xF9	; 249
     96e:	74 e0       	ldi	r23, 0x04	; 4
     970:	f7 01       	movw	r30, r14
     972:	82 81       	ldd	r24, Z+2	; 0x02
     974:	93 81       	ldd	r25, Z+3	; 0x03
     976:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
		return true;
     97a:	7b c0       	rjmp	.+246    	; 0xa72 <_ZN6BME2809read_dataEv+0x154>
	}
	
	// store data in class variables
	raw_pres = (int32_t)(
						((uint32_t)data[NDX_P_MSB]  << P_T_MSB_SHIFT)
						| ((uint32_t)data[NDX_P_LSB]  << P_T_LSB_SHIFT)
     97c:	8a 81       	ldd	r24, Y+2	; 0x02
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	a0 e0       	ldi	r26, 0x00	; 0
     982:	b0 e0       	ldi	r27, 0x00	; 0
     984:	88 0f       	add	r24, r24
     986:	99 1f       	adc	r25, r25
     988:	aa 1f       	adc	r26, r26
     98a:	bb 1f       	adc	r27, r27
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	aa 1f       	adc	r26, r26
     992:	bb 1f       	adc	r27, r27
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	aa 1f       	adc	r26, r26
     99a:	bb 1f       	adc	r27, r27
     99c:	88 0f       	add	r24, r24
     99e:	99 1f       	adc	r25, r25
     9a0:	aa 1f       	adc	r26, r26
     9a2:	bb 1f       	adc	r27, r27
		return true;
	}
	
	// store data in class variables
	raw_pres = (int32_t)(
						((uint32_t)data[NDX_P_MSB]  << P_T_MSB_SHIFT)
     9a4:	49 81       	ldd	r20, Y+1	; 0x01
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	03 2e       	mov	r0, r19
     9ae:	3c e0       	ldi	r19, 0x0C	; 12
     9b0:	44 0f       	add	r20, r20
     9b2:	55 1f       	adc	r21, r21
     9b4:	66 1f       	adc	r22, r22
     9b6:	77 1f       	adc	r23, r23
     9b8:	3a 95       	dec	r19
     9ba:	d1 f7       	brne	.-12     	; 0x9b0 <_ZN6BME2809read_dataEv+0x92>
     9bc:	30 2d       	mov	r19, r0
						| ((uint32_t)data[NDX_P_LSB]  << P_T_LSB_SHIFT)
     9be:	84 2b       	or	r24, r20
     9c0:	95 2b       	or	r25, r21
     9c2:	a6 2b       	or	r26, r22
     9c4:	b7 2b       	or	r27, r23
						| (((uint32_t)data[NDX_P_XLSB] >> P_T_XLSB_SHIFT) & 0x0F)
     9c6:	2b 81       	ldd	r18, Y+3	; 0x03
     9c8:	22 95       	swap	r18
     9ca:	2f 70       	andi	r18, 0x0F	; 15
     9cc:	82 2b       	or	r24, r18
						);
     9ce:	f7 01       	movw	r30, r14
     9d0:	84 83       	std	Z+4, r24	; 0x04
     9d2:	95 83       	std	Z+5, r25	; 0x05
     9d4:	a6 83       	std	Z+6, r26	; 0x06
     9d6:	b7 83       	std	Z+7, r27	; 0x07
	
	raw_temp = (int32_t)(
						((uint32_t)data[NDX_T_MSB]  << P_T_MSB_SHIFT)
						| ((uint32_t)data[NDX_T_LSB]  << P_T_LSB_SHIFT)
     9d8:	4d 81       	ldd	r20, Y+5	; 0x05
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	44 0f       	add	r20, r20
     9e2:	55 1f       	adc	r21, r21
     9e4:	66 1f       	adc	r22, r22
     9e6:	77 1f       	adc	r23, r23
     9e8:	44 0f       	add	r20, r20
     9ea:	55 1f       	adc	r21, r21
     9ec:	66 1f       	adc	r22, r22
     9ee:	77 1f       	adc	r23, r23
     9f0:	44 0f       	add	r20, r20
     9f2:	55 1f       	adc	r21, r21
     9f4:	66 1f       	adc	r22, r22
     9f6:	77 1f       	adc	r23, r23
     9f8:	44 0f       	add	r20, r20
     9fa:	55 1f       	adc	r21, r21
     9fc:	66 1f       	adc	r22, r22
     9fe:	77 1f       	adc	r23, r23
						| ((uint32_t)data[NDX_P_LSB]  << P_T_LSB_SHIFT)
						| (((uint32_t)data[NDX_P_XLSB] >> P_T_XLSB_SHIFT) & 0x0F)
						);
	
	raw_temp = (int32_t)(
						((uint32_t)data[NDX_T_MSB]  << P_T_MSB_SHIFT)
     a00:	0c 81       	ldd	r16, Y+4	; 0x04
     a02:	10 e0       	ldi	r17, 0x00	; 0
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	0f 2e       	mov	r0, r31
     a0a:	fc e0       	ldi	r31, 0x0C	; 12
     a0c:	00 0f       	add	r16, r16
     a0e:	11 1f       	adc	r17, r17
     a10:	22 1f       	adc	r18, r18
     a12:	33 1f       	adc	r19, r19
     a14:	fa 95       	dec	r31
     a16:	d1 f7       	brne	.-12     	; 0xa0c <_ZN6BME2809read_dataEv+0xee>
     a18:	f0 2d       	mov	r31, r0
						| ((uint32_t)data[NDX_T_LSB]  << P_T_LSB_SHIFT)
     a1a:	40 2b       	or	r20, r16
     a1c:	51 2b       	or	r21, r17
     a1e:	62 2b       	or	r22, r18
     a20:	73 2b       	or	r23, r19
						| (((uint32_t)data[NDX_T_XLSB] >> P_T_XLSB_SHIFT) & 0x0F)
     a22:	8e 81       	ldd	r24, Y+6	; 0x06
     a24:	82 95       	swap	r24
     a26:	8f 70       	andi	r24, 0x0F	; 15
     a28:	48 2b       	or	r20, r24
						);
     a2a:	40 87       	std	Z+8, r20	; 0x08
     a2c:	51 87       	std	Z+9, r21	; 0x09
     a2e:	62 87       	std	Z+10, r22	; 0x0a
     a30:	73 87       	std	Z+11, r23	; 0x0b
			  
	raw_hum  = (int32_t)(
						((uint32_t)data[NDX_H_MSB] << BYTE_SHIFT)
						| ((uint32_t)data[NDX_H_LSB])
						);
     a32:	8f 81       	ldd	r24, Y+7	; 0x07
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	98 2f       	mov	r25, r24
     a38:	88 27       	eor	r24, r24
     a3a:	28 85       	ldd	r18, Y+8	; 0x08
     a3c:	82 2b       	or	r24, r18
     a3e:	95 87       	std	Z+13, r25	; 0x0d
     a40:	84 87       	std	Z+12, r24	; 0x0c
	
	// convert the raw values into human readable format
	pressure = convert_pressure();
     a42:	c7 01       	movw	r24, r14
     a44:	0e 94 72 00 	call	0xe4	; 0xe4 <_ZN6BME28016convert_pressureEv>
     a48:	f7 01       	movw	r30, r14
     a4a:	66 87       	std	Z+14, r22	; 0x0e
     a4c:	77 87       	std	Z+15, r23	; 0x0f
     a4e:	80 8b       	std	Z+16, r24	; 0x10
     a50:	91 8b       	std	Z+17, r25	; 0x11
	temperature = convert_temperature();
     a52:	c7 01       	movw	r24, r14
     a54:	0e 94 04 03 	call	0x608	; 0x608 <_ZN6BME28019convert_temperatureEv>
     a58:	f7 01       	movw	r30, r14
     a5a:	62 8b       	std	Z+18, r22	; 0x12
     a5c:	73 8b       	std	Z+19, r23	; 0x13
     a5e:	84 8b       	std	Z+20, r24	; 0x14
     a60:	95 8b       	std	Z+21, r25	; 0x15
	humidity = convert_humidity();
     a62:	c7 01       	movw	r24, r14
     a64:	0e 94 99 03 	call	0x732	; 0x732 <_ZN6BME28016convert_humidityEv>
     a68:	f7 01       	movw	r30, r14
     a6a:	66 8b       	std	Z+22, r22	; 0x16
     a6c:	77 8b       	std	Z+23, r23	; 0x17
     a6e:	80 8f       	std	Z+24, r24	; 0x18
     a70:	91 8f       	std	Z+25, r25	; 0x19
	
	return false;
}
     a72:	8d 2d       	mov	r24, r13
     a74:	28 96       	adiw	r28, 0x08	; 8
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	de bf       	out	0x3e, r29	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	cd bf       	out	0x3d, r28	; 61
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	08 95       	ret

00000a90 <_ZN6BME2808read_calEv>:
 * 
 * Return:		bool - the status of the operation (false = success,
 *													true = failure)
 ****************************************************************************/
bool BME280::read_cal (void)
{
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	cd b7       	in	r28, 0x3d	; 61
     a9c:	de b7       	in	r29, 0x3e	; 62
     a9e:	a1 97       	sbiw	r28, 0x21	; 33
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	f8 94       	cli
     aa4:	de bf       	out	0x3e, r29	; 62
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	cd bf       	out	0x3d, r28	; 61
     aaa:	7c 01       	movw	r14, r24
	uint8_t data1[BME280_CAL_RNG_1];	// hold calibration data from range 1
	uint8_t data2[BME280_CAL_RNG_2];	// hold calibration data from range 2
	
	if (p_i2c->read(BME280_ADDR, BME280_CAL_START_1, data1, BME280_CAL_RNG_1)
     aac:	0a e1       	ldi	r16, 0x1A	; 26
     aae:	9e 01       	movw	r18, r28
     ab0:	2f 5f       	subi	r18, 0xFF	; 255
     ab2:	3f 4f       	sbci	r19, 0xFF	; 255
     ab4:	48 e8       	ldi	r20, 0x88	; 136
     ab6:	6e ee       	ldi	r22, 0xEE	; 238
     ab8:	fc 01       	movw	r30, r24
     aba:	80 81       	ld	r24, Z
     abc:	91 81       	ldd	r25, Z+1	; 0x01
     abe:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <_ZN3i2c4readEhhPhh>
	 || p_i2c->read(BME280_ADDR, BME280_CAL_START_2, data2, BME280_CAL_RNG_2))
     ac2:	81 11       	cpse	r24, r1
     ac4:	0d c0       	rjmp	.+26     	; 0xae0 <_ZN6BME2808read_calEv+0x50>
     ac6:	07 e0       	ldi	r16, 0x07	; 7
     ac8:	9e 01       	movw	r18, r28
     aca:	25 5e       	subi	r18, 0xE5	; 229
     acc:	3f 4f       	sbci	r19, 0xFF	; 255
     ace:	41 ee       	ldi	r20, 0xE1	; 225
     ad0:	6e ee       	ldi	r22, 0xEE	; 238
     ad2:	f7 01       	movw	r30, r14
     ad4:	80 81       	ld	r24, Z
     ad6:	91 81       	ldd	r25, Z+1	; 0x01
     ad8:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <_ZN3i2c4readEhhPhh>
bool BME280::read_cal (void)
{
	uint8_t data1[BME280_CAL_RNG_1];	// hold calibration data from range 1
	uint8_t data2[BME280_CAL_RNG_2];	// hold calibration data from range 2
	
	if (p_i2c->read(BME280_ADDR, BME280_CAL_START_1, data1, BME280_CAL_RNG_1)
     adc:	88 23       	and	r24, r24
     ade:	91 f0       	breq	.+36     	; 0xb04 <_ZN6BME2808read_calEv+0x74>
	 || p_i2c->read(BME280_ADDR, BME280_CAL_START_2, data2, BME280_CAL_RNG_2))
	{
		// There was an error in the read operation, propagate this message
		DBG(this->p_serial, "BME280::read_cal FAILED to read cal reigsters\r\n");
     ae0:	80 e3       	ldi	r24, 0x30	; 48
     ae2:	e4 e6       	ldi	r30, 0x64	; 100
     ae4:	f1 e0       	ldi	r31, 0x01	; 1
     ae6:	a9 ef       	ldi	r26, 0xF9	; 249
     ae8:	b4 e0       	ldi	r27, 0x04	; 4
     aea:	01 90       	ld	r0, Z+
     aec:	0d 92       	st	X+, r0
     aee:	8a 95       	dec	r24
     af0:	e1 f7       	brne	.-8      	; 0xaea <_ZN6BME2808read_calEv+0x5a>
     af2:	69 ef       	ldi	r22, 0xF9	; 249
     af4:	74 e0       	ldi	r23, 0x04	; 4
     af6:	f7 01       	movw	r30, r14
     af8:	82 81       	ldd	r24, Z+2	; 0x02
     afa:	93 81       	ldd	r25, Z+3	; 0x03
     afc:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
		return true;
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	86 c0       	rjmp	.+268    	; 0xc10 <_ZN6BME2808read_calEv+0x180>
	}
	
	cal.dig_T1 = (uint16_t)(((uint16_t)data1[CAL_DIG_T1_MSB] << BYTE_SHIFT)
     b04:	2a 81       	ldd	r18, Y+2	; 0x02
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	32 2f       	mov	r19, r18
     b0a:	22 27       	eor	r18, r18
							| data1[CAL_DIG_T1_LSB]);
     b0c:	99 81       	ldd	r25, Y+1	; 0x01
     b0e:	29 2b       	or	r18, r25
     b10:	f7 01       	movw	r30, r14
     b12:	33 8f       	std	Z+27, r19	; 0x1b
     b14:	22 8f       	std	Z+26, r18	; 0x1a
	cal.dig_T2 = (int16_t)(((uint16_t)data1[CAL_DIG_T2_MSB] << BYTE_SHIFT)
     b16:	2c 81       	ldd	r18, Y+4	; 0x04
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	32 2f       	mov	r19, r18
     b1c:	22 27       	eor	r18, r18
							| data1[CAL_DIG_T2_LSB]);
     b1e:	9b 81       	ldd	r25, Y+3	; 0x03
     b20:	29 2b       	or	r18, r25
     b22:	35 8f       	std	Z+29, r19	; 0x1d
     b24:	24 8f       	std	Z+28, r18	; 0x1c
	cal.dig_T3 = (int16_t)(((uint16_t)data1[CAL_DIG_T3_MSB] << BYTE_SHIFT)
     b26:	2e 81       	ldd	r18, Y+6	; 0x06
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	32 2f       	mov	r19, r18
     b2c:	22 27       	eor	r18, r18
							| data1[CAL_DIG_T3_LSB]);
     b2e:	9d 81       	ldd	r25, Y+5	; 0x05
     b30:	29 2b       	or	r18, r25
     b32:	37 8f       	std	Z+31, r19	; 0x1f
     b34:	26 8f       	std	Z+30, r18	; 0x1e
	
	cal.dig_P1 = (uint16_t)(((uint16_t)data1[CAL_DIG_P1_MSB] << BYTE_SHIFT)
     b36:	28 85       	ldd	r18, Y+8	; 0x08
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	32 2f       	mov	r19, r18
     b3c:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P1_LSB]);
     b3e:	9f 81       	ldd	r25, Y+7	; 0x07
     b40:	29 2b       	or	r18, r25
     b42:	31 a3       	std	Z+33, r19	; 0x21
     b44:	20 a3       	std	Z+32, r18	; 0x20
	cal.dig_P2 = (int16_t)(((uint16_t)data1[CAL_DIG_P2_MSB] << BYTE_SHIFT)
     b46:	2a 85       	ldd	r18, Y+10	; 0x0a
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	32 2f       	mov	r19, r18
     b4c:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P2_LSB]);
     b4e:	99 85       	ldd	r25, Y+9	; 0x09
     b50:	29 2b       	or	r18, r25
     b52:	33 a3       	std	Z+35, r19	; 0x23
     b54:	22 a3       	std	Z+34, r18	; 0x22
	cal.dig_P3 = (int16_t)(((uint16_t)data1[CAL_DIG_P3_MSB] << BYTE_SHIFT)
     b56:	2c 85       	ldd	r18, Y+12	; 0x0c
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	32 2f       	mov	r19, r18
     b5c:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P3_LSB]);
     b5e:	9b 85       	ldd	r25, Y+11	; 0x0b
     b60:	29 2b       	or	r18, r25
     b62:	35 a3       	std	Z+37, r19	; 0x25
     b64:	24 a3       	std	Z+36, r18	; 0x24
	cal.dig_P4 = (int16_t)(((uint16_t)data1[CAL_DIG_P4_MSB] << BYTE_SHIFT)
     b66:	2e 85       	ldd	r18, Y+14	; 0x0e
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	32 2f       	mov	r19, r18
     b6c:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P4_LSB]);
     b6e:	9d 85       	ldd	r25, Y+13	; 0x0d
     b70:	29 2b       	or	r18, r25
     b72:	37 a3       	std	Z+39, r19	; 0x27
     b74:	26 a3       	std	Z+38, r18	; 0x26
	cal.dig_P5 = (int16_t)(((uint16_t)data1[CAL_DIG_P5_MSB] << BYTE_SHIFT)
     b76:	28 89       	ldd	r18, Y+16	; 0x10
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	32 2f       	mov	r19, r18
     b7c:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P5_LSB]);
     b7e:	9f 85       	ldd	r25, Y+15	; 0x0f
     b80:	29 2b       	or	r18, r25
     b82:	31 a7       	std	Z+41, r19	; 0x29
     b84:	20 a7       	std	Z+40, r18	; 0x28
	cal.dig_P6 = (int16_t)(((uint16_t)data1[CAL_DIG_P6_MSB] << BYTE_SHIFT)
     b86:	2a 89       	ldd	r18, Y+18	; 0x12
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	32 2f       	mov	r19, r18
     b8c:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P6_LSB]);
     b8e:	99 89       	ldd	r25, Y+17	; 0x11
     b90:	29 2b       	or	r18, r25
     b92:	33 a7       	std	Z+43, r19	; 0x2b
     b94:	22 a7       	std	Z+42, r18	; 0x2a
	cal.dig_P7 = (int16_t)(((uint16_t)data1[CAL_DIG_P7_MSB] << BYTE_SHIFT)
     b96:	2c 89       	ldd	r18, Y+20	; 0x14
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	32 2f       	mov	r19, r18
     b9c:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P7_LSB]);
     b9e:	9b 89       	ldd	r25, Y+19	; 0x13
     ba0:	29 2b       	or	r18, r25
     ba2:	35 a7       	std	Z+45, r19	; 0x2d
     ba4:	24 a7       	std	Z+44, r18	; 0x2c
	cal.dig_P8 = (int16_t)(((uint16_t)data1[CAL_DIG_P8_MSB] << BYTE_SHIFT)
     ba6:	2e 89       	ldd	r18, Y+22	; 0x16
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	32 2f       	mov	r19, r18
     bac:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P8_LSB]);
     bae:	9d 89       	ldd	r25, Y+21	; 0x15
     bb0:	29 2b       	or	r18, r25
     bb2:	37 a7       	std	Z+47, r19	; 0x2f
     bb4:	26 a7       	std	Z+46, r18	; 0x2e
	cal.dig_P9 = (int16_t)(((uint16_t)data1[CAL_DIG_P9_MSB] << BYTE_SHIFT)
     bb6:	28 8d       	ldd	r18, Y+24	; 0x18
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	32 2f       	mov	r19, r18
     bbc:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P9_LSB]);
     bbe:	9f 89       	ldd	r25, Y+23	; 0x17
     bc0:	29 2b       	or	r18, r25
     bc2:	31 ab       	std	Z+49, r19	; 0x31
     bc4:	20 ab       	std	Z+48, r18	; 0x30
	
	cal.dig_H1 = (uint8_t)data1[CAL_DIG_H1_LSB];
     bc6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bc8:	92 ab       	std	Z+50, r25	; 0x32
	cal.dig_H2 = (int16_t)(((uint16_t)data2[CAL_DIG_H2_MSB] << BYTE_SHIFT)
     bca:	2c 8d       	ldd	r18, Y+28	; 0x1c
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	32 2f       	mov	r19, r18
     bd0:	22 27       	eor	r18, r18
							| data2[CAL_DIG_H2_LSB]);
     bd2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bd4:	29 2b       	or	r18, r25
     bd6:	34 ab       	std	Z+52, r19	; 0x34
     bd8:	23 ab       	std	Z+51, r18	; 0x33
	cal.dig_H3 = (uint8_t)data2[CAL_DIG_H3_LSB];
     bda:	9d 8d       	ldd	r25, Y+29	; 0x1d
     bdc:	95 ab       	std	Z+53, r25	; 0x35
	cal.dig_H4 = (int16_t)(((uint16_t)data2[CAL_DIG_H4_MSB] << NIB_SHIFT)
							| (data2[CAL_DIG_H4_LSB] & CAL_DIG_H_MSK));
     bde:	9f 8d       	ldd	r25, Y+31	; 0x1f
     be0:	49 2f       	mov	r20, r25
     be2:	4f 70       	andi	r20, 0x0F	; 15
	
	cal.dig_H1 = (uint8_t)data1[CAL_DIG_H1_LSB];
	cal.dig_H2 = (int16_t)(((uint16_t)data2[CAL_DIG_H2_MSB] << BYTE_SHIFT)
							| data2[CAL_DIG_H2_LSB]);
	cal.dig_H3 = (uint8_t)data2[CAL_DIG_H3_LSB];
	cal.dig_H4 = (int16_t)(((uint16_t)data2[CAL_DIG_H4_MSB] << NIB_SHIFT)
     be4:	2e 8d       	ldd	r18, Y+30	; 0x1e
     be6:	f0 e1       	ldi	r31, 0x10	; 16
     be8:	2f 9f       	mul	r18, r31
     bea:	90 01       	movw	r18, r0
     bec:	11 24       	eor	r1, r1
							| (data2[CAL_DIG_H4_LSB] & CAL_DIG_H_MSK));
     bee:	24 2b       	or	r18, r20
     bf0:	f7 01       	movw	r30, r14
     bf2:	37 ab       	std	Z+55, r19	; 0x37
     bf4:	26 ab       	std	Z+54, r18	; 0x36
	cal.dig_H5 = (int16_t)(((uint16_t)data2[CAL_DIG_H5_MSB] << NIB_SHIFT)
							| ((data2[CAL_DIG_H5_LSB] >> NIB_SHIFT) 
     bf6:	92 95       	swap	r25
     bf8:	9f 70       	andi	r25, 0x0F	; 15
	cal.dig_H2 = (int16_t)(((uint16_t)data2[CAL_DIG_H2_MSB] << BYTE_SHIFT)
							| data2[CAL_DIG_H2_LSB]);
	cal.dig_H3 = (uint8_t)data2[CAL_DIG_H3_LSB];
	cal.dig_H4 = (int16_t)(((uint16_t)data2[CAL_DIG_H4_MSB] << NIB_SHIFT)
							| (data2[CAL_DIG_H4_LSB] & CAL_DIG_H_MSK));
	cal.dig_H5 = (int16_t)(((uint16_t)data2[CAL_DIG_H5_MSB] << NIB_SHIFT)
     bfa:	28 a1       	ldd	r18, Y+32	; 0x20
     bfc:	f0 e1       	ldi	r31, 0x10	; 16
     bfe:	2f 9f       	mul	r18, r31
     c00:	90 01       	movw	r18, r0
     c02:	11 24       	eor	r1, r1
							| ((data2[CAL_DIG_H5_LSB] >> NIB_SHIFT) 
     c04:	29 2b       	or	r18, r25
								& CAL_DIG_H_MSK));
     c06:	f7 01       	movw	r30, r14
     c08:	31 af       	std	Z+57, r19	; 0x39
     c0a:	20 af       	std	Z+56, r18	; 0x38
	cal.dig_H6 = (int8_t)data2[CAL_DIG_H6_LSB];
     c0c:	99 a1       	ldd	r25, Y+33	; 0x21
     c0e:	92 af       	std	Z+58, r25	; 0x3a
	
	return false;
}
     c10:	a1 96       	adiw	r28, 0x21	; 33
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	0f 91       	pop	r16
     c22:	ff 90       	pop	r15
     c24:	ef 90       	pop	r14
     c26:	08 95       	ret

00000c28 <_ZN6BME280C1EP3i2cP6serial>:
 * Parameters:	ptr_i2c		- the i2c object to be used for communicating with
 *								the BME280 sensor
 *				ptr_serial	- the serial object to be used for debugging and
 *								communicating with the WiFi breakout 
 ****************************************************************************/
BME280::BME280 (i2c* ptr_i2c, serial *ptr_serial)
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	ec 01       	movw	r28, r24
     c2e:	cb 01       	movw	r24, r22
{
	p_i2c = ptr_i2c;		// store a local copy of the i2c pointer for use
     c30:	79 83       	std	Y+1, r23	; 0x01
     c32:	68 83       	st	Y, r22
	p_serial = ptr_serial;	// store a local copy of serial pointer for debug
     c34:	5b 83       	std	Y+3, r21	; 0x03
     c36:	4a 83       	std	Y+2, r20	; 0x02
	
	if (p_i2c->ping(BME280_ADDR))
     c38:	6e ee       	ldi	r22, 0xEE	; 238
     c3a:	0e 94 5f 08 	call	0x10be	; 0x10be <_ZN3i2c4pingEh>
     c3e:	88 23       	and	r24, r24
     c40:	f9 f0       	breq	.+62     	; 0xc80 <_ZN6BME280C1EP3i2cP6serial+0x58>
	{
		DBG(this->p_serial, "BME280 <0x%X> ALIVE\r\n", BME280_ADDR);
     c42:	1f 92       	push	r1
     c44:	8e ee       	ldi	r24, 0xEE	; 238
     c46:	8f 93       	push	r24
     c48:	84 e9       	ldi	r24, 0x94	; 148
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	9f 93       	push	r25
     c4e:	8f 93       	push	r24
     c50:	89 ef       	ldi	r24, 0xF9	; 249
     c52:	94 e0       	ldi	r25, 0x04	; 4
     c54:	9f 93       	push	r25
     c56:	8f 93       	push	r24
     c58:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <sprintf>
     c5c:	69 ef       	ldi	r22, 0xF9	; 249
     c5e:	74 e0       	ldi	r23, 0x04	; 4
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	9b 81       	ldd	r25, Y+3	; 0x03
     c64:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
	{
		DBG(this->p_serial, "BME280 <0x%X> DEAD\r\n", BME280_ADDR);
		return;
	}

	if(init())					// initializes the sensor registers
     c68:	ce 01       	movw	r24, r28
     c6a:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN6BME2804initEv>
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	88 23       	and	r24, r24
     c7c:	59 f1       	breq	.+86     	; 0xcd4 <_ZN6BME280C1EP3i2cP6serial+0xac>
     c7e:	1a c0       	rjmp	.+52     	; 0xcb4 <_ZN6BME280C1EP3i2cP6serial+0x8c>
	{
		DBG(this->p_serial, "BME280 <0x%X> ALIVE\r\n", BME280_ADDR);
	}
	else
	{
		DBG(this->p_serial, "BME280 <0x%X> DEAD\r\n", BME280_ADDR);
     c80:	1f 92       	push	r1
     c82:	8e ee       	ldi	r24, 0xEE	; 238
     c84:	8f 93       	push	r24
     c86:	8a ea       	ldi	r24, 0xAA	; 170
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	9f 93       	push	r25
     c8c:	8f 93       	push	r24
     c8e:	89 ef       	ldi	r24, 0xF9	; 249
     c90:	94 e0       	ldi	r25, 0x04	; 4
     c92:	9f 93       	push	r25
     c94:	8f 93       	push	r24
     c96:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <sprintf>
     c9a:	69 ef       	ldi	r22, 0xF9	; 249
     c9c:	74 e0       	ldi	r23, 0x04	; 4
     c9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ca0:	9b 81       	ldd	r25, Y+3	; 0x03
     ca2:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
		return;
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	37 c0       	rjmp	.+110    	; 0xd22 <_ZN6BME280C1EP3i2cP6serial+0xfa>
	}

	if(init())					// initializes the sensor registers
	{
		DBG(this->p_serial, "BME280::BME280 FAILED BME280::init\r\n");
     cb4:	85 e2       	ldi	r24, 0x25	; 37
     cb6:	ef eb       	ldi	r30, 0xBF	; 191
     cb8:	f1 e0       	ldi	r31, 0x01	; 1
     cba:	a9 ef       	ldi	r26, 0xF9	; 249
     cbc:	b4 e0       	ldi	r27, 0x04	; 4
     cbe:	01 90       	ld	r0, Z+
     cc0:	0d 92       	st	X+, r0
     cc2:	8a 95       	dec	r24
     cc4:	e1 f7       	brne	.-8      	; 0xcbe <_ZN6BME280C1EP3i2cP6serial+0x96>
     cc6:	69 ef       	ldi	r22, 0xF9	; 249
     cc8:	74 e0       	ldi	r23, 0x04	; 4
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	9b 81       	ldd	r25, Y+3	; 0x03
     cce:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
		return;
     cd2:	27 c0       	rjmp	.+78     	; 0xd22 <_ZN6BME280C1EP3i2cP6serial+0xfa>
	}
	
	if (read_cal())				// read out cal registers for calculations
     cd4:	ce 01       	movw	r24, r28
     cd6:	0e 94 48 05 	call	0xa90	; 0xa90 <_ZN6BME2808read_calEv>
     cda:	88 23       	and	r24, r24
     cdc:	81 f0       	breq	.+32     	; 0xcfe <_ZN6BME280C1EP3i2cP6serial+0xd6>
	{
		DBG(this->p_serial, "BME280::BME280 FAILED BME280::read_cal\r\n");
     cde:	89 e2       	ldi	r24, 0x29	; 41
     ce0:	e4 ee       	ldi	r30, 0xE4	; 228
     ce2:	f1 e0       	ldi	r31, 0x01	; 1
     ce4:	a9 ef       	ldi	r26, 0xF9	; 249
     ce6:	b4 e0       	ldi	r27, 0x04	; 4
     ce8:	01 90       	ld	r0, Z+
     cea:	0d 92       	st	X+, r0
     cec:	8a 95       	dec	r24
     cee:	e1 f7       	brne	.-8      	; 0xce8 <_ZN6BME280C1EP3i2cP6serial+0xc0>
     cf0:	69 ef       	ldi	r22, 0xF9	; 249
     cf2:	74 e0       	ldi	r23, 0x04	; 4
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	9b 81       	ldd	r25, Y+3	; 0x03
     cf8:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
		return;
     cfc:	12 c0       	rjmp	.+36     	; 0xd22 <_ZN6BME280C1EP3i2cP6serial+0xfa>
	}
	
	read_data();			// initial read of data to fill sensor data
     cfe:	ce 01       	movw	r24, r28
     d00:	0e 94 8f 04 	call	0x91e	; 0x91e <_ZN6BME2809read_dataEv>
	
	DBG(this->p_serial, "BME280 Constructor OK!\r\n");
     d04:	89 e1       	ldi	r24, 0x19	; 25
     d06:	ed e0       	ldi	r30, 0x0D	; 13
     d08:	f2 e0       	ldi	r31, 0x02	; 2
     d0a:	a9 ef       	ldi	r26, 0xF9	; 249
     d0c:	b4 e0       	ldi	r27, 0x04	; 4
     d0e:	01 90       	ld	r0, Z+
     d10:	0d 92       	st	X+, r0
     d12:	8a 95       	dec	r24
     d14:	e1 f7       	brne	.-8      	; 0xd0e <_ZN6BME280C1EP3i2cP6serial+0xe6>
     d16:	69 ef       	ldi	r22, 0xF9	; 249
     d18:	74 e0       	ldi	r23, 0x04	; 4
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	9b 81       	ldd	r25, Y+3	; 0x03
     d1e:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
}
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	08 95       	ret

00000d28 <_ZN6BME28010BME280TaskEv>:
{
	return humidity;
}

void BME280::BME280Task (void)
{
     d28:	8f 92       	push	r8
     d2a:	9f 92       	push	r9
     d2c:	af 92       	push	r10
     d2e:	bf 92       	push	r11
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	ec 01       	movw	r28, r24
	static uint8_t runs = 0;
	
	if ((runs % 3) == 0)
     d42:	20 91 f8 04 	lds	r18, 0x04F8
     d46:	9b ea       	ldi	r25, 0xAB	; 171
     d48:	29 9f       	mul	r18, r25
     d4a:	91 2d       	mov	r25, r1
     d4c:	11 24       	eor	r1, r1
     d4e:	96 95       	lsr	r25
     d50:	39 2f       	mov	r19, r25
     d52:	33 0f       	add	r19, r19
     d54:	93 0f       	add	r25, r19
     d56:	29 13       	cpse	r18, r25
     d58:	b6 c0       	rjmp	.+364    	; 0xec6 <_ZN6BME28010BME280TaskEv+0x19e>
	{
		DBG(this->p_serial, "BME280 Task Running\r\n");
     d5a:	09 ef       	ldi	r16, 0xF9	; 249
     d5c:	14 e0       	ldi	r17, 0x04	; 4
     d5e:	86 e1       	ldi	r24, 0x16	; 22
     d60:	e6 e2       	ldi	r30, 0x26	; 38
     d62:	f2 e0       	ldi	r31, 0x02	; 2
     d64:	d8 01       	movw	r26, r16
     d66:	01 90       	ld	r0, Z+
     d68:	0d 92       	st	X+, r0
     d6a:	8a 95       	dec	r24
     d6c:	e1 f7       	brne	.-8      	; 0xd66 <_ZN6BME28010BME280TaskEv+0x3e>
     d6e:	b8 01       	movw	r22, r16
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	9b 81       	ldd	r25, Y+3	; 0x03
     d74:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
		
		read_data();
     d78:	ce 01       	movw	r24, r28
     d7a:	0e 94 8f 04 	call	0x91e	; 0x91e <_ZN6BME2809read_dataEv>
		
		DBG(this->p_serial, "Pressure (raw: %ld): %d.%dPa\r\n",
     d7e:	6e 85       	ldd	r22, Y+14	; 0x0e
     d80:	7f 85       	ldd	r23, Y+15	; 0x0f
     d82:	88 89       	ldd	r24, Y+16	; 0x10
     d84:	99 89       	ldd	r25, Y+17	; 0x11
     d86:	0f 2e       	mov	r0, r31
     d88:	f4 e6       	ldi	r31, 0x64	; 100
     d8a:	cf 2e       	mov	r12, r31
     d8c:	d1 2c       	mov	r13, r1
     d8e:	e1 2c       	mov	r14, r1
     d90:	f1 2c       	mov	r15, r1
     d92:	f0 2d       	mov	r31, r0
     d94:	a7 01       	movw	r20, r14
     d96:	96 01       	movw	r18, r12
     d98:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__divmodsi4>
     d9c:	9f 93       	push	r25
     d9e:	8f 93       	push	r24
     da0:	7f 93       	push	r23
     da2:	6f 93       	push	r22
     da4:	5f 93       	push	r21
     da6:	4f 93       	push	r20
     da8:	3f 93       	push	r19
     daa:	2f 93       	push	r18
     dac:	8f 81       	ldd	r24, Y+7	; 0x07
     dae:	8f 93       	push	r24
     db0:	8e 81       	ldd	r24, Y+6	; 0x06
     db2:	8f 93       	push	r24
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	8f 93       	push	r24
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	8f 93       	push	r24
     dbc:	8c e3       	ldi	r24, 0x3C	; 60
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	9f 93       	push	r25
     dc2:	8f 93       	push	r24
     dc4:	1f 93       	push	r17
     dc6:	0f 93       	push	r16
     dc8:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <sprintf>
     dcc:	b8 01       	movw	r22, r16
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	9b 81       	ldd	r25, Y+3	; 0x03
     dd2:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
				raw_pres, (pressure / 100), (pressure % 100));
		
		DBG(this->p_serial, "Temperature (raw: %ld): %d.%dC or %d.%dF\r\n",
     dd6:	8a 88       	ldd	r8, Y+18	; 0x12
     dd8:	9b 88       	ldd	r9, Y+19	; 0x13
     dda:	ac 88       	ldd	r10, Y+20	; 0x14
     ddc:	bd 88       	ldd	r11, Y+21	; 0x15
     dde:	a4 eb       	ldi	r26, 0xB4	; 180
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	a5 01       	movw	r20, r10
     de4:	94 01       	movw	r18, r8
     de6:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__muluhisi3>
     dea:	60 58       	subi	r22, 0x80	; 128
     dec:	73 4f       	sbci	r23, 0xF3	; 243
     dee:	8f 4f       	sbci	r24, 0xFF	; 255
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	a7 01       	movw	r20, r14
     df4:	96 01       	movw	r18, r12
     df6:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__divmodsi4>
     dfa:	9f 93       	push	r25
     dfc:	8f 93       	push	r24
     dfe:	7f 93       	push	r23
     e00:	6f 93       	push	r22
     e02:	5f 93       	push	r21
     e04:	4f 93       	push	r20
     e06:	3f 93       	push	r19
     e08:	2f 93       	push	r18
     e0a:	c5 01       	movw	r24, r10
     e0c:	b4 01       	movw	r22, r8
     e0e:	a7 01       	movw	r20, r14
     e10:	96 01       	movw	r18, r12
     e12:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__divmodsi4>
     e16:	9f 93       	push	r25
     e18:	8f 93       	push	r24
     e1a:	7f 93       	push	r23
     e1c:	6f 93       	push	r22
     e1e:	5f 93       	push	r21
     e20:	4f 93       	push	r20
     e22:	3f 93       	push	r19
     e24:	2f 93       	push	r18
     e26:	8b 85       	ldd	r24, Y+11	; 0x0b
     e28:	8f 93       	push	r24
     e2a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e2c:	8f 93       	push	r24
     e2e:	89 85       	ldd	r24, Y+9	; 0x09
     e30:	8f 93       	push	r24
     e32:	88 85       	ldd	r24, Y+8	; 0x08
     e34:	8f 93       	push	r24
     e36:	8b e5       	ldi	r24, 0x5B	; 91
     e38:	92 e0       	ldi	r25, 0x02	; 2
     e3a:	9f 93       	push	r25
     e3c:	8f 93       	push	r24
     e3e:	1f 93       	push	r17
     e40:	0f 93       	push	r16
     e42:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <sprintf>
     e46:	8d b7       	in	r24, 0x3d	; 61
     e48:	9e b7       	in	r25, 0x3e	; 62
     e4a:	88 96       	adiw	r24, 0x28	; 40
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	9e bf       	out	0x3e, r25	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	8d bf       	out	0x3d, r24	; 61
     e56:	b8 01       	movw	r22, r16
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	9b 81       	ldd	r25, Y+3	; 0x03
     e5c:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
				raw_temp, (temperature / 100), (temperature % 100),
				(TEMP_C_TO_F(temperature) / 100),
				(TEMP_C_TO_F(temperature) % 100));
		
		DBG(this->p_serial, "Humidity (raw: %ld): %d.%d\%\r\n",
     e60:	8e 89       	ldd	r24, Y+22	; 0x16
     e62:	9f 89       	ldd	r25, Y+23	; 0x17
     e64:	a8 8d       	ldd	r26, Y+24	; 0x18
     e66:	b9 8d       	ldd	r27, Y+25	; 0x19
     e68:	ac 01       	movw	r20, r24
     e6a:	bd 01       	movw	r22, r26
     e6c:	53 70       	andi	r21, 0x03	; 3
     e6e:	66 27       	eor	r22, r22
     e70:	77 27       	eor	r23, r23
     e72:	7f 93       	push	r23
     e74:	6f 93       	push	r22
     e76:	5f 93       	push	r21
     e78:	4f 93       	push	r20
     e7a:	07 2e       	mov	r0, r23
     e7c:	7a e0       	ldi	r23, 0x0A	; 10
     e7e:	b6 95       	lsr	r27
     e80:	a7 95       	ror	r26
     e82:	97 95       	ror	r25
     e84:	87 95       	ror	r24
     e86:	7a 95       	dec	r23
     e88:	d1 f7       	brne	.-12     	; 0xe7e <_ZN6BME28010BME280TaskEv+0x156>
     e8a:	70 2d       	mov	r23, r0
     e8c:	bf 93       	push	r27
     e8e:	af 93       	push	r26
     e90:	9f 93       	push	r25
     e92:	8f 93       	push	r24
     e94:	8d 85       	ldd	r24, Y+13	; 0x0d
     e96:	8f 93       	push	r24
     e98:	8c 85       	ldd	r24, Y+12	; 0x0c
     e9a:	8f 93       	push	r24
     e9c:	86 e8       	ldi	r24, 0x86	; 134
     e9e:	92 e0       	ldi	r25, 0x02	; 2
     ea0:	9f 93       	push	r25
     ea2:	8f 93       	push	r24
     ea4:	1f 93       	push	r17
     ea6:	0f 93       	push	r16
     ea8:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <sprintf>
     eac:	b8 01       	movw	r22, r16
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	9b 81       	ldd	r25, Y+3	; 0x03
     eb2:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
     eb6:	8d b7       	in	r24, 0x3d	; 61
     eb8:	9e b7       	in	r25, 0x3e	; 62
     eba:	0e 96       	adiw	r24, 0x0e	; 14
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	9e bf       	out	0x3e, r25	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	8d bf       	out	0x3d, r24	; 61
				raw_hum, (humidity / 1024), (humidity % 1024));
	}
	
	runs++;
     ec6:	80 91 f8 04 	lds	r24, 0x04F8
     eca:	8f 5f       	subi	r24, 0xFF	; 255
     ecc:	80 93 f8 04 	sts	0x04F8, r24
	
	return;
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	ff 90       	pop	r15
     eda:	ef 90       	pop	r14
     edc:	df 90       	pop	r13
     ede:	cf 90       	pop	r12
     ee0:	bf 90       	pop	r11
     ee2:	af 90       	pop	r10
     ee4:	9f 90       	pop	r9
     ee6:	8f 90       	pop	r8
     ee8:	08 95       	ret

00000eea <_ZN3i2cC1EP6serial>:
 * Description:	This constructor sets up the i2c protocol on the ATmega328P
 *				to operate at a frequency of 200kHz
 ****************************************************************************/
i2c::i2c (serial *ptr_serial)
{
	p_serial = ptr_serial;	// store a local copy of serial pointer for debug
     eea:	fc 01       	movw	r30, r24
     eec:	71 83       	std	Z+1, r23	; 0x01
     eee:	60 83       	st	Z, r22
	
	// set the bit rate to 200kHz, with no prescaler
	TWSR = 0x00;
     ef0:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = 32;
     ef4:	20 e2       	ldi	r18, 0x20	; 32
     ef6:	20 93 b8 00 	sts	0x00B8, r18
	
	// enable i2c protocol
	TWCR = (1 << TWEN);
     efa:	24 e0       	ldi	r18, 0x04	; 4
     efc:	20 93 bc 00 	sts	0x00BC, r18
	
	DBG(this->p_serial, "i2c constructor OK!\r\n");
     f00:	26 e1       	ldi	r18, 0x16	; 22
     f02:	e4 ea       	ldi	r30, 0xA4	; 164
     f04:	f2 e0       	ldi	r31, 0x02	; 2
     f06:	a9 ef       	ldi	r26, 0xF9	; 249
     f08:	b4 e0       	ldi	r27, 0x04	; 4
     f0a:	01 90       	ld	r0, Z+
     f0c:	0d 92       	st	X+, r0
     f0e:	2a 95       	dec	r18
     f10:	e1 f7       	brne	.-8      	; 0xf0a <_ZN3i2cC1EP6serial+0x20>
     f12:	69 ef       	ldi	r22, 0xF9	; 249
     f14:	74 e0       	ldi	r23, 0x04	; 4
     f16:	fc 01       	movw	r30, r24
     f18:	80 81       	ld	r24, Z
     f1a:	91 81       	ldd	r25, Z+1	; 0x01
     f1c:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
     f20:	08 95       	ret

00000f22 <_ZN3i2c5startEv>:
 * Description:	This method puts the start signal on the i2c bus
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::start (void)
{
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	ec 01       	movw	r28, r24
	// put a start condition on the line
	TWCR = ((1 << TWSTA) | (1 << TWEN) | (1 << TWINT));
     f28:	ec eb       	ldi	r30, 0xBC	; 188
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	84 ea       	ldi	r24, 0xA4	; 164
     f2e:	80 83       	st	Z, r24
	
	// wait for TWINT to go low, which signals start condition completed
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     f30:	80 81       	ld	r24, Z
     f32:	88 23       	and	r24, r24
     f34:	ac f4       	brge	.+42     	; 0xf60 <_ZN3i2c5startEv+0x3e>
     f36:	1b c0       	rjmp	.+54     	; 0xf6e <_ZN3i2c5startEv+0x4c>
     f38:	21 50       	subi	r18, 0x01	; 1
     f3a:	31 09       	sbc	r19, r1
	{
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
     f3c:	a9 f4       	brne	.+42     	; 0xf68 <_ZN3i2c5startEv+0x46>
		{
			// timeout occurred, error
			DBG(this->p_serial, "i2c::start FAILED - timed out\r\n");
     f3e:	80 e2       	ldi	r24, 0x20	; 32
     f40:	ea eb       	ldi	r30, 0xBA	; 186
     f42:	f2 e0       	ldi	r31, 0x02	; 2
     f44:	a9 ef       	ldi	r26, 0xF9	; 249
     f46:	b4 e0       	ldi	r27, 0x04	; 4
     f48:	01 90       	ld	r0, Z+
     f4a:	0d 92       	st	X+, r0
     f4c:	8a 95       	dec	r24
     f4e:	e1 f7       	brne	.-8      	; 0xf48 <_ZN3i2c5startEv+0x26>
     f50:	69 ef       	ldi	r22, 0xF9	; 249
     f52:	74 e0       	ldi	r23, 0x04	; 4
     f54:	88 81       	ld	r24, Y
     f56:	99 81       	ldd	r25, Y+1	; 0x01
     f58:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
			return true;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	29 c0       	rjmp	.+82     	; 0xfb2 <_ZN3i2c5startEv+0x90>
{
	// put a start condition on the line
	TWCR = ((1 << TWSTA) | (1 << TWEN) | (1 << TWINT));
	
	// wait for TWINT to go low, which signals start condition completed
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     f60:	21 e0       	ldi	r18, 0x01	; 1
     f62:	34 e0       	ldi	r19, 0x04	; 4
     f64:	ec eb       	ldi	r30, 0xBC	; 188
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	90 81       	ld	r25, Z
     f6a:	99 23       	and	r25, r25
     f6c:	2c f7       	brge	.-54     	; 0xf38 <_ZN3i2c5startEv+0x16>
			return true;
		}
	}
	
	// check status register
	if ((TWSR & STAT_MSK) != STAT_START)
     f6e:	90 91 b9 00 	lds	r25, 0x00B9
     f72:	98 7f       	andi	r25, 0xF8	; 248
     f74:	98 30       	cpi	r25, 0x08	; 8
     f76:	e1 f0       	breq	.+56     	; 0xfb0 <_ZN3i2c5startEv+0x8e>
	{
		// Status register is not a start signal, error
		DBG(this->p_serial, "i2c::start FAILED - status (0x%2X) bad\r\n", TWSR);
     f78:	80 91 b9 00 	lds	r24, 0x00B9
     f7c:	1f 92       	push	r1
     f7e:	8f 93       	push	r24
     f80:	8a ed       	ldi	r24, 0xDA	; 218
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	9f 93       	push	r25
     f86:	8f 93       	push	r24
     f88:	89 ef       	ldi	r24, 0xF9	; 249
     f8a:	94 e0       	ldi	r25, 0x04	; 4
     f8c:	9f 93       	push	r25
     f8e:	8f 93       	push	r24
     f90:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <sprintf>
     f94:	69 ef       	ldi	r22, 0xF9	; 249
     f96:	74 e0       	ldi	r23, 0x04	; 4
     f98:	88 81       	ld	r24, Y
     f9a:	99 81       	ldd	r25, Y+1	; 0x01
     f9c:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
		return true;
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <_ZN3i2c5startEv+0x90>
	}
	
	return false;
     fb0:	80 e0       	ldi	r24, 0x00	; 0
}
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	08 95       	ret

00000fb8 <_ZN3i2c7restartEv>:
 * Description: This method sends a repeated start signal on the i2c bus
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::restart (void)
{
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	ec 01       	movw	r28, r24
	// put another start condition on the line
	TWCR = ((1 << TWSTA) | (1 << TWEN) | (1 << TWINT));
     fbe:	ec eb       	ldi	r30, 0xBC	; 188
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	84 ea       	ldi	r24, 0xA4	; 164
     fc4:	80 83       	st	Z, r24
	
	// wait for TWINT to go low, which signals start condition completed
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     fc6:	80 81       	ld	r24, Z
     fc8:	88 23       	and	r24, r24
     fca:	ac f4       	brge	.+42     	; 0xff6 <_ZN3i2c7restartEv+0x3e>
     fcc:	1b c0       	rjmp	.+54     	; 0x1004 <_ZN3i2c7restartEv+0x4c>
     fce:	21 50       	subi	r18, 0x01	; 1
     fd0:	31 09       	sbc	r19, r1
	{
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
     fd2:	a9 f4       	brne	.+42     	; 0xffe <_ZN3i2c7restartEv+0x46>
		{
			// timeout occurred, error
			DBG(this->p_serial, "i2c::restart FAILED - timed out\r\n");
     fd4:	82 e2       	ldi	r24, 0x22	; 34
     fd6:	e3 e0       	ldi	r30, 0x03	; 3
     fd8:	f3 e0       	ldi	r31, 0x03	; 3
     fda:	a9 ef       	ldi	r26, 0xF9	; 249
     fdc:	b4 e0       	ldi	r27, 0x04	; 4
     fde:	01 90       	ld	r0, Z+
     fe0:	0d 92       	st	X+, r0
     fe2:	8a 95       	dec	r24
     fe4:	e1 f7       	brne	.-8      	; 0xfde <_ZN3i2c7restartEv+0x26>
     fe6:	69 ef       	ldi	r22, 0xF9	; 249
     fe8:	74 e0       	ldi	r23, 0x04	; 4
     fea:	88 81       	ld	r24, Y
     fec:	99 81       	ldd	r25, Y+1	; 0x01
     fee:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
			return true;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	29 c0       	rjmp	.+82     	; 0x1048 <_ZN3i2c7restartEv+0x90>
{
	// put another start condition on the line
	TWCR = ((1 << TWSTA) | (1 << TWEN) | (1 << TWINT));
	
	// wait for TWINT to go low, which signals start condition completed
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     ff6:	21 e0       	ldi	r18, 0x01	; 1
     ff8:	34 e0       	ldi	r19, 0x04	; 4
     ffa:	ec eb       	ldi	r30, 0xBC	; 188
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	90 81       	ld	r25, Z
    1000:	99 23       	and	r25, r25
    1002:	2c f7       	brge	.-54     	; 0xfce <_ZN3i2c7restartEv+0x16>
			return true;
		}
	}
	
	// check status register
	if ((TWSR & STAT_MSK) != STAT_RESTART)
    1004:	90 91 b9 00 	lds	r25, 0x00B9
    1008:	98 7f       	andi	r25, 0xF8	; 248
    100a:	90 31       	cpi	r25, 0x10	; 16
    100c:	e1 f0       	breq	.+56     	; 0x1046 <_ZN3i2c7restartEv+0x8e>
	{
		// Status register is not a repeated start signal, error
		DBG(this->p_serial, "i2c::restart FAILED - status (0x%2X) bad\r\n", TWSR);
    100e:	80 91 b9 00 	lds	r24, 0x00B9
    1012:	1f 92       	push	r1
    1014:	8f 93       	push	r24
    1016:	85 e2       	ldi	r24, 0x25	; 37
    1018:	93 e0       	ldi	r25, 0x03	; 3
    101a:	9f 93       	push	r25
    101c:	8f 93       	push	r24
    101e:	89 ef       	ldi	r24, 0xF9	; 249
    1020:	94 e0       	ldi	r25, 0x04	; 4
    1022:	9f 93       	push	r25
    1024:	8f 93       	push	r24
    1026:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <sprintf>
    102a:	69 ef       	ldi	r22, 0xF9	; 249
    102c:	74 e0       	ldi	r23, 0x04	; 4
    102e:	88 81       	ld	r24, Y
    1030:	99 81       	ldd	r25, Y+1	; 0x01
    1032:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
		return true;
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <_ZN3i2c7restartEv+0x90>
	}
	
	return false;	
    1046:	80 e0       	ldi	r24, 0x00	; 0
}
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	08 95       	ret

0000104e <_ZN3i2c10write_byteEh>:
 * 
 * Parameters:	data - the byte of data being written to the bus
 * Return:		bool - status of operation (true = ack, false = nack)
 ****************************************************************************/
bool i2c::write_byte (uint8_t data)
{	
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	ac 01       	movw	r20, r24
	TWDR = data;
    1054:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = ((1 << TWINT) | (1 << TWEN));
    1058:	ec eb       	ldi	r30, 0xBC	; 188
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	94 e8       	ldi	r25, 0x84	; 132
    105e:	90 83       	st	Z, r25
	

	// wait for TWINT to go low, which signals write condition sent
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
    1060:	90 81       	ld	r25, Z
    1062:	99 23       	and	r25, r25
    1064:	b4 f4       	brge	.+44     	; 0x1092 <_ZN3i2c10write_byteEh+0x44>
    1066:	1c c0       	rjmp	.+56     	; 0x10a0 <_ZN3i2c10write_byteEh+0x52>
    1068:	21 50       	subi	r18, 0x01	; 1
    106a:	31 09       	sbc	r19, r1
	{
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
    106c:	b1 f4       	brne	.+44     	; 0x109a <_ZN3i2c10write_byteEh+0x4c>
    106e:	ea 01       	movw	r28, r20
		{
			// timeout occurred, error
			DBG(this->p_serial, "i2c::write_byte FAILED - timed out\r\n");
    1070:	85 e2       	ldi	r24, 0x25	; 37
    1072:	e0 e5       	ldi	r30, 0x50	; 80
    1074:	f3 e0       	ldi	r31, 0x03	; 3
    1076:	a9 ef       	ldi	r26, 0xF9	; 249
    1078:	b4 e0       	ldi	r27, 0x04	; 4
    107a:	01 90       	ld	r0, Z+
    107c:	0d 92       	st	X+, r0
    107e:	8a 95       	dec	r24
    1080:	e1 f7       	brne	.-8      	; 0x107a <_ZN3i2c10write_byteEh+0x2c>
    1082:	69 ef       	ldi	r22, 0xF9	; 249
    1084:	74 e0       	ldi	r23, 0x04	; 4
    1086:	88 81       	ld	r24, Y
    1088:	99 81       	ldd	r25, Y+1	; 0x01
    108a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
			return true;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	13 c0       	rjmp	.+38     	; 0x10b8 <_ZN3i2c10write_byteEh+0x6a>
	TWDR = data;
	TWCR = ((1 << TWINT) | (1 << TWEN));
	

	// wait for TWINT to go low, which signals write condition sent
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
    1092:	21 e0       	ldi	r18, 0x01	; 1
    1094:	34 e0       	ldi	r19, 0x04	; 4
    1096:	ec eb       	ldi	r30, 0xBC	; 188
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	90 81       	ld	r25, Z
    109c:	99 23       	and	r25, r25
    109e:	24 f7       	brge	.-56     	; 0x1068 <_ZN3i2c10write_byteEh+0x1a>
			return true;
		}
	}
	
	// check the ACK status of the write
	switch (TWSR & STAT_MSK)
    10a0:	80 91 b9 00 	lds	r24, 0x00B9
    10a4:	88 7f       	andi	r24, 0xF8	; 248
    10a6:	88 32       	cpi	r24, 0x28	; 40
    10a8:	31 f0       	breq	.+12     	; 0x10b6 <_ZN3i2c10write_byteEh+0x68>
    10aa:	80 34       	cpi	r24, 0x40	; 64
    10ac:	21 f0       	breq	.+8      	; 0x10b6 <_ZN3i2c10write_byteEh+0x68>
    10ae:	88 31       	cpi	r24, 0x18	; 24
    10b0:	11 f0       	breq	.+4      	; 0x10b6 <_ZN3i2c10write_byteEh+0x68>
			// An ACK was received
			return true;
		
		default:
			// a Nack of Some kind received
			return false;	
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	01 c0       	rjmp	.+2      	; 0x10b8 <_ZN3i2c10write_byteEh+0x6a>
	{
		case (STAT_WRITE_ACK):
		case (STAT_TRANS_ACK):
		case (STAT_READ_ACK):
			// An ACK was received
			return true;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
			// a Nack of Some kind received
			return false;	
	}
	
	return false;
}
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	08 95       	ret

000010be <_ZN3i2c4pingEh>:
 * 
 * Parameters:	addr - the address to be checked
 * Return:		bool - state of if an ACK was received
 ****************************************************************************/
bool i2c::ping (uint8_t addr)
{
    10be:	1f 93       	push	r17
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	ec 01       	movw	r28, r24
    10c6:	16 2f       	mov	r17, r22
	bool sign_of_life;
	start();
    10c8:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN3i2c5startEv>
	sign_of_life = write_byte(addr);
    10cc:	61 2f       	mov	r22, r17
    10ce:	ce 01       	movw	r24, r28
    10d0:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN3i2c10write_byteEh>
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::stop (void)
{
	TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    10d4:	94 e9       	ldi	r25, 0x94	; 148
    10d6:	90 93 bc 00 	sts	0x00BC, r25
	start();
	sign_of_life = write_byte(addr);
	stop();
	
	return sign_of_life;
}
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	1f 91       	pop	r17
    10e0:	08 95       	ret

000010e2 <_ZN3i2c9read_byteEb>:
 * Parameters:	ack - true if an ack is expected after the byte,
 *					  false if a nack is expected after they byte
 * Return:		uint8_t - the byte of data received, or 0xFF if error occurs
 ****************************************************************************/
uint8_t i2c::read_byte (bool ack)
{
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	ac 01       	movw	r20, r24
	//uint8_t expected_response;
	
	if (ack) // an ack is expected, so we are expecting more data after this
    10e8:	66 23       	and	r22, r22
    10ea:	21 f0       	breq	.+8      	; 0x10f4 <_ZN3i2c9read_byteEb+0x12>
	{
		TWCR = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    10ec:	84 ec       	ldi	r24, 0xC4	; 196
    10ee:	80 93 bc 00 	sts	0x00BC, r24
    10f2:	03 c0       	rjmp	.+6      	; 0x10fa <_ZN3i2c9read_byteEb+0x18>
		//expected_response = STAT_TRANS_ACK; // changed from STAT_REC_ACK
	}
	else
	{
		TWCR = ((1 << TWINT) | (1 << TWEN));
    10f4:	84 e8       	ldi	r24, 0x84	; 132
    10f6:	80 93 bc 00 	sts	0x00BC, r24
		//expected_response = STAT_REC_NACK;
	}
	
	// wait for TWINT to go low, which signals read complete
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
    10fa:	90 91 bc 00 	lds	r25, 0x00BC
    10fe:	99 23       	and	r25, r25
    1100:	b4 f4       	brge	.+44     	; 0x112e <_ZN3i2c9read_byteEb+0x4c>
    1102:	1c c0       	rjmp	.+56     	; 0x113c <_ZN3i2c9read_byteEb+0x5a>
    1104:	21 50       	subi	r18, 0x01	; 1
    1106:	31 09       	sbc	r19, r1
	{
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
    1108:	b1 f4       	brne	.+44     	; 0x1136 <_ZN3i2c9read_byteEb+0x54>
    110a:	ea 01       	movw	r28, r20
		{
			// timeout occurred, error
			DBG(this->p_serial, "i2c::read_byte FAILED - timed out\r\n");
    110c:	84 e2       	ldi	r24, 0x24	; 36
    110e:	e5 e7       	ldi	r30, 0x75	; 117
    1110:	f3 e0       	ldi	r31, 0x03	; 3
    1112:	a9 ef       	ldi	r26, 0xF9	; 249
    1114:	b4 e0       	ldi	r27, 0x04	; 4
    1116:	01 90       	ld	r0, Z+
    1118:	0d 92       	st	X+, r0
    111a:	8a 95       	dec	r24
    111c:	e1 f7       	brne	.-8      	; 0x1116 <_ZN3i2c9read_byteEb+0x34>
    111e:	69 ef       	ldi	r22, 0xF9	; 249
    1120:	74 e0       	ldi	r23, 0x04	; 4
    1122:	88 81       	ld	r24, Y
    1124:	99 81       	ldd	r25, Y+1	; 0x01
    1126:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
			return 0xFF;
    112a:	8f ef       	ldi	r24, 0xFF	; 255
    112c:	09 c0       	rjmp	.+18     	; 0x1140 <_ZN3i2c9read_byteEb+0x5e>
		TWCR = ((1 << TWINT) | (1 << TWEN));
		//expected_response = STAT_REC_NACK;
	}
	
	// wait for TWINT to go low, which signals read complete
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
    112e:	21 e0       	ldi	r18, 0x01	; 1
    1130:	34 e0       	ldi	r19, 0x04	; 4
    1132:	ec eb       	ldi	r30, 0xBC	; 188
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	90 81       	ld	r25, Z
    1138:	99 23       	and	r25, r25
    113a:	24 f7       	brge	.-56     	; 0x1104 <_ZN3i2c9read_byteEb+0x22>
			DBG(this->p_serial, "i2c::read_byte FAILED - timed out\r\n");
			return 0xFF;
		}
	}
	// everything ok, return the data, which is stored in TWDR
	return TWDR;
    113c:	80 91 bb 00 	lds	r24, 0x00BB
}
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	08 95       	ret

00001146 <_ZN3i2c5writeEhhh>:
 *				reg	 - the register to be written to
 *				data - the data being written
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::write (uint8_t addr, uint8_t reg, uint8_t data)
{
    1146:	ff 92       	push	r15
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	ec 01       	movw	r28, r24
    1152:	16 2f       	mov	r17, r22
    1154:	04 2f       	mov	r16, r20
    1156:	f2 2e       	mov	r15, r18
	start();
    1158:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN3i2c5startEv>
	if (!write_byte(addr) || !write_byte(reg) || !write_byte(data))
    115c:	61 2f       	mov	r22, r17
    115e:	ce 01       	movw	r24, r28
    1160:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN3i2c10write_byteEh>
    1164:	88 23       	and	r24, r24
    1166:	61 f0       	breq	.+24     	; 0x1180 <_ZN3i2c5writeEhhh+0x3a>
    1168:	60 2f       	mov	r22, r16
    116a:	ce 01       	movw	r24, r28
    116c:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN3i2c10write_byteEh>
    1170:	88 23       	and	r24, r24
    1172:	31 f0       	breq	.+12     	; 0x1180 <_ZN3i2c5writeEhhh+0x3a>
    1174:	6f 2d       	mov	r22, r15
    1176:	ce 01       	movw	r24, r28
    1178:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN3i2c10write_byteEh>
    117c:	81 11       	cpse	r24, r1
    117e:	20 c0       	rjmp	.+64     	; 0x11c0 <_ZN3i2c5writeEhhh+0x7a>
	{
		// an error occurred, one of these had a NACK
		DBG(this->p_serial,
    1180:	1f 92       	push	r1
    1182:	ff 92       	push	r15
    1184:	1f 92       	push	r1
    1186:	0f 93       	push	r16
    1188:	1f 92       	push	r1
    118a:	1f 93       	push	r17
    118c:	89 e9       	ldi	r24, 0x99	; 153
    118e:	93 e0       	ldi	r25, 0x03	; 3
    1190:	9f 93       	push	r25
    1192:	8f 93       	push	r24
    1194:	89 ef       	ldi	r24, 0xF9	; 249
    1196:	94 e0       	ldi	r25, 0x04	; 4
    1198:	9f 93       	push	r25
    119a:	8f 93       	push	r24
    119c:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <sprintf>
    11a0:	69 ef       	ldi	r22, 0xF9	; 249
    11a2:	74 e0       	ldi	r23, 0x04	; 4
    11a4:	88 81       	ld	r24, Y
    11a6:	99 81       	ldd	r25, Y+1	; 0x01
    11a8:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
			"NACK on write <addr:0x%2X, reg:0x%2X, data:0x%2X>\r\n",
			addr, reg, data);
		return true;
    11ac:	8d b7       	in	r24, 0x3d	; 61
    11ae:	9e b7       	in	r25, 0x3e	; 62
    11b0:	0a 96       	adiw	r24, 0x0a	; 10
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	9e bf       	out	0x3e, r25	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	8d bf       	out	0x3d, r24	; 61
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <_ZN3i2c5writeEhhh+0x82>
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::stop (void)
{
	TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    11c0:	84 e9       	ldi	r24, 0x94	; 148
    11c2:	80 93 bc 00 	sts	0x00BC, r24
		return true;
	}
	stop();
	
	// all good, success!
	return false;
    11c6:	80 e0       	ldi	r24, 0x00	; 0
}
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	ff 90       	pop	r15
    11d2:	08 95       	ret

000011d4 <_ZN3i2c4readEhhPhh>:
 *				p_buff - the buffer to hold the data being read
 *				count  - the total number of bytes to read
 * Return:		bool   - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::read (uint8_t addr, uint8_t reg, uint8_t* p_buff, uint8_t count)
{
    11d4:	cf 92       	push	r12
    11d6:	df 92       	push	r13
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	7c 01       	movw	r14, r24
    11e6:	c6 2f       	mov	r28, r22
    11e8:	14 2f       	mov	r17, r20
    11ea:	69 01       	movw	r12, r18
		start();
    11ec:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN3i2c5startEv>
		if (!write_byte(addr) || !write_byte(reg))
    11f0:	6c 2f       	mov	r22, r28
    11f2:	c7 01       	movw	r24, r14
    11f4:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN3i2c10write_byteEh>
    11f8:	88 23       	and	r24, r24
    11fa:	39 f0       	breq	.+14     	; 0x120a <_ZN3i2c4readEhhPhh+0x36>
    11fc:	61 2f       	mov	r22, r17
    11fe:	c7 01       	movw	r24, r14
    1200:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN3i2c10write_byteEh>
    1204:	d8 2f       	mov	r29, r24
    1206:	81 11       	cpse	r24, r1
    1208:	1f c0       	rjmp	.+62     	; 0x1248 <_ZN3i2c4readEhhPhh+0x74>
		{
			// an error occurred, one of these had a NACK
			DBG(this->p_serial, "Write NACK on read <addr:0x%2X, reg:0x%2X>\r\n",
    120a:	1f 92       	push	r1
    120c:	1f 93       	push	r17
    120e:	1f 92       	push	r1
    1210:	cf 93       	push	r28
    1212:	8d e0       	ldi	r24, 0x0D	; 13
    1214:	94 e0       	ldi	r25, 0x04	; 4
    1216:	9f 93       	push	r25
    1218:	8f 93       	push	r24
    121a:	89 ef       	ldi	r24, 0xF9	; 249
    121c:	94 e0       	ldi	r25, 0x04	; 4
    121e:	9f 93       	push	r25
    1220:	8f 93       	push	r24
    1222:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <sprintf>
    1226:	69 ef       	ldi	r22, 0xF9	; 249
    1228:	74 e0       	ldi	r23, 0x04	; 4
    122a:	f7 01       	movw	r30, r14
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
				addr, reg);
			return true;
    1234:	8d b7       	in	r24, 0x3d	; 61
    1236:	9e b7       	in	r25, 0x3e	; 62
    1238:	08 96       	adiw	r24, 0x08	; 8
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	9e bf       	out	0x3e, r25	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	8d bf       	out	0x3d, r24	; 61
    1244:	d1 e0       	ldi	r29, 0x01	; 1
    1246:	44 c0       	rjmp	.+136    	; 0x12d0 <_ZN3i2c4readEhhPhh+0xfc>
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::stop (void)
{
	TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    1248:	84 e9       	ldi	r24, 0x94	; 148
    124a:	80 93 bc 00 	sts	0x00BC, r24
			DBG(this->p_serial, "Write NACK on read <addr:0x%2X, reg:0x%2X>\r\n",
				addr, reg);
			return true;
		}
		stop();
		restart();	// change?
    124e:	c7 01       	movw	r24, r14
    1250:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN3i2c7restartEv>
		// read the info
		if (!write_byte(addr | READ_BIT))
    1254:	c1 60       	ori	r28, 0x01	; 1
    1256:	6c 2f       	mov	r22, r28
    1258:	c7 01       	movw	r24, r14
    125a:	0e 94 27 08 	call	0x104e	; 0x104e <_ZN3i2c10write_byteEh>
    125e:	88 23       	and	r24, r24
    1260:	19 f0       	breq	.+6      	; 0x1268 <_ZN3i2c4readEhhPhh+0x94>
				addr | READ_BIT);
			return 0xFF;
		}
		
		// Read the data
		for (uint8_t ndx = 1; ndx < count; ndx++)
    1262:	02 30       	cpi	r16, 0x02	; 2
    1264:	d8 f4       	brcc	.+54     	; 0x129c <_ZN3i2c4readEhhPhh+0xc8>
    1266:	2a c0       	rjmp	.+84     	; 0x12bc <_ZN3i2c4readEhhPhh+0xe8>
		restart();	// change?
		// read the info
		if (!write_byte(addr | READ_BIT))
		{
			// an error occurred, a NACK was received
			DBG(this->p_serial, "NACK on read <addr:0x%2X>\r\n",
    1268:	1f 92       	push	r1
    126a:	cf 93       	push	r28
    126c:	8a e3       	ldi	r24, 0x3A	; 58
    126e:	94 e0       	ldi	r25, 0x04	; 4
    1270:	9f 93       	push	r25
    1272:	8f 93       	push	r24
    1274:	89 ef       	ldi	r24, 0xF9	; 249
    1276:	94 e0       	ldi	r25, 0x04	; 4
    1278:	9f 93       	push	r25
    127a:	8f 93       	push	r24
    127c:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <sprintf>
    1280:	69 ef       	ldi	r22, 0xF9	; 249
    1282:	74 e0       	ldi	r23, 0x04	; 4
    1284:	f7 01       	movw	r30, r14
    1286:	80 81       	ld	r24, Z
    1288:	91 81       	ldd	r25, Z+1	; 0x01
    128a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
				addr | READ_BIT);
			return 0xFF;
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	1a c0       	rjmp	.+52     	; 0x12d0 <_ZN3i2c4readEhhPhh+0xfc>
    129c:	e6 01       	movw	r28, r12
    129e:	02 50       	subi	r16, 0x02	; 2
    12a0:	10 e0       	ldi	r17, 0x00	; 0
    12a2:	0f 5f       	subi	r16, 0xFF	; 255
    12a4:	1f 4f       	sbci	r17, 0xFF	; 255
    12a6:	c0 0e       	add	r12, r16
    12a8:	d1 1e       	adc	r13, r17
    12aa:	86 01       	movw	r16, r12
		
		// Read the data
		for (uint8_t ndx = 1; ndx < count; ndx++)
		{
			// still have more to read, so expect an ACK
			*p_buff++ = read_byte(true);
    12ac:	61 e0       	ldi	r22, 0x01	; 1
    12ae:	c7 01       	movw	r24, r14
    12b0:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN3i2c9read_byteEb>
    12b4:	89 93       	st	Y+, r24
				addr | READ_BIT);
			return 0xFF;
		}
		
		// Read the data
		for (uint8_t ndx = 1; ndx < count; ndx++)
    12b6:	c0 17       	cp	r28, r16
    12b8:	d1 07       	cpc	r29, r17
    12ba:	c1 f7       	brne	.-16     	; 0x12ac <_ZN3i2c4readEhhPhh+0xd8>
		{
			// still have more to read, so expect an ACK
			*p_buff++ = read_byte(true);
		}
		// Read last bit of data, so expect a NACK
		*p_buff++ = read_byte(false);
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	c7 01       	movw	r24, r14
    12c0:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN3i2c9read_byteEb>
    12c4:	f6 01       	movw	r30, r12
    12c6:	80 83       	st	Z, r24
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::stop (void)
{
	TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    12c8:	84 e9       	ldi	r24, 0x94	; 148
    12ca:	80 93 bc 00 	sts	0x00BC, r24
		}
		// Read last bit of data, so expect a NACK
		*p_buff++ = read_byte(false);
		stop();
		
		return false;
    12ce:	d0 e0       	ldi	r29, 0x00	; 0
    12d0:	8d 2f       	mov	r24, r29
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	1f 91       	pop	r17
    12d8:	0f 91       	pop	r16
    12da:	ff 90       	pop	r15
    12dc:	ef 90       	pop	r14
    12de:	df 90       	pop	r13
    12e0:	cf 90       	pop	r12
    12e2:	08 95       	ret

000012e4 <main>:

/* initialize shared variables */
char debug[SERIAL_MAX_SEND];

int main(void)
{
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	c1 55       	subi	r28, 0x51	; 81
    12ee:	d1 09       	sbc	r29, r1
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
	/* create serial object */
	serial ser_dev = serial(9600, 16000000);
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	34 e2       	ldi	r19, 0x24	; 36
    12fe:	44 ef       	ldi	r20, 0xF4	; 244
    1300:	50 e0       	ldi	r21, 0x00	; 0
    1302:	60 e8       	ldi	r22, 0x80	; 128
    1304:	75 e2       	ldi	r23, 0x25	; 37
    1306:	ce 01       	movw	r24, r28
    1308:	80 5c       	subi	r24, 0xC0	; 192
    130a:	9f 4f       	sbci	r25, 0xFF	; 255
    130c:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_ZN6serialC1Ejm>
	
	/* create a i2c object */
	i2c my_i2c = i2c(&ser_dev);
    1310:	be 01       	movw	r22, r28
    1312:	60 5c       	subi	r22, 0xC0	; 192
    1314:	7f 4f       	sbci	r23, 0xFF	; 255
    1316:	ce 01       	movw	r24, r28
    1318:	80 5b       	subi	r24, 0xB0	; 176
    131a:	9f 4f       	sbci	r25, 0xFF	; 255
    131c:	0e 94 75 07 	call	0xeea	; 0xeea <_ZN3i2cC1EP6serial>

	/* create a BME280 object */
	BME280 my_BME280 = BME280(&my_i2c, &ser_dev);
    1320:	ae 01       	movw	r20, r28
    1322:	40 5c       	subi	r20, 0xC0	; 192
    1324:	5f 4f       	sbci	r21, 0xFF	; 255
    1326:	be 01       	movw	r22, r28
    1328:	60 5b       	subi	r22, 0xB0	; 176
    132a:	7f 4f       	sbci	r23, 0xFF	; 255
    132c:	ce 01       	movw	r24, r28
    132e:	01 96       	adiw	r24, 0x01	; 1
    1330:	0e 94 14 06 	call	0xc28	; 0xc28 <_ZN6BME280C1EP3i2cP6serial>
	
	/* create a tilt-ball object */
	TiltBall my_TiltBall = TiltBall(&ser_dev, 3);
    1334:	43 e0       	ldi	r20, 0x03	; 3
    1336:	be 01       	movw	r22, r28
    1338:	60 5c       	subi	r22, 0xC0	; 192
    133a:	7f 4f       	sbci	r23, 0xFF	; 255
    133c:	ce 01       	movw	r24, r28
    133e:	83 5b       	subi	r24, 0xB3	; 179
    1340:	9f 4f       	sbci	r25, 0xFF	; 255
    1342:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <_ZN8TiltBallC1EP6serialh>
	
	/* create a water temperature sensor - surface */
	oneWire my_oneWire_surface_temp = oneWire(&ser_dev, 0, ID_SURFACE_TEMP);
    1346:	21 e0       	ldi	r18, 0x01	; 1
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	be 01       	movw	r22, r28
    134c:	60 5c       	subi	r22, 0xC0	; 192
    134e:	7f 4f       	sbci	r23, 0xFF	; 255
    1350:	ce 01       	movw	r24, r28
    1352:	8a 5b       	subi	r24, 0xBA	; 186
    1354:	9f 4f       	sbci	r25, 0xFF	; 255
    1356:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <_ZN7oneWireC1EP6serialhh>
	
	/* create a UVIndex sensor */
	UVIndex my_UVIndex = UVIndex(&ser_dev, 7);
    135a:	47 e0       	ldi	r20, 0x07	; 7
    135c:	be 01       	movw	r22, r28
    135e:	60 5c       	subi	r22, 0xC0	; 192
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	ce 01       	movw	r24, r28
    1364:	86 5b       	subi	r24, 0xB6	; 182
    1366:	9f 4f       	sbci	r25, 0xFF	; 255
    1368:	0e 94 8d 0c 	call	0x191a	; 0x191a <_ZN7UVIndexC1EP6serialh>
	
    /* Replace with your application code */
    while (1) 
    {
		my_BME280.BME280Task();
    136c:	ce 01       	movw	r24, r28
    136e:	01 96       	adiw	r24, 0x01	; 1
    1370:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN6BME28010BME280TaskEv>
		
		my_TiltBall.TiltBallTask();
    1374:	ce 01       	movw	r24, r28
    1376:	83 5b       	subi	r24, 0xB3	; 179
    1378:	9f 4f       	sbci	r25, 0xFF	; 255
    137a:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN8TiltBall12TiltBallTaskEv>
		
		my_oneWire_surface_temp.oneWireTask();
    137e:	ce 01       	movw	r24, r28
    1380:	8a 5b       	subi	r24, 0xBA	; 186
    1382:	9f 4f       	sbci	r25, 0xFF	; 255
    1384:	0e 94 22 0b 	call	0x1644	; 0x1644 <_ZN7oneWire11oneWireTaskEv>
				
		my_UVIndex.UVIndexTask();
    1388:	ce 01       	movw	r24, r28
    138a:	86 5b       	subi	r24, 0xB6	; 182
    138c:	9f 4f       	sbci	r25, 0xFF	; 255
    138e:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN7UVIndex11UVIndexTaskEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1392:	2f ef       	ldi	r18, 0xFF	; 255
    1394:	83 ed       	ldi	r24, 0xD3	; 211
    1396:	90 e3       	ldi	r25, 0x30	; 48
    1398:	21 50       	subi	r18, 0x01	; 1
    139a:	80 40       	sbci	r24, 0x00	; 0
    139c:	90 40       	sbci	r25, 0x00	; 0
    139e:	e1 f7       	brne	.-8      	; 0x1398 <main+0xb4>
    13a0:	00 c0       	rjmp	.+0      	; 0x13a2 <main+0xbe>
    13a2:	00 00       	nop
    13a4:	e3 cf       	rjmp	.-58     	; 0x136c <main+0x88>

000013a6 <_ZN7oneWireC1EP6serialhh>:
 */ 

#include "oneWire.h"
#include "shares.h"

oneWire::oneWire(serial *ptr_serial, uint8_t pin, uint8_t id)
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	ec 01       	movw	r28, r24
{
	p_serial = ptr_serial;	// store local copy for debug
    13ac:	79 83       	std	Y+1, r23	; 0x01
    13ae:	68 83       	st	Y, r22
	data_line = pin;		// store local copy
    13b0:	4a 83       	std	Y+2, r20	; 0x02
	dev_id = id;			// store local copy
    13b2:	2b 83       	std	Y+3, r18	; 0x03
	
	// make the data an input
	INPUT(DATA_DDR, data_line);
    13b4:	24 b1       	in	r18, 0x04	; 4
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <_ZN7oneWireC1EP6serialhh+0x1a>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	4a 95       	dec	r20
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <_ZN7oneWireC1EP6serialhh+0x16>
    13c4:	80 95       	com	r24
    13c6:	82 23       	and	r24, r18
    13c8:	84 b9       	out	0x04, r24	; 4
	
	sprintf(debug, "oneWire Constructor ok! Device id: %d\r\n", dev_id);
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	1f 92       	push	r1
    13ce:	8f 93       	push	r24
    13d0:	86 e5       	ldi	r24, 0x56	; 86
    13d2:	94 e0       	ldi	r25, 0x04	; 4
    13d4:	9f 93       	push	r25
    13d6:	8f 93       	push	r24
    13d8:	89 ef       	ldi	r24, 0xF9	; 249
    13da:	94 e0       	ldi	r25, 0x04	; 4
    13dc:	9f 93       	push	r25
    13de:	8f 93       	push	r24
    13e0:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <sprintf>
	p_serial->send(debug);
    13e4:	69 ef       	ldi	r22, 0xF9	; 249
    13e6:	74 e0       	ldi	r23, 0x04	; 4
    13e8:	88 81       	ld	r24, Y
    13ea:	99 81       	ldd	r25, Y+1	; 0x01
    13ec:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
}
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	08 95       	ret

00001402 <_ZN7oneWire5resetEv>:

bool oneWire::reset (void)
{
    1402:	fc 01       	movw	r30, r24
	bool presence_pulse;
	uint8_t retries = 125;
	
	// make pin an input
	INPUT(DATA_DDR, data_line);
    1404:	24 b1       	in	r18, 0x04	; 4
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 80       	ldd	r0, Z+2	; 0x02
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <_ZN7oneWire5resetEv+0x10>
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	0a 94       	dec	r0
    1414:	e2 f7       	brpl	.-8      	; 0x140e <_ZN7oneWire5resetEv+0xc>
    1416:	80 95       	com	r24
    1418:	82 23       	and	r24, r18
    141a:	84 b9       	out	0x04, r24	; 4
    141c:	4c e7       	ldi	r20, 0x7C	; 124
    141e:	03 c0       	rjmp	.+6      	; 0x1426 <_ZN7oneWire5resetEv+0x24>
    1420:	41 50       	subi	r20, 0x01	; 1
	
	// wait for wire to go high
	do 
	{
		if (--retries == 0)
    1422:	09 f4       	brne	.+2      	; 0x1426 <_ZN7oneWire5resetEv+0x24>
    1424:	4e c0       	rjmp	.+156    	; 0x14c2 <_ZN7oneWire5resetEv+0xc0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1426:	2a e0       	ldi	r18, 0x0A	; 10
    1428:	2a 95       	dec	r18
    142a:	f1 f7       	brne	.-4      	; 0x1428 <_ZN7oneWire5resetEv+0x26>
    142c:	00 c0       	rjmp	.+0      	; 0x142e <_ZN7oneWire5resetEv+0x2c>
		{
			return false;
		}
		_delay_us(2);
	} while (!(DATA_PIN & (1 << data_line)));
    142e:	23 b1       	in	r18, 0x03	; 3
    1430:	92 81       	ldd	r25, Z+2	; 0x02
    1432:	69 2f       	mov	r22, r25
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	02 c0       	rjmp	.+4      	; 0x143c <_ZN7oneWire5resetEv+0x3a>
    1438:	35 95       	asr	r19
    143a:	27 95       	ror	r18
    143c:	9a 95       	dec	r25
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <_ZN7oneWire5resetEv+0x36>
	
	// make pin an input
	INPUT(DATA_DDR, data_line);
	
	// wait for wire to go high
	do 
    1440:	20 ff       	sbrs	r18, 0
    1442:	ee cf       	rjmp	.-36     	; 0x1420 <_ZN7oneWire5resetEv+0x1e>
		}
		_delay_us(2);
	} while (!(DATA_PIN & (1 << data_line)));
	
	// set data_line low
	DATA_PORT &= ~(1 << data_line);
    1444:	35 b1       	in	r19, 0x05	; 5
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	ac 01       	movw	r20, r24
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <_ZN7oneWire5resetEv+0x50>
    144e:	44 0f       	add	r20, r20
    1450:	55 1f       	adc	r21, r21
    1452:	6a 95       	dec	r22
    1454:	e2 f7       	brpl	.-8      	; 0x144e <_ZN7oneWire5resetEv+0x4c>
    1456:	24 2f       	mov	r18, r20
    1458:	20 95       	com	r18
    145a:	23 23       	and	r18, r19
    145c:	25 b9       	out	0x05, r18	; 5
	
	// set data_line as output
	OUTPUT(DATA_DDR, data_line);
    145e:	44 b1       	in	r20, 0x04	; 4
    1460:	9c 01       	movw	r18, r24
    1462:	02 80       	ldd	r0, Z+2	; 0x02
    1464:	02 c0       	rjmp	.+4      	; 0x146a <_ZN7oneWire5resetEv+0x68>
    1466:	22 0f       	add	r18, r18
    1468:	33 1f       	adc	r19, r19
    146a:	0a 94       	dec	r0
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <_ZN7oneWire5resetEv+0x64>
    146e:	24 2b       	or	r18, r20
    1470:	24 b9       	out	0x04, r18	; 4
    1472:	af e7       	ldi	r26, 0x7F	; 127
    1474:	b7 e0       	ldi	r27, 0x07	; 7
    1476:	11 97       	sbiw	r26, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <_ZN7oneWire5resetEv+0x74>
    147a:	00 c0       	rjmp	.+0      	; 0x147c <_ZN7oneWire5resetEv+0x7a>
    147c:	00 00       	nop
	
	_delay_us(480);
		
	// set data_line as input
	INPUT(DATA_DDR, data_line);
    147e:	24 b1       	in	r18, 0x04	; 4
    1480:	02 80       	ldd	r0, Z+2	; 0x02
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <_ZN7oneWire5resetEv+0x86>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <_ZN7oneWire5resetEv+0x82>
    148c:	80 95       	com	r24
    148e:	82 23       	and	r24, r18
    1490:	84 b9       	out	0x04, r24	; 4
    1492:	87 e1       	ldi	r24, 0x17	; 23
    1494:	91 e0       	ldi	r25, 0x01	; 1
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	f1 f7       	brne	.-4      	; 0x1496 <_ZN7oneWire5resetEv+0x94>
    149a:	00 c0       	rjmp	.+0      	; 0x149c <_ZN7oneWire5resetEv+0x9a>
    149c:	00 00       	nop
	
	_delay_us(70);
	
	presence_pulse = (bool)!((DATA_PIN & (1 << data_line)));
    149e:	83 b1       	in	r24, 0x03	; 3
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 80       	ldd	r0, Z+2	; 0x02
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <_ZN7oneWire5resetEv+0xa8>
    14a6:	95 95       	asr	r25
    14a8:	87 95       	ror	r24
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <_ZN7oneWire5resetEv+0xa4>
    14ae:	a1 e0       	ldi	r26, 0x01	; 1
    14b0:	8a 27       	eor	r24, r26
    14b2:	81 70       	andi	r24, 0x01	; 1
    14b4:	e7 e6       	ldi	r30, 0x67	; 103
    14b6:	f6 e0       	ldi	r31, 0x06	; 6
    14b8:	31 97       	sbiw	r30, 0x01	; 1
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <_ZN7oneWire5resetEv+0xb6>
    14bc:	00 c0       	rjmp	.+0      	; 0x14be <_ZN7oneWire5resetEv+0xbc>
    14be:	00 00       	nop
	
	_delay_us(410);
	
	return presence_pulse;
    14c0:	08 95       	ret
	// wait for wire to go high
	do 
	{
		if (--retries == 0)
		{
			return false;
    14c2:	80 e0       	ldi	r24, 0x00	; 0
	presence_pulse = (bool)!((DATA_PIN & (1 << data_line)));
	
	_delay_us(410);
	
	return presence_pulse;
}
    14c4:	08 95       	ret

000014c6 <_ZN7oneWire7write_1Ev>:
		data >>= 1;
	}
}

void oneWire::write_1 (void)
{
    14c6:	fc 01       	movw	r30, r24
	// set data_line low
	DATA_PORT &= ~(1 << data_line);
    14c8:	95 b1       	in	r25, 0x05	; 5
    14ca:	21 e0       	ldi	r18, 0x01	; 1
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	a9 01       	movw	r20, r18
    14d0:	02 80       	ldd	r0, Z+2	; 0x02
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <_ZN7oneWire7write_1Ev+0x12>
    14d4:	44 0f       	add	r20, r20
    14d6:	55 1f       	adc	r21, r21
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <_ZN7oneWire7write_1Ev+0xe>
    14dc:	84 2f       	mov	r24, r20
    14de:	80 95       	com	r24
    14e0:	89 23       	and	r24, r25
    14e2:	85 b9       	out	0x05, r24	; 5
	
	// make data_line an output
	OUTPUT(DATA_DDR, data_line);
    14e4:	44 b1       	in	r20, 0x04	; 4
    14e6:	c9 01       	movw	r24, r18
    14e8:	02 80       	ldd	r0, Z+2	; 0x02
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <_ZN7oneWire7write_1Ev+0x2a>
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	0a 94       	dec	r0
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <_ZN7oneWire7write_1Ev+0x26>
    14f4:	84 2b       	or	r24, r20
    14f6:	84 b9       	out	0x04, r24	; 4
    14f8:	85 e3       	ldi	r24, 0x35	; 53
    14fa:	8a 95       	dec	r24
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <_ZN7oneWire7write_1Ev+0x34>
    14fe:	00 00       	nop
	
	_delay_us(10);
	
	// make data_line an input
	INPUT(DATA_DDR, data_line);
    1500:	94 b1       	in	r25, 0x04	; 4
    1502:	02 80       	ldd	r0, Z+2	; 0x02
    1504:	02 c0       	rjmp	.+4      	; 0x150a <_ZN7oneWire7write_1Ev+0x44>
    1506:	22 0f       	add	r18, r18
    1508:	33 1f       	adc	r19, r19
    150a:	0a 94       	dec	r0
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <_ZN7oneWire7write_1Ev+0x40>
    150e:	20 95       	com	r18
    1510:	29 23       	and	r18, r25
    1512:	24 b9       	out	0x04, r18	; 4
    1514:	8b ed       	ldi	r24, 0xDB	; 219
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	f1 f7       	brne	.-4      	; 0x1518 <_ZN7oneWire7write_1Ev+0x52>
    151c:	00 c0       	rjmp	.+0      	; 0x151e <_ZN7oneWire7write_1Ev+0x58>
    151e:	00 00       	nop
    1520:	08 95       	ret

00001522 <_ZN7oneWire7write_0Ev>:
	
	_delay_us(55);
}

void oneWire::write_0 (void)
{
    1522:	fc 01       	movw	r30, r24
	// set data_line low
	DATA_PORT &= ~(1 << data_line);
    1524:	95 b1       	in	r25, 0x05	; 5
    1526:	21 e0       	ldi	r18, 0x01	; 1
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	a9 01       	movw	r20, r18
    152c:	02 80       	ldd	r0, Z+2	; 0x02
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <_ZN7oneWire7write_0Ev+0x12>
    1530:	44 0f       	add	r20, r20
    1532:	55 1f       	adc	r21, r21
    1534:	0a 94       	dec	r0
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <_ZN7oneWire7write_0Ev+0xe>
    1538:	84 2f       	mov	r24, r20
    153a:	80 95       	com	r24
    153c:	89 23       	and	r24, r25
    153e:	85 b9       	out	0x05, r24	; 5
	
	// make data_line an output
	OUTPUT(DATA_DDR, data_line);
    1540:	44 b1       	in	r20, 0x04	; 4
    1542:	c9 01       	movw	r24, r18
    1544:	02 80       	ldd	r0, Z+2	; 0x02
    1546:	02 c0       	rjmp	.+4      	; 0x154c <_ZN7oneWire7write_0Ev+0x2a>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	0a 94       	dec	r0
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <_ZN7oneWire7write_0Ev+0x26>
    1550:	84 2b       	or	r24, r20
    1552:	84 b9       	out	0x04, r24	; 4
    1554:	83 e0       	ldi	r24, 0x03	; 3
    1556:	91 e0       	ldi	r25, 0x01	; 1
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <_ZN7oneWire7write_0Ev+0x36>
    155c:	00 c0       	rjmp	.+0      	; 0x155e <_ZN7oneWire7write_0Ev+0x3c>
    155e:	00 00       	nop
	
	_delay_us(65);
	
	// make data_line an input
	INPUT(DATA_DDR, data_line);
    1560:	94 b1       	in	r25, 0x04	; 4
    1562:	02 80       	ldd	r0, Z+2	; 0x02
    1564:	02 c0       	rjmp	.+4      	; 0x156a <_ZN7oneWire7write_0Ev+0x48>
    1566:	22 0f       	add	r18, r18
    1568:	33 1f       	adc	r19, r19
    156a:	0a 94       	dec	r0
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <_ZN7oneWire7write_0Ev+0x44>
    156e:	20 95       	com	r18
    1570:	29 23       	and	r18, r25
    1572:	24 b9       	out	0x04, r18	; 4
    1574:	9a e1       	ldi	r25, 0x1A	; 26
    1576:	9a 95       	dec	r25
    1578:	f1 f7       	brne	.-4      	; 0x1576 <_ZN7oneWire7write_0Ev+0x54>
    157a:	00 c0       	rjmp	.+0      	; 0x157c <_ZN7oneWire7write_0Ev+0x5a>
    157c:	08 95       	ret

0000157e <_ZN7oneWire10write_byteEh>:
	
	return presence_pulse;
}

void oneWire::write_byte (uint8_t data)
{
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	8c 01       	movw	r16, r24
    1588:	d6 2f       	mov	r29, r22
    158a:	c8 e0       	ldi	r28, 0x08	; 8
	for (uint8_t i = 0; i < 8; i++)
	{
		if (data & 0x01)
    158c:	d0 ff       	sbrs	r29, 0
    158e:	04 c0       	rjmp	.+8      	; 0x1598 <_ZN7oneWire10write_byteEh+0x1a>
		{
			write_1();
    1590:	c8 01       	movw	r24, r16
    1592:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN7oneWire7write_1Ev>
    1596:	03 c0       	rjmp	.+6      	; 0x159e <_ZN7oneWire10write_byteEh+0x20>
		}
		else
		{
			write_0();
    1598:	c8 01       	movw	r24, r16
    159a:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN7oneWire7write_0Ev>
		}
		data >>= 1;
    159e:	d6 95       	lsr	r29
    15a0:	c1 50       	subi	r28, 0x01	; 1
	return presence_pulse;
}

void oneWire::write_byte (uint8_t data)
{
	for (uint8_t i = 0; i < 8; i++)
    15a2:	a1 f7       	brne	.-24     	; 0x158c <_ZN7oneWire10write_byteEh+0xe>
		{
			write_0();
		}
		data >>= 1;
	}
}
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	1f 91       	pop	r17
    15aa:	0f 91       	pop	r16
    15ac:	08 95       	ret

000015ae <_ZN7oneWire9read_byteEv>:
	
	_delay_us(5);
}

uint8_t oneWire::read_byte (void)
{
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	fc 01       	movw	r30, r24
    15b6:	a8 e0       	ldi	r26, 0x08	; 8
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
	uint8_t data_in;
	uint8_t data_read = 0;
	
	for (uint8_t bit_msk = 0x01; bit_msk; bit_msk <<= 1)
    15ba:	11 e0       	ldi	r17, 0x01	; 1
}

uint8_t oneWire::read_byte (void)
{
	uint8_t data_in;
	uint8_t data_read = 0;
    15bc:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint8_t bit_msk = 0x01; bit_msk; bit_msk <<= 1)
	{
		// make data_line low
		DATA_PORT &= ~(1 << data_line);
    15be:	21 e0       	ldi	r18, 0x01	; 1
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	45 b1       	in	r20, 0x05	; 5
    15c4:	b9 01       	movw	r22, r18
    15c6:	02 80       	ldd	r0, Z+2	; 0x02
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <_ZN7oneWire9read_byteEv+0x20>
    15ca:	66 0f       	add	r22, r22
    15cc:	77 1f       	adc	r23, r23
    15ce:	0a 94       	dec	r0
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <_ZN7oneWire9read_byteEv+0x1c>
    15d2:	96 2f       	mov	r25, r22
    15d4:	90 95       	com	r25
    15d6:	94 23       	and	r25, r20
    15d8:	95 b9       	out	0x05, r25	; 5
		// make data_line output
		OUTPUT(DATA_DDR, data_line);
    15da:	94 b1       	in	r25, 0x04	; 4
    15dc:	a9 01       	movw	r20, r18
    15de:	02 80       	ldd	r0, Z+2	; 0x02
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <_ZN7oneWire9read_byteEv+0x38>
    15e2:	44 0f       	add	r20, r20
    15e4:	55 1f       	adc	r21, r21
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <_ZN7oneWire9read_byteEv+0x34>
    15ea:	49 2b       	or	r20, r25
    15ec:	44 b9       	out	0x04, r20	; 4
    15ee:	90 e1       	ldi	r25, 0x10	; 16
    15f0:	9a 95       	dec	r25
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <_ZN7oneWire9read_byteEv+0x42>
		
		_delay_us(3);
		// make data_line input
		INPUT(DATA_DDR, data_line);
    15f4:	44 b1       	in	r20, 0x04	; 4
    15f6:	b9 01       	movw	r22, r18
    15f8:	02 80       	ldd	r0, Z+2	; 0x02
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <_ZN7oneWire9read_byteEv+0x52>
    15fc:	66 0f       	add	r22, r22
    15fe:	77 1f       	adc	r23, r23
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <_ZN7oneWire9read_byteEv+0x4e>
    1604:	96 2f       	mov	r25, r22
    1606:	90 95       	com	r25
    1608:	94 23       	and	r25, r20
    160a:	94 b9       	out	0x04, r25	; 4
    160c:	c5 e3       	ldi	r28, 0x35	; 53
    160e:	ca 95       	dec	r28
    1610:	f1 f7       	brne	.-4      	; 0x160e <_ZN7oneWire9read_byteEv+0x60>
    1612:	00 00       	nop
		_delay_us(10);
		
		data_in = DATA_PIN & (1 << data_line);
    1614:	93 b1       	in	r25, 0x03	; 3
    1616:	a9 01       	movw	r20, r18
    1618:	02 80       	ldd	r0, Z+2	; 0x02
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <_ZN7oneWire9read_byteEv+0x72>
    161c:	44 0f       	add	r20, r20
    161e:	55 1f       	adc	r21, r21
    1620:	0a 94       	dec	r0
    1622:	e2 f7       	brpl	.-8      	; 0x161c <_ZN7oneWire9read_byteEv+0x6e>
    1624:	49 23       	and	r20, r25
    1626:	c3 ed       	ldi	r28, 0xD3	; 211
    1628:	d0 e0       	ldi	r29, 0x00	; 0
    162a:	21 97       	sbiw	r28, 0x01	; 1
    162c:	f1 f7       	brne	.-4      	; 0x162a <_ZN7oneWire9read_byteEv+0x7c>
    162e:	00 c0       	rjmp	.+0      	; 0x1630 <_ZN7oneWire9read_byteEv+0x82>
    1630:	00 00       	nop
		_delay_us(53);
		
		if (data_in)
    1632:	41 11       	cpse	r20, r1
		{
			data_read |= bit_msk;
    1634:	81 2b       	or	r24, r17
uint8_t oneWire::read_byte (void)
{
	uint8_t data_in;
	uint8_t data_read = 0;
	
	for (uint8_t bit_msk = 0x01; bit_msk; bit_msk <<= 1)
    1636:	11 0f       	add	r17, r17
    1638:	11 97       	sbiw	r26, 0x01	; 1
    163a:	19 f6       	brne	.-122    	; 0x15c2 <_ZN7oneWire9read_byteEv+0x14>
			data_read |= bit_msk;
		}
	}
	
	return data_read;
}
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	1f 91       	pop	r17
    1642:	08 95       	ret

00001644 <_ZN7oneWire11oneWireTaskEv>:
{
	return (raw * 6) + (raw / 4);
}

void oneWire::oneWireTask (void)
{
    1644:	1f 93       	push	r17
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	ec 01       	movw	r28, r24
	static uint8_t runs = 0;
	
	uint8_t low_byte, high_byte;
	int16_t temp;
	
	if ((runs % 5) == 0)
    164c:	20 91 f8 05 	lds	r18, 0x05F8
    1650:	9d ec       	ldi	r25, 0xCD	; 205
    1652:	29 9f       	mul	r18, r25
    1654:	91 2d       	mov	r25, r1
    1656:	11 24       	eor	r1, r1
    1658:	96 95       	lsr	r25
    165a:	96 95       	lsr	r25
    165c:	39 2f       	mov	r19, r25
    165e:	33 0f       	add	r19, r19
    1660:	33 0f       	add	r19, r19
    1662:	93 0f       	add	r25, r19
    1664:	29 13       	cpse	r18, r25
    1666:	55 c0       	rjmp	.+170    	; 0x1712 <_ZN7oneWire11oneWireTaskEv+0xce>
	{
		// perform temperature conversion
		reset();
    1668:	ce 01       	movw	r24, r28
    166a:	0e 94 01 0a 	call	0x1402	; 0x1402 <_ZN7oneWire5resetEv>
		write_byte(0xCC);	// skip ROM
    166e:	6c ec       	ldi	r22, 0xCC	; 204
    1670:	ce 01       	movw	r24, r28
    1672:	0e 94 bf 0a 	call	0x157e	; 0x157e <_ZN7oneWire10write_byteEh>
		write_byte(0x44);	// single temp conversion
    1676:	64 e4       	ldi	r22, 0x44	; 68
    1678:	ce 01       	movw	r24, r28
    167a:	0e 94 bf 0a 	call	0x157e	; 0x157e <_ZN7oneWire10write_byteEh>
		
		// read in scratch pad
		reset();
    167e:	ce 01       	movw	r24, r28
    1680:	0e 94 01 0a 	call	0x1402	; 0x1402 <_ZN7oneWire5resetEv>
		write_byte(0xCC);	// skip ROM
    1684:	6c ec       	ldi	r22, 0xCC	; 204
    1686:	ce 01       	movw	r24, r28
    1688:	0e 94 bf 0a 	call	0x157e	; 0x157e <_ZN7oneWire10write_byteEh>
		write_byte(0xBE);	// read scratchpad
    168c:	6e eb       	ldi	r22, 0xBE	; 190
    168e:	ce 01       	movw	r24, r28
    1690:	0e 94 bf 0a 	call	0x157e	; 0x157e <_ZN7oneWire10write_byteEh>
		
		// read temperature
		low_byte = read_byte();
    1694:	ce 01       	movw	r24, r28
    1696:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN7oneWire9read_byteEv>
    169a:	18 2f       	mov	r17, r24
		high_byte = read_byte();
    169c:	ce 01       	movw	r24, r28
    169e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN7oneWire9read_byteEv>
		temp = (high_byte << BYTE_SHIFT) | low_byte;
    16a2:	21 2f       	mov	r18, r17
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	38 2b       	or	r19, r24
	return data_read;
}

int16_t oneWire::convert_temp(int16_t raw)
{
	return (raw * 6) + (raw / 4);
    16a8:	c9 01       	movw	r24, r18
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	82 0f       	add	r24, r18
    16b0:	93 1f       	adc	r25, r19
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	a9 01       	movw	r20, r18
    16b8:	55 23       	and	r21, r21
    16ba:	14 f4       	brge	.+4      	; 0x16c0 <_ZN7oneWire11oneWireTaskEv+0x7c>
    16bc:	4d 5f       	subi	r20, 0xFD	; 253
    16be:	5f 4f       	sbci	r21, 0xFF	; 255
    16c0:	55 95       	asr	r21
    16c2:	47 95       	ror	r20
    16c4:	55 95       	asr	r21
    16c6:	47 95       	ror	r20
    16c8:	84 0f       	add	r24, r20
    16ca:	95 1f       	adc	r25, r21
		low_byte = read_byte();
		high_byte = read_byte();
		temp = (high_byte << BYTE_SHIFT) | low_byte;
		
		// TODO - print out to serial
		sprintf(debug,"temp sensor %d: %d.%d\r\n", dev_id, convert_temp(temp) / 100, convert_temp(temp) % 100);
    16cc:	64 e6       	ldi	r22, 0x64	; 100
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
    16d4:	9f 93       	push	r25
    16d6:	8f 93       	push	r24
    16d8:	7f 93       	push	r23
    16da:	6f 93       	push	r22
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	1f 92       	push	r1
    16e0:	8f 93       	push	r24
    16e2:	8e e7       	ldi	r24, 0x7E	; 126
    16e4:	94 e0       	ldi	r25, 0x04	; 4
    16e6:	9f 93       	push	r25
    16e8:	8f 93       	push	r24
    16ea:	89 ef       	ldi	r24, 0xF9	; 249
    16ec:	94 e0       	ldi	r25, 0x04	; 4
    16ee:	9f 93       	push	r25
    16f0:	8f 93       	push	r24
    16f2:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <sprintf>
		p_serial->send(debug);
    16f6:	69 ef       	ldi	r22, 0xF9	; 249
    16f8:	74 e0       	ldi	r23, 0x04	; 4
    16fa:	88 81       	ld	r24, Y
    16fc:	99 81       	ldd	r25, Y+1	; 0x01
    16fe:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
    1702:	8d b7       	in	r24, 0x3d	; 61
    1704:	9e b7       	in	r25, 0x3e	; 62
    1706:	0a 96       	adiw	r24, 0x0a	; 10
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	9e bf       	out	0x3e, r25	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	8d bf       	out	0x3d, r24	; 61
	}
	runs++;
    1712:	80 91 f8 05 	lds	r24, 0x05F8
    1716:	8f 5f       	subi	r24, 0xFF	; 255
    1718:	80 93 f8 05 	sts	0x05F8, r24
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	08 95       	ret

00001724 <_ZN6serial4initEv>:
 * 
 * Return:		bool - the status of the operation (true  = success,
 *													false = failure)
 ****************************************************************************/
void serial::init (void)
{
    1724:	fc 01       	movw	r30, r24
	/* calculate ubrr for desired baud rate */
	uint32_t ubrr = ((clk_speed / 16UL) / baud_rate) - 1;
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	a4 81       	ldd	r26, Z+4	; 0x04
    172c:	b5 81       	ldd	r27, Z+5	; 0x05
    172e:	bc 01       	movw	r22, r24
    1730:	cd 01       	movw	r24, r26
    1732:	68 94       	set
    1734:	13 f8       	bld	r1, 3
    1736:	96 95       	lsr	r25
    1738:	87 95       	ror	r24
    173a:	77 95       	ror	r23
    173c:	67 95       	ror	r22
    173e:	16 94       	lsr	r1
    1740:	d1 f7       	brne	.-12     	; 0x1736 <_ZN6serial4initEv+0x12>
    1742:	20 81       	ld	r18, Z
    1744:	31 81       	ldd	r19, Z+1	; 0x01
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__udivmodsi4>
    174e:	ba 01       	movw	r22, r20
    1750:	a9 01       	movw	r20, r18
    1752:	41 50       	subi	r20, 0x01	; 1
    1754:	51 09       	sbc	r21, r1
    1756:	61 09       	sbc	r22, r1
    1758:	71 09       	sbc	r23, r1
	UBRR0H = (uint8_t)(ubrr >> 8);
    175a:	bb 27       	eor	r27, r27
    175c:	a7 2f       	mov	r26, r23
    175e:	96 2f       	mov	r25, r22
    1760:	85 2f       	mov	r24, r21
    1762:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (uint8_t)ubrr;
    1766:	40 93 c4 00 	sts	0x00C4, r20
	
	/* Enable receiver and transmitter */
	UCSR0B = ((1 << RXEN0) | (1 << TXEN0));
    176a:	88 e1       	ldi	r24, 0x18	; 24
    176c:	80 93 c1 00 	sts	0x00C1, r24
	
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = ((1 << USBS0) | (3 << UCSZ00));
    1770:	8e e0       	ldi	r24, 0x0E	; 14
    1772:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0A &= ~(1 << U2X0);
    1776:	e0 ec       	ldi	r30, 0xC0	; 192
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	8d 7f       	andi	r24, 0xFD	; 253
    177e:	80 83       	st	Z, r24
    1780:	08 95       	ret

00001782 <_ZN6serialC1Ejm>:
 * Parameters:	baud - the baud rate to establish
 *				clk  - the clock speed of the device
 ****************************************************************************/
serial::serial (uint16_t baud, uint32_t clk)
{
	baud_rate = baud;		// store a local copy
    1782:	fc 01       	movw	r30, r24
    1784:	71 83       	std	Z+1, r23	; 0x01
    1786:	60 83       	st	Z, r22
	clk_speed = clk;		// store a local copy
    1788:	22 83       	std	Z+2, r18	; 0x02
    178a:	33 83       	std	Z+3, r19	; 0x03
    178c:	44 83       	std	Z+4, r20	; 0x04
    178e:	55 83       	std	Z+5, r21	; 0x05
	
	init();
    1790:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN6serial4initEv>
    1794:	08 95       	ret

00001796 <_ZN6serial4sendEh>:
bool serial::send (uint8_t data)
{
	uint16_t cnt = 0;
	
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1 << UDRE0)))// && cnt < SERIAL_TIMEOUT)
    1796:	e0 ec       	ldi	r30, 0xC0	; 192
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	85 ff       	sbrs	r24, 5
    179e:	fd cf       	rjmp	.-6      	; 0x179a <_ZN6serial4sendEh+0x4>
		return false;
	}
	*/
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
    17a0:	60 93 c6 00 	sts	0x00C6, r22
	
	return true;
}
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	08 95       	ret

000017a8 <_ZN6serial4sendEPc>:
 * 
 * Parameters:	str - the string of data to be sent, maximum 255 bytes
 * Return:		uint8_t - the total number of characters successfully sent
 ****************************************************************************/
uint8_t serial::send (char *str)
{
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	cf 93       	push	r28
    17b2:	fb 01       	movw	r30, r22
	uint8_t sent = 0;
	
	while (*str && sent < SERIAL_MAX_SEND)
    17b4:	60 81       	ld	r22, Z
    17b6:	66 23       	and	r22, r22
    17b8:	99 f0       	breq	.+38     	; 0x17e0 <_ZN6serial4sendEPc+0x38>
    17ba:	8f 01       	movw	r16, r30
    17bc:	7c 01       	movw	r14, r24
    17be:	0f 5f       	subi	r16, 0xFF	; 255
    17c0:	1f 4f       	sbci	r17, 0xFF	; 255
    17c2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if (send(*str++))
    17c4:	c7 01       	movw	r24, r14
    17c6:	0e 94 cb 0b 	call	0x1796	; 0x1796 <_ZN6serial4sendEh>
    17ca:	88 23       	and	r24, r24
    17cc:	51 f0       	breq	.+20     	; 0x17e2 <_ZN6serial4sendEPc+0x3a>
		{
			sent++;
    17ce:	cf 5f       	subi	r28, 0xFF	; 255
 ****************************************************************************/
uint8_t serial::send (char *str)
{
	uint8_t sent = 0;
	
	while (*str && sent < SERIAL_MAX_SEND)
    17d0:	f8 01       	movw	r30, r16
    17d2:	61 91       	ld	r22, Z+
    17d4:	8f 01       	movw	r16, r30
    17d6:	66 23       	and	r22, r22
    17d8:	21 f0       	breq	.+8      	; 0x17e2 <_ZN6serial4sendEPc+0x3a>
    17da:	cf 3f       	cpi	r28, 0xFF	; 255
    17dc:	99 f7       	brne	.-26     	; 0x17c4 <_ZN6serial4sendEPc+0x1c>
    17de:	01 c0       	rjmp	.+2      	; 0x17e2 <_ZN6serial4sendEPc+0x3a>
 * Parameters:	str - the string of data to be sent, maximum 255 bytes
 * Return:		uint8_t - the total number of characters successfully sent
 ****************************************************************************/
uint8_t serial::send (char *str)
{
	uint8_t sent = 0;
    17e0:	c0 e0       	ldi	r28, 0x00	; 0
			break;
		}
	}
	
	return sent;
}
    17e2:	8c 2f       	mov	r24, r28
    17e4:	cf 91       	pop	r28
    17e6:	1f 91       	pop	r17
    17e8:	0f 91       	pop	r16
    17ea:	ff 90       	pop	r15
    17ec:	ef 90       	pop	r14
    17ee:	08 95       	ret

000017f0 <_ZN8TiltBallC1EP6serialh>:

/*****************************************************************************
 * Method:		TiltBall
 * Description:	This constructor sets up the tiltBall sensor on the ATmega328P
 ****************************************************************************/
TiltBall::TiltBall (serial *ptr_serial, uint8_t p)
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	ec 01       	movw	r28, r24
{
	pin = p;					// store local copy of tilt ball pin
    17f6:	4a 83       	std	Y+2, r20	; 0x02
	p_serial = ptr_serial;		// store local copy of serial for debug
    17f8:	79 83       	std	Y+1, r23	; 0x01
    17fa:	68 83       	st	Y, r22
	TILT_DDR &= ~(1 << pin);	// Make tilt ball an input
    17fc:	8a b1       	in	r24, 0x0a	; 10
    17fe:	21 e0       	ldi	r18, 0x01	; 1
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <_ZN8TiltBallC1EP6serialh+0x18>
    1804:	22 0f       	add	r18, r18
    1806:	33 1f       	adc	r19, r19
    1808:	4a 95       	dec	r20
    180a:	e2 f7       	brpl	.-8      	; 0x1804 <_ZN8TiltBallC1EP6serialh+0x14>
    180c:	20 95       	com	r18
    180e:	28 23       	and	r18, r24
    1810:	2a b9       	out	0x0a, r18	; 10
	
	DBG(this->p_serial, "TiltBall Constructor OK!\r\n");
    1812:	8b e1       	ldi	r24, 0x1B	; 27
    1814:	e6 e9       	ldi	r30, 0x96	; 150
    1816:	f4 e0       	ldi	r31, 0x04	; 4
    1818:	a9 ef       	ldi	r26, 0xF9	; 249
    181a:	b4 e0       	ldi	r27, 0x04	; 4
    181c:	01 90       	ld	r0, Z+
    181e:	0d 92       	st	X+, r0
    1820:	8a 95       	dec	r24
    1822:	e1 f7       	brne	.-8      	; 0x181c <_ZN8TiltBallC1EP6serialh+0x2c>
    1824:	69 ef       	ldi	r22, 0xF9	; 249
    1826:	74 e0       	ldi	r23, 0x04	; 4
    1828:	88 81       	ld	r24, Y
    182a:	99 81       	ldd	r25, Y+1	; 0x01
    182c:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
}
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	08 95       	ret

00001836 <_ZN8TiltBall8isTiltedEv>:

bool TiltBall::isTilted ()
{
	return TILT_PIN & (1 << pin);
    1836:	29 b1       	in	r18, 0x09	; 9
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	a9 01       	movw	r20, r18
    183c:	fc 01       	movw	r30, r24
    183e:	02 80       	ldd	r0, Z+2	; 0x02
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <_ZN8TiltBall8isTiltedEv+0x10>
    1842:	55 95       	asr	r21
    1844:	47 95       	ror	r20
    1846:	0a 94       	dec	r0
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <_ZN8TiltBall8isTiltedEv+0xc>
    184a:	ca 01       	movw	r24, r20
}
    184c:	81 70       	andi	r24, 0x01	; 1
    184e:	08 95       	ret

00001850 <_ZN8TiltBall12TiltBallTaskEv>:

void TiltBall::TiltBallTask ()
{
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	ec 01       	movw	r28, r24
	static uint8_t runs = 0;
	
	if ((runs % 5) == 0) 
    1856:	80 91 f9 05 	lds	r24, 0x05F9
    185a:	9d ec       	ldi	r25, 0xCD	; 205
    185c:	89 9f       	mul	r24, r25
    185e:	91 2d       	mov	r25, r1
    1860:	11 24       	eor	r1, r1
    1862:	96 95       	lsr	r25
    1864:	96 95       	lsr	r25
    1866:	29 2f       	mov	r18, r25
    1868:	22 0f       	add	r18, r18
    186a:	22 0f       	add	r18, r18
    186c:	92 0f       	add	r25, r18
    186e:	89 13       	cpse	r24, r25
    1870:	44 c0       	rjmp	.+136    	; 0x18fa <_ZN8TiltBall12TiltBallTaskEv+0xaa>
	{
		DBG(this->p_serial, "\r\nTiltBall Task Running\r\n");
    1872:	8a e1       	ldi	r24, 0x1A	; 26
    1874:	e1 eb       	ldi	r30, 0xB1	; 177
    1876:	f4 e0       	ldi	r31, 0x04	; 4
    1878:	a9 ef       	ldi	r26, 0xF9	; 249
    187a:	b4 e0       	ldi	r27, 0x04	; 4
    187c:	01 90       	ld	r0, Z+
    187e:	0d 92       	st	X+, r0
    1880:	8a 95       	dec	r24
    1882:	e1 f7       	brne	.-8      	; 0x187c <_ZN8TiltBall12TiltBallTaskEv+0x2c>
    1884:	69 ef       	ldi	r22, 0xF9	; 249
    1886:	74 e0       	ldi	r23, 0x04	; 4
    1888:	88 81       	ld	r24, Y
    188a:	99 81       	ldd	r25, Y+1	; 0x01
    188c:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
		
		DBG(this->p_serial, "Sensor is ");
    1890:	8b e0       	ldi	r24, 0x0B	; 11
    1892:	eb ec       	ldi	r30, 0xCB	; 203
    1894:	f4 e0       	ldi	r31, 0x04	; 4
    1896:	a9 ef       	ldi	r26, 0xF9	; 249
    1898:	b4 e0       	ldi	r27, 0x04	; 4
    189a:	01 90       	ld	r0, Z+
    189c:	0d 92       	st	X+, r0
    189e:	8a 95       	dec	r24
    18a0:	e1 f7       	brne	.-8      	; 0x189a <_ZN8TiltBall12TiltBallTaskEv+0x4a>
    18a2:	69 ef       	ldi	r22, 0xF9	; 249
    18a4:	74 e0       	ldi	r23, 0x04	; 4
    18a6:	88 81       	ld	r24, Y
    18a8:	99 81       	ldd	r25, Y+1	; 0x01
    18aa:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
		if (!isTilted())
    18ae:	ce 01       	movw	r24, r28
    18b0:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZN8TiltBall8isTiltedEv>
    18b4:	81 11       	cpse	r24, r1
    18b6:	12 c0       	rjmp	.+36     	; 0x18dc <_ZN8TiltBall12TiltBallTaskEv+0x8c>
		{
			DBG(this->p_serial, "NOT");
    18b8:	8e e4       	ldi	r24, 0x4E	; 78
    18ba:	9f e4       	ldi	r25, 0x4F	; 79
    18bc:	a4 e5       	ldi	r26, 0x54	; 84
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	80 93 f9 04 	sts	0x04F9, r24
    18c4:	90 93 fa 04 	sts	0x04FA, r25
    18c8:	a0 93 fb 04 	sts	0x04FB, r26
    18cc:	b0 93 fc 04 	sts	0x04FC, r27
    18d0:	69 ef       	ldi	r22, 0xF9	; 249
    18d2:	74 e0       	ldi	r23, 0x04	; 4
    18d4:	88 81       	ld	r24, Y
    18d6:	99 81       	ldd	r25, Y+1	; 0x01
    18d8:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
		}
		DBG(this->p_serial, "tilted.\r\n");
    18dc:	8a e0       	ldi	r24, 0x0A	; 10
    18de:	e6 ed       	ldi	r30, 0xD6	; 214
    18e0:	f4 e0       	ldi	r31, 0x04	; 4
    18e2:	a9 ef       	ldi	r26, 0xF9	; 249
    18e4:	b4 e0       	ldi	r27, 0x04	; 4
    18e6:	01 90       	ld	r0, Z+
    18e8:	0d 92       	st	X+, r0
    18ea:	8a 95       	dec	r24
    18ec:	e1 f7       	brne	.-8      	; 0x18e6 <_ZN8TiltBall12TiltBallTaskEv+0x96>
    18ee:	69 ef       	ldi	r22, 0xF9	; 249
    18f0:	74 e0       	ldi	r23, 0x04	; 4
    18f2:	88 81       	ld	r24, Y
    18f4:	99 81       	ldd	r25, Y+1	; 0x01
    18f6:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
	}
	
	runs++;
    18fa:	80 91 f9 05 	lds	r24, 0x05F9
    18fe:	8f 5f       	subi	r24, 0xFF	; 255
    1900:	80 93 f9 05 	sts	0x05F9, r24
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	08 95       	ret

0000190a <_ZN7UVIndex4initEv>:
	init();	
}

void UVIndex::init (void)
{
	ADCSRA = 0x87;	//Turn On ADC and set prescaler (CLK/128)
    190a:	87 e8       	ldi	r24, 0x87	; 135
    190c:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0x00;	//Set gain & turn off autotrigger
    1910:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x00;   //Set ADC channel ADC0 with 1X gain
    1914:	10 92 7c 00 	sts	0x007C, r1
    1918:	08 95       	ret

0000191a <_ZN7UVIndexC1EP6serialh>:
#include "UVIndex.h"
#include "shares.h"

UVIndex::UVIndex (serial *ptr_serial, uint8_t pin)
{
	p_serial = ptr_serial;
    191a:	fc 01       	movw	r30, r24
    191c:	71 83       	std	Z+1, r23	; 0x01
    191e:	60 83       	st	Z, r22
	enable_pin = pin;
    1920:	42 83       	std	Z+2, r20	; 0x02
	
	init();	
    1922:	0e 94 85 0c 	call	0x190a	; 0x190a <_ZN7UVIndex4initEv>
    1926:	08 95       	ret

00001928 <_ZN7UVIndex6enableEv>:
}

void UVIndex::enable (void)
{
	// set enable pin high
	UV_EN_PORT |= (1 << enable_pin);
    1928:	6b b1       	in	r22, 0x0b	; 11
    192a:	21 e0       	ldi	r18, 0x01	; 1
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	a9 01       	movw	r20, r18
    1930:	fc 01       	movw	r30, r24
    1932:	02 80       	ldd	r0, Z+2	; 0x02
    1934:	02 c0       	rjmp	.+4      	; 0x193a <_ZN7UVIndex6enableEv+0x12>
    1936:	44 0f       	add	r20, r20
    1938:	55 1f       	adc	r21, r21
    193a:	0a 94       	dec	r0
    193c:	e2 f7       	brpl	.-8      	; 0x1936 <_ZN7UVIndex6enableEv+0xe>
    193e:	46 2b       	or	r20, r22
    1940:	4b b9       	out	0x0b, r20	; 11
	OUTPUT(UV_EN_DDR, enable_pin);
    1942:	4a b1       	in	r20, 0x0a	; 10
    1944:	02 80       	ldd	r0, Z+2	; 0x02
    1946:	02 c0       	rjmp	.+4      	; 0x194c <_ZN7UVIndex6enableEv+0x24>
    1948:	22 0f       	add	r18, r18
    194a:	33 1f       	adc	r19, r19
    194c:	0a 94       	dec	r0
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <_ZN7UVIndex6enableEv+0x20>
    1950:	24 2b       	or	r18, r20
    1952:	2a b9       	out	0x0a, r18	; 10
    1954:	08 95       	ret

00001956 <_ZN7UVIndex7disableEv>:
}

void UVIndex::disable (void)
{
    1956:	fc 01       	movw	r30, r24
	// set enable pin low
	UV_EN_PORT &= ~(1 << enable_pin);
    1958:	4b b1       	in	r20, 0x0b	; 11
    195a:	21 e0       	ldi	r18, 0x01	; 1
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	b9 01       	movw	r22, r18
    1960:	02 80       	ldd	r0, Z+2	; 0x02
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <_ZN7UVIndex7disableEv+0x12>
    1964:	66 0f       	add	r22, r22
    1966:	77 1f       	adc	r23, r23
    1968:	0a 94       	dec	r0
    196a:	e2 f7       	brpl	.-8      	; 0x1964 <_ZN7UVIndex7disableEv+0xe>
    196c:	96 2f       	mov	r25, r22
    196e:	90 95       	com	r25
    1970:	94 23       	and	r25, r20
    1972:	9b b9       	out	0x0b, r25	; 11
	OUTPUT(UV_EN_DDR, enable_pin);
    1974:	8a b1       	in	r24, 0x0a	; 10
    1976:	02 80       	ldd	r0, Z+2	; 0x02
    1978:	02 c0       	rjmp	.+4      	; 0x197e <_ZN7UVIndex7disableEv+0x28>
    197a:	22 0f       	add	r18, r18
    197c:	33 1f       	adc	r19, r19
    197e:	0a 94       	dec	r0
    1980:	e2 f7       	brpl	.-8      	; 0x197a <_ZN7UVIndex7disableEv+0x24>
    1982:	28 2b       	or	r18, r24
    1984:	2a b9       	out	0x0a, r18	; 10
    1986:	08 95       	ret

00001988 <_ZN7UVIndex4readEv>:
}

int16_t UVIndex::read (void)
{
    1988:	0f 93       	push	r16
    198a:	1f 93       	push	r17
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	ec 01       	movw	r28, r24
	int16_t value;
	
	enable();
    1992:	0e 94 94 0c 	call	0x1928	; 0x1928 <_ZN7UVIndex6enableEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1996:	8f e9       	ldi	r24, 0x9F	; 159
    1998:	9f e0       	ldi	r25, 0x0F	; 15
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	f1 f7       	brne	.-4      	; 0x199a <_ZN7UVIndex4readEv+0x12>
    199e:	00 c0       	rjmp	.+0      	; 0x19a0 <_ZN7UVIndex4readEv+0x18>
    19a0:	00 00       	nop
	
	// stabilization period
	_delay_ms(1);
	
	// start conversion
	ADCSRA = 0xC7;
    19a2:	87 ec       	ldi	r24, 0xC7	; 199
    19a4:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19a8:	8f e0       	ldi	r24, 0x0F	; 15
    19aa:	94 e0       	ldi	r25, 0x04	; 4
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <_ZN7UVIndex4readEv+0x24>
    19b0:	00 c0       	rjmp	.+0      	; 0x19b2 <_ZN7UVIndex4readEv+0x2a>
    19b2:	00 00       	nop
	
	// wait for conversion to finish
	_delay_us(260);
	
	value = ADC & 0x3FF;
    19b4:	00 91 78 00 	lds	r16, 0x0078
    19b8:	10 91 79 00 	lds	r17, 0x0079
	
	disable();
    19bc:	ce 01       	movw	r24, r28
    19be:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN7UVIndex7disableEv>
	
	return value;
}
    19c2:	c8 01       	movw	r24, r16
    19c4:	93 70       	andi	r25, 0x03	; 3
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	1f 91       	pop	r17
    19cc:	0f 91       	pop	r16
    19ce:	08 95       	ret

000019d0 <_ZN7UVIndex11UVIndexTaskEv>:

void UVIndex::UVIndexTask (void)
{
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	9c 01       	movw	r18, r24
	static uint8_t runs  = 0;
	
	if ((runs % 4) == 0)
    19d6:	90 91 fa 05 	lds	r25, 0x05FA
    19da:	93 70       	andi	r25, 0x03	; 3
    19dc:	e1 f4       	brne	.+56     	; 0x1a16 <_ZN7UVIndex11UVIndexTaskEv+0x46>
    19de:	e9 01       	movw	r28, r18
	{
		sprintf(debug, "UV Index reading: %d\r\n", read());
    19e0:	c9 01       	movw	r24, r18
    19e2:	0e 94 c4 0c 	call	0x1988	; 0x1988 <_ZN7UVIndex4readEv>
    19e6:	9f 93       	push	r25
    19e8:	8f 93       	push	r24
    19ea:	80 ee       	ldi	r24, 0xE0	; 224
    19ec:	94 e0       	ldi	r25, 0x04	; 4
    19ee:	9f 93       	push	r25
    19f0:	8f 93       	push	r24
    19f2:	89 ef       	ldi	r24, 0xF9	; 249
    19f4:	94 e0       	ldi	r25, 0x04	; 4
    19f6:	9f 93       	push	r25
    19f8:	8f 93       	push	r24
    19fa:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <sprintf>
		p_serial->send(debug);
    19fe:	69 ef       	ldi	r22, 0xF9	; 249
    1a00:	74 e0       	ldi	r23, 0x04	; 4
    1a02:	88 81       	ld	r24, Y
    1a04:	99 81       	ldd	r25, Y+1	; 0x01
    1a06:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN6serial4sendEPc>
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
	}
	
	runs++;
    1a16:	80 91 fa 05 	lds	r24, 0x05FA
    1a1a:	8f 5f       	subi	r24, 0xFF	; 255
    1a1c:	80 93 fa 05 	sts	0x05FA, r24
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <__mulsi3>:
    1a26:	db 01       	movw	r26, r22
    1a28:	8f 93       	push	r24
    1a2a:	9f 93       	push	r25
    1a2c:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__muluhisi3>
    1a30:	bf 91       	pop	r27
    1a32:	af 91       	pop	r26
    1a34:	a2 9f       	mul	r26, r18
    1a36:	80 0d       	add	r24, r0
    1a38:	91 1d       	adc	r25, r1
    1a3a:	a3 9f       	mul	r26, r19
    1a3c:	90 0d       	add	r25, r0
    1a3e:	b2 9f       	mul	r27, r18
    1a40:	90 0d       	add	r25, r0
    1a42:	11 24       	eor	r1, r1
    1a44:	08 95       	ret

00001a46 <__divmodhi4>:
    1a46:	97 fb       	bst	r25, 7
    1a48:	07 2e       	mov	r0, r23
    1a4a:	16 f4       	brtc	.+4      	; 0x1a50 <__divmodhi4+0xa>
    1a4c:	00 94       	com	r0
    1a4e:	07 d0       	rcall	.+14     	; 0x1a5e <__divmodhi4_neg1>
    1a50:	77 fd       	sbrc	r23, 7
    1a52:	09 d0       	rcall	.+18     	; 0x1a66 <__divmodhi4_neg2>
    1a54:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__udivmodhi4>
    1a58:	07 fc       	sbrc	r0, 7
    1a5a:	05 d0       	rcall	.+10     	; 0x1a66 <__divmodhi4_neg2>
    1a5c:	3e f4       	brtc	.+14     	; 0x1a6c <__divmodhi4_exit>

00001a5e <__divmodhi4_neg1>:
    1a5e:	90 95       	com	r25
    1a60:	81 95       	neg	r24
    1a62:	9f 4f       	sbci	r25, 0xFF	; 255
    1a64:	08 95       	ret

00001a66 <__divmodhi4_neg2>:
    1a66:	70 95       	com	r23
    1a68:	61 95       	neg	r22
    1a6a:	7f 4f       	sbci	r23, 0xFF	; 255

00001a6c <__divmodhi4_exit>:
    1a6c:	08 95       	ret

00001a6e <__udivmodsi4>:
    1a6e:	a1 e2       	ldi	r26, 0x21	; 33
    1a70:	1a 2e       	mov	r1, r26
    1a72:	aa 1b       	sub	r26, r26
    1a74:	bb 1b       	sub	r27, r27
    1a76:	fd 01       	movw	r30, r26
    1a78:	0d c0       	rjmp	.+26     	; 0x1a94 <__udivmodsi4_ep>

00001a7a <__udivmodsi4_loop>:
    1a7a:	aa 1f       	adc	r26, r26
    1a7c:	bb 1f       	adc	r27, r27
    1a7e:	ee 1f       	adc	r30, r30
    1a80:	ff 1f       	adc	r31, r31
    1a82:	a2 17       	cp	r26, r18
    1a84:	b3 07       	cpc	r27, r19
    1a86:	e4 07       	cpc	r30, r20
    1a88:	f5 07       	cpc	r31, r21
    1a8a:	20 f0       	brcs	.+8      	; 0x1a94 <__udivmodsi4_ep>
    1a8c:	a2 1b       	sub	r26, r18
    1a8e:	b3 0b       	sbc	r27, r19
    1a90:	e4 0b       	sbc	r30, r20
    1a92:	f5 0b       	sbc	r31, r21

00001a94 <__udivmodsi4_ep>:
    1a94:	66 1f       	adc	r22, r22
    1a96:	77 1f       	adc	r23, r23
    1a98:	88 1f       	adc	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	1a 94       	dec	r1
    1a9e:	69 f7       	brne	.-38     	; 0x1a7a <__udivmodsi4_loop>
    1aa0:	60 95       	com	r22
    1aa2:	70 95       	com	r23
    1aa4:	80 95       	com	r24
    1aa6:	90 95       	com	r25
    1aa8:	9b 01       	movw	r18, r22
    1aaa:	ac 01       	movw	r20, r24
    1aac:	bd 01       	movw	r22, r26
    1aae:	cf 01       	movw	r24, r30
    1ab0:	08 95       	ret

00001ab2 <__divmodsi4>:
    1ab2:	05 2e       	mov	r0, r21
    1ab4:	97 fb       	bst	r25, 7
    1ab6:	1e f4       	brtc	.+6      	; 0x1abe <__divmodsi4+0xc>
    1ab8:	00 94       	com	r0
    1aba:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__negsi2>
    1abe:	57 fd       	sbrc	r21, 7
    1ac0:	07 d0       	rcall	.+14     	; 0x1ad0 <__divmodsi4_neg2>
    1ac2:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__udivmodsi4>
    1ac6:	07 fc       	sbrc	r0, 7
    1ac8:	03 d0       	rcall	.+6      	; 0x1ad0 <__divmodsi4_neg2>
    1aca:	4e f4       	brtc	.+18     	; 0x1ade <__divmodsi4_exit>
    1acc:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <__negsi2>

00001ad0 <__divmodsi4_neg2>:
    1ad0:	50 95       	com	r21
    1ad2:	40 95       	com	r20
    1ad4:	30 95       	com	r19
    1ad6:	21 95       	neg	r18
    1ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    1ada:	4f 4f       	sbci	r20, 0xFF	; 255
    1adc:	5f 4f       	sbci	r21, 0xFF	; 255

00001ade <__divmodsi4_exit>:
    1ade:	08 95       	ret

00001ae0 <__negsi2>:
    1ae0:	90 95       	com	r25
    1ae2:	80 95       	com	r24
    1ae4:	70 95       	com	r23
    1ae6:	61 95       	neg	r22
    1ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aea:	8f 4f       	sbci	r24, 0xFF	; 255
    1aec:	9f 4f       	sbci	r25, 0xFF	; 255
    1aee:	08 95       	ret

00001af0 <__muluhisi3>:
    1af0:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__umulhisi3>
    1af4:	a5 9f       	mul	r26, r21
    1af6:	90 0d       	add	r25, r0
    1af8:	b4 9f       	mul	r27, r20
    1afa:	90 0d       	add	r25, r0
    1afc:	a4 9f       	mul	r26, r20
    1afe:	80 0d       	add	r24, r0
    1b00:	91 1d       	adc	r25, r1
    1b02:	11 24       	eor	r1, r1
    1b04:	08 95       	ret

00001b06 <__mulshisi3>:
    1b06:	b7 ff       	sbrs	r27, 7
    1b08:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <__muluhisi3>

00001b0c <__mulohisi3>:
    1b0c:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__muluhisi3>
    1b10:	82 1b       	sub	r24, r18
    1b12:	93 0b       	sbc	r25, r19
    1b14:	08 95       	ret

00001b16 <__muldi3>:
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	1f 93       	push	r17
    1b1c:	0f 93       	push	r16
    1b1e:	9a 9d       	mul	r25, r10
    1b20:	f0 2d       	mov	r31, r0
    1b22:	21 9f       	mul	r18, r17
    1b24:	f0 0d       	add	r31, r0
    1b26:	8b 9d       	mul	r24, r11
    1b28:	f0 0d       	add	r31, r0
    1b2a:	8a 9d       	mul	r24, r10
    1b2c:	e0 2d       	mov	r30, r0
    1b2e:	f1 0d       	add	r31, r1
    1b30:	03 9f       	mul	r16, r19
    1b32:	f0 0d       	add	r31, r0
    1b34:	02 9f       	mul	r16, r18
    1b36:	e0 0d       	add	r30, r0
    1b38:	f1 1d       	adc	r31, r1
    1b3a:	4e 9d       	mul	r20, r14
    1b3c:	e0 0d       	add	r30, r0
    1b3e:	f1 1d       	adc	r31, r1
    1b40:	5e 9d       	mul	r21, r14
    1b42:	f0 0d       	add	r31, r0
    1b44:	4f 9d       	mul	r20, r15
    1b46:	f0 0d       	add	r31, r0
    1b48:	7f 93       	push	r23
    1b4a:	6f 93       	push	r22
    1b4c:	bf 92       	push	r11
    1b4e:	af 92       	push	r10
    1b50:	5f 93       	push	r21
    1b52:	4f 93       	push	r20
    1b54:	d5 01       	movw	r26, r10
    1b56:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__umulhisi3>
    1b5a:	8b 01       	movw	r16, r22
    1b5c:	ac 01       	movw	r20, r24
    1b5e:	d7 01       	movw	r26, r14
    1b60:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__umulhisi3>
    1b64:	eb 01       	movw	r28, r22
    1b66:	e8 0f       	add	r30, r24
    1b68:	f9 1f       	adc	r31, r25
    1b6a:	d6 01       	movw	r26, r12
    1b6c:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__muldi3_6>
    1b70:	2f 91       	pop	r18
    1b72:	3f 91       	pop	r19
    1b74:	d6 01       	movw	r26, r12
    1b76:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__umulhisi3>
    1b7a:	c6 0f       	add	r28, r22
    1b7c:	d7 1f       	adc	r29, r23
    1b7e:	e8 1f       	adc	r30, r24
    1b80:	f9 1f       	adc	r31, r25
    1b82:	af 91       	pop	r26
    1b84:	bf 91       	pop	r27
    1b86:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__muldi3_6>
    1b8a:	2f 91       	pop	r18
    1b8c:	3f 91       	pop	r19
    1b8e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__umulhisi3>
    1b92:	c6 0f       	add	r28, r22
    1b94:	d7 1f       	adc	r29, r23
    1b96:	e8 1f       	adc	r30, r24
    1b98:	f9 1f       	adc	r31, r25
    1b9a:	d6 01       	movw	r26, r12
    1b9c:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__umulhisi3>
    1ba0:	e6 0f       	add	r30, r22
    1ba2:	f7 1f       	adc	r31, r23
    1ba4:	98 01       	movw	r18, r16
    1ba6:	be 01       	movw	r22, r28
    1ba8:	cf 01       	movw	r24, r30
    1baa:	11 24       	eor	r1, r1
    1bac:	0f 91       	pop	r16
    1bae:	1f 91       	pop	r17
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <__muldi3_6>:
    1bb6:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__umulhisi3>
    1bba:	46 0f       	add	r20, r22
    1bbc:	57 1f       	adc	r21, r23
    1bbe:	c8 1f       	adc	r28, r24
    1bc0:	d9 1f       	adc	r29, r25
    1bc2:	08 f4       	brcc	.+2      	; 0x1bc6 <__muldi3_6+0x10>
    1bc4:	31 96       	adiw	r30, 0x01	; 1
    1bc6:	08 95       	ret

00001bc8 <__moddi3>:
    1bc8:	68 94       	set
    1bca:	01 c0       	rjmp	.+2      	; 0x1bce <__divdi3_moddi3>

00001bcc <__divdi3>:
    1bcc:	e8 94       	clt

00001bce <__divdi3_moddi3>:
    1bce:	f9 2f       	mov	r31, r25
    1bd0:	f1 2b       	or	r31, r17
    1bd2:	12 f0       	brmi	.+4      	; 0x1bd8 <__divdi3_moddi3+0xa>
    1bd4:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__udivdi3_umoddi3>
    1bd8:	a0 e0       	ldi	r26, 0x00	; 0
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e2 ef       	ldi	r30, 0xF2	; 242
    1bde:	fd e0       	ldi	r31, 0x0D	; 13
    1be0:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__prologue_saves__+0xc>
    1be4:	09 2e       	mov	r0, r25
    1be6:	05 94       	asr	r0
    1be8:	22 f4       	brpl	.+8      	; 0x1bf2 <__divdi3_moddi3+0x24>
    1bea:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__negdi2>
    1bee:	11 23       	and	r17, r17
    1bf0:	92 f4       	brpl	.+36     	; 0x1c16 <__divdi3_moddi3+0x48>
    1bf2:	f0 e8       	ldi	r31, 0x80	; 128
    1bf4:	0f 26       	eor	r0, r31
    1bf6:	ff ef       	ldi	r31, 0xFF	; 255
    1bf8:	e0 94       	com	r14
    1bfa:	f0 94       	com	r15
    1bfc:	00 95       	com	r16
    1bfe:	10 95       	com	r17
    1c00:	b0 94       	com	r11
    1c02:	c0 94       	com	r12
    1c04:	d0 94       	com	r13
    1c06:	a1 94       	neg	r10
    1c08:	bf 0a       	sbc	r11, r31
    1c0a:	cf 0a       	sbc	r12, r31
    1c0c:	df 0a       	sbc	r13, r31
    1c0e:	ef 0a       	sbc	r14, r31
    1c10:	ff 0a       	sbc	r15, r31
    1c12:	0f 0b       	sbc	r16, r31
    1c14:	1f 0b       	sbc	r17, r31
    1c16:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__udivmod64>
    1c1a:	07 fc       	sbrc	r0, 7
    1c1c:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__negdi2>
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	ec e0       	ldi	r30, 0x0C	; 12
    1c26:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__epilogue_restores__+0xc>

00001c2a <__umoddi3>:
    1c2a:	68 94       	set
    1c2c:	01 c0       	rjmp	.+2      	; 0x1c30 <__udivdi3_umoddi3>

00001c2e <__udivdi3>:
    1c2e:	e8 94       	clt

00001c30 <__udivdi3_umoddi3>:
    1c30:	8f 92       	push	r8
    1c32:	9f 92       	push	r9
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__udivmod64>
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	9f 90       	pop	r9
    1c42:	8f 90       	pop	r8
    1c44:	08 95       	ret

00001c46 <__udivmod64>:
    1c46:	88 24       	eor	r8, r8
    1c48:	99 24       	eor	r9, r9
    1c4a:	f4 01       	movw	r30, r8
    1c4c:	e4 01       	movw	r28, r8
    1c4e:	b0 e4       	ldi	r27, 0x40	; 64
    1c50:	9f 93       	push	r25
    1c52:	aa 27       	eor	r26, r26
    1c54:	9a 15       	cp	r25, r10
    1c56:	8b 04       	cpc	r8, r11
    1c58:	9c 04       	cpc	r9, r12
    1c5a:	ed 05       	cpc	r30, r13
    1c5c:	fe 05       	cpc	r31, r14
    1c5e:	cf 05       	cpc	r28, r15
    1c60:	d0 07       	cpc	r29, r16
    1c62:	a1 07       	cpc	r26, r17
    1c64:	98 f4       	brcc	.+38     	; 0x1c8c <__udivmod64+0x46>
    1c66:	ad 2f       	mov	r26, r29
    1c68:	dc 2f       	mov	r29, r28
    1c6a:	cf 2f       	mov	r28, r31
    1c6c:	fe 2f       	mov	r31, r30
    1c6e:	e9 2d       	mov	r30, r9
    1c70:	98 2c       	mov	r9, r8
    1c72:	89 2e       	mov	r8, r25
    1c74:	98 2f       	mov	r25, r24
    1c76:	87 2f       	mov	r24, r23
    1c78:	76 2f       	mov	r23, r22
    1c7a:	65 2f       	mov	r22, r21
    1c7c:	54 2f       	mov	r21, r20
    1c7e:	43 2f       	mov	r20, r19
    1c80:	32 2f       	mov	r19, r18
    1c82:	22 27       	eor	r18, r18
    1c84:	b8 50       	subi	r27, 0x08	; 8
    1c86:	31 f7       	brne	.-52     	; 0x1c54 <__udivmod64+0xe>
    1c88:	bf 91       	pop	r27
    1c8a:	27 c0       	rjmp	.+78     	; 0x1cda <__udivmod64+0x94>
    1c8c:	1b 2e       	mov	r1, r27
    1c8e:	bf 91       	pop	r27
    1c90:	bb 27       	eor	r27, r27
    1c92:	22 0f       	add	r18, r18
    1c94:	33 1f       	adc	r19, r19
    1c96:	44 1f       	adc	r20, r20
    1c98:	55 1f       	adc	r21, r21
    1c9a:	66 1f       	adc	r22, r22
    1c9c:	77 1f       	adc	r23, r23
    1c9e:	88 1f       	adc	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	88 1c       	adc	r8, r8
    1ca4:	99 1c       	adc	r9, r9
    1ca6:	ee 1f       	adc	r30, r30
    1ca8:	ff 1f       	adc	r31, r31
    1caa:	cc 1f       	adc	r28, r28
    1cac:	dd 1f       	adc	r29, r29
    1cae:	aa 1f       	adc	r26, r26
    1cb0:	bb 1f       	adc	r27, r27
    1cb2:	8a 14       	cp	r8, r10
    1cb4:	9b 04       	cpc	r9, r11
    1cb6:	ec 05       	cpc	r30, r12
    1cb8:	fd 05       	cpc	r31, r13
    1cba:	ce 05       	cpc	r28, r14
    1cbc:	df 05       	cpc	r29, r15
    1cbe:	a0 07       	cpc	r26, r16
    1cc0:	b1 07       	cpc	r27, r17
    1cc2:	48 f0       	brcs	.+18     	; 0x1cd6 <__udivmod64+0x90>
    1cc4:	8a 18       	sub	r8, r10
    1cc6:	9b 08       	sbc	r9, r11
    1cc8:	ec 09       	sbc	r30, r12
    1cca:	fd 09       	sbc	r31, r13
    1ccc:	ce 09       	sbc	r28, r14
    1cce:	df 09       	sbc	r29, r15
    1cd0:	a0 0b       	sbc	r26, r16
    1cd2:	b1 0b       	sbc	r27, r17
    1cd4:	21 60       	ori	r18, 0x01	; 1
    1cd6:	1a 94       	dec	r1
    1cd8:	e1 f6       	brne	.-72     	; 0x1c92 <__udivmod64+0x4c>
    1cda:	2e f4       	brtc	.+10     	; 0x1ce6 <__udivmod64+0xa0>
    1cdc:	94 01       	movw	r18, r8
    1cde:	af 01       	movw	r20, r30
    1ce0:	be 01       	movw	r22, r28
    1ce2:	cd 01       	movw	r24, r26
    1ce4:	00 0c       	add	r0, r0
    1ce6:	08 95       	ret

00001ce8 <__negdi2>:
    1ce8:	60 95       	com	r22
    1cea:	70 95       	com	r23
    1cec:	80 95       	com	r24
    1cee:	90 95       	com	r25
    1cf0:	30 95       	com	r19
    1cf2:	40 95       	com	r20
    1cf4:	50 95       	com	r21
    1cf6:	21 95       	neg	r18
    1cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfa:	4f 4f       	sbci	r20, 0xFF	; 255
    1cfc:	5f 4f       	sbci	r21, 0xFF	; 255
    1cfe:	6f 4f       	sbci	r22, 0xFF	; 255
    1d00:	7f 4f       	sbci	r23, 0xFF	; 255
    1d02:	8f 4f       	sbci	r24, 0xFF	; 255
    1d04:	9f 4f       	sbci	r25, 0xFF	; 255
    1d06:	08 95       	ret

00001d08 <__prologue_saves__>:
    1d08:	2f 92       	push	r2
    1d0a:	3f 92       	push	r3
    1d0c:	4f 92       	push	r4
    1d0e:	5f 92       	push	r5
    1d10:	6f 92       	push	r6
    1d12:	7f 92       	push	r7
    1d14:	8f 92       	push	r8
    1d16:	9f 92       	push	r9
    1d18:	af 92       	push	r10
    1d1a:	bf 92       	push	r11
    1d1c:	cf 92       	push	r12
    1d1e:	df 92       	push	r13
    1d20:	ef 92       	push	r14
    1d22:	ff 92       	push	r15
    1d24:	0f 93       	push	r16
    1d26:	1f 93       	push	r17
    1d28:	cf 93       	push	r28
    1d2a:	df 93       	push	r29
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	ca 1b       	sub	r28, r26
    1d32:	db 0b       	sbc	r29, r27
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	09 94       	ijmp

00001d40 <__epilogue_restores__>:
    1d40:	2a 88       	ldd	r2, Y+18	; 0x12
    1d42:	39 88       	ldd	r3, Y+17	; 0x11
    1d44:	48 88       	ldd	r4, Y+16	; 0x10
    1d46:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d48:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d50:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d52:	b9 84       	ldd	r11, Y+9	; 0x09
    1d54:	c8 84       	ldd	r12, Y+8	; 0x08
    1d56:	df 80       	ldd	r13, Y+7	; 0x07
    1d58:	ee 80       	ldd	r14, Y+6	; 0x06
    1d5a:	fd 80       	ldd	r15, Y+5	; 0x05
    1d5c:	0c 81       	ldd	r16, Y+4	; 0x04
    1d5e:	1b 81       	ldd	r17, Y+3	; 0x03
    1d60:	aa 81       	ldd	r26, Y+2	; 0x02
    1d62:	b9 81       	ldd	r27, Y+1	; 0x01
    1d64:	ce 0f       	add	r28, r30
    1d66:	d1 1d       	adc	r29, r1
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	ed 01       	movw	r28, r26
    1d74:	08 95       	ret

00001d76 <__ashldi3>:
    1d76:	0f 93       	push	r16
    1d78:	08 30       	cpi	r16, 0x08	; 8
    1d7a:	90 f0       	brcs	.+36     	; 0x1da0 <__ashldi3+0x2a>
    1d7c:	98 2f       	mov	r25, r24
    1d7e:	87 2f       	mov	r24, r23
    1d80:	76 2f       	mov	r23, r22
    1d82:	65 2f       	mov	r22, r21
    1d84:	54 2f       	mov	r21, r20
    1d86:	43 2f       	mov	r20, r19
    1d88:	32 2f       	mov	r19, r18
    1d8a:	22 27       	eor	r18, r18
    1d8c:	08 50       	subi	r16, 0x08	; 8
    1d8e:	f4 cf       	rjmp	.-24     	; 0x1d78 <__ashldi3+0x2>
    1d90:	22 0f       	add	r18, r18
    1d92:	33 1f       	adc	r19, r19
    1d94:	44 1f       	adc	r20, r20
    1d96:	55 1f       	adc	r21, r21
    1d98:	66 1f       	adc	r22, r22
    1d9a:	77 1f       	adc	r23, r23
    1d9c:	88 1f       	adc	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	0a 95       	dec	r16
    1da2:	b2 f7       	brpl	.-20     	; 0x1d90 <__ashldi3+0x1a>
    1da4:	0f 91       	pop	r16
    1da6:	08 95       	ret

00001da8 <__ashrdi3>:
    1da8:	97 fb       	bst	r25, 7
    1daa:	10 f8       	bld	r1, 0

00001dac <__lshrdi3>:
    1dac:	16 94       	lsr	r1
    1dae:	00 08       	sbc	r0, r0
    1db0:	0f 93       	push	r16
    1db2:	08 30       	cpi	r16, 0x08	; 8
    1db4:	98 f0       	brcs	.+38     	; 0x1ddc <__lshrdi3+0x30>
    1db6:	08 50       	subi	r16, 0x08	; 8
    1db8:	23 2f       	mov	r18, r19
    1dba:	34 2f       	mov	r19, r20
    1dbc:	45 2f       	mov	r20, r21
    1dbe:	56 2f       	mov	r21, r22
    1dc0:	67 2f       	mov	r22, r23
    1dc2:	78 2f       	mov	r23, r24
    1dc4:	89 2f       	mov	r24, r25
    1dc6:	90 2d       	mov	r25, r0
    1dc8:	f4 cf       	rjmp	.-24     	; 0x1db2 <__lshrdi3+0x6>
    1dca:	05 94       	asr	r0
    1dcc:	97 95       	ror	r25
    1dce:	87 95       	ror	r24
    1dd0:	77 95       	ror	r23
    1dd2:	67 95       	ror	r22
    1dd4:	57 95       	ror	r21
    1dd6:	47 95       	ror	r20
    1dd8:	37 95       	ror	r19
    1dda:	27 95       	ror	r18
    1ddc:	0a 95       	dec	r16
    1dde:	aa f7       	brpl	.-22     	; 0x1dca <__lshrdi3+0x1e>
    1de0:	0f 91       	pop	r16
    1de2:	08 95       	ret

00001de4 <__adddi3>:
    1de4:	2a 0d       	add	r18, r10
    1de6:	3b 1d       	adc	r19, r11
    1de8:	4c 1d       	adc	r20, r12
    1dea:	5d 1d       	adc	r21, r13
    1dec:	6e 1d       	adc	r22, r14
    1dee:	7f 1d       	adc	r23, r15
    1df0:	80 1f       	adc	r24, r16
    1df2:	91 1f       	adc	r25, r17
    1df4:	08 95       	ret

00001df6 <__subdi3>:
    1df6:	2a 19       	sub	r18, r10
    1df8:	3b 09       	sbc	r19, r11
    1dfa:	4c 09       	sbc	r20, r12
    1dfc:	5d 09       	sbc	r21, r13
    1dfe:	6e 09       	sbc	r22, r14
    1e00:	7f 09       	sbc	r23, r15
    1e02:	80 0b       	sbc	r24, r16
    1e04:	91 0b       	sbc	r25, r17
    1e06:	08 95       	ret

00001e08 <__cmpdi2_s8>:
    1e08:	00 24       	eor	r0, r0
    1e0a:	a7 fd       	sbrc	r26, 7
    1e0c:	00 94       	com	r0
    1e0e:	2a 17       	cp	r18, r26
    1e10:	30 05       	cpc	r19, r0
    1e12:	40 05       	cpc	r20, r0
    1e14:	50 05       	cpc	r21, r0
    1e16:	60 05       	cpc	r22, r0
    1e18:	70 05       	cpc	r23, r0
    1e1a:	80 05       	cpc	r24, r0
    1e1c:	90 05       	cpc	r25, r0
    1e1e:	08 95       	ret

00001e20 <__udivmodhi4>:
    1e20:	aa 1b       	sub	r26, r26
    1e22:	bb 1b       	sub	r27, r27
    1e24:	51 e1       	ldi	r21, 0x11	; 17
    1e26:	07 c0       	rjmp	.+14     	; 0x1e36 <__udivmodhi4_ep>

00001e28 <__udivmodhi4_loop>:
    1e28:	aa 1f       	adc	r26, r26
    1e2a:	bb 1f       	adc	r27, r27
    1e2c:	a6 17       	cp	r26, r22
    1e2e:	b7 07       	cpc	r27, r23
    1e30:	10 f0       	brcs	.+4      	; 0x1e36 <__udivmodhi4_ep>
    1e32:	a6 1b       	sub	r26, r22
    1e34:	b7 0b       	sbc	r27, r23

00001e36 <__udivmodhi4_ep>:
    1e36:	88 1f       	adc	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	5a 95       	dec	r21
    1e3c:	a9 f7       	brne	.-22     	; 0x1e28 <__udivmodhi4_loop>
    1e3e:	80 95       	com	r24
    1e40:	90 95       	com	r25
    1e42:	bc 01       	movw	r22, r24
    1e44:	cd 01       	movw	r24, r26
    1e46:	08 95       	ret

00001e48 <__umulhisi3>:
    1e48:	a2 9f       	mul	r26, r18
    1e4a:	b0 01       	movw	r22, r0
    1e4c:	b3 9f       	mul	r27, r19
    1e4e:	c0 01       	movw	r24, r0
    1e50:	a3 9f       	mul	r26, r19
    1e52:	70 0d       	add	r23, r0
    1e54:	81 1d       	adc	r24, r1
    1e56:	11 24       	eor	r1, r1
    1e58:	91 1d       	adc	r25, r1
    1e5a:	b2 9f       	mul	r27, r18
    1e5c:	70 0d       	add	r23, r0
    1e5e:	81 1d       	adc	r24, r1
    1e60:	11 24       	eor	r1, r1
    1e62:	91 1d       	adc	r25, r1
    1e64:	08 95       	ret

00001e66 <sprintf>:
    1e66:	ae e0       	ldi	r26, 0x0E	; 14
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e9 e3       	ldi	r30, 0x39	; 57
    1e6c:	ff e0       	ldi	r31, 0x0F	; 15
    1e6e:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__prologue_saves__+0x1c>
    1e72:	0d 89       	ldd	r16, Y+21	; 0x15
    1e74:	1e 89       	ldd	r17, Y+22	; 0x16
    1e76:	86 e0       	ldi	r24, 0x06	; 6
    1e78:	8c 83       	std	Y+4, r24	; 0x04
    1e7a:	1a 83       	std	Y+2, r17	; 0x02
    1e7c:	09 83       	std	Y+1, r16	; 0x01
    1e7e:	8f ef       	ldi	r24, 0xFF	; 255
    1e80:	9f e7       	ldi	r25, 0x7F	; 127
    1e82:	9e 83       	std	Y+6, r25	; 0x06
    1e84:	8d 83       	std	Y+5, r24	; 0x05
    1e86:	ae 01       	movw	r20, r28
    1e88:	47 5e       	subi	r20, 0xE7	; 231
    1e8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e8c:	6f 89       	ldd	r22, Y+23	; 0x17
    1e8e:	78 8d       	ldd	r23, Y+24	; 0x18
    1e90:	ce 01       	movw	r24, r28
    1e92:	01 96       	adiw	r24, 0x01	; 1
    1e94:	0e 94 56 0f 	call	0x1eac	; 0x1eac <vfprintf>
    1e98:	2f 81       	ldd	r18, Y+7	; 0x07
    1e9a:	38 85       	ldd	r19, Y+8	; 0x08
    1e9c:	f8 01       	movw	r30, r16
    1e9e:	e2 0f       	add	r30, r18
    1ea0:	f3 1f       	adc	r31, r19
    1ea2:	10 82       	st	Z, r1
    1ea4:	2e 96       	adiw	r28, 0x0e	; 14
    1ea6:	e4 e0       	ldi	r30, 0x04	; 4
    1ea8:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__epilogue_restores__+0x1c>

00001eac <vfprintf>:
    1eac:	ac e0       	ldi	r26, 0x0C	; 12
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	ec e5       	ldi	r30, 0x5C	; 92
    1eb2:	ff e0       	ldi	r31, 0x0F	; 15
    1eb4:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__prologue_saves__>
    1eb8:	7c 01       	movw	r14, r24
    1eba:	6b 01       	movw	r12, r22
    1ebc:	8a 01       	movw	r16, r20
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	17 82       	std	Z+7, r1	; 0x07
    1ec2:	16 82       	std	Z+6, r1	; 0x06
    1ec4:	83 81       	ldd	r24, Z+3	; 0x03
    1ec6:	81 ff       	sbrs	r24, 1
    1ec8:	bd c1       	rjmp	.+890    	; 0x2244 <vfprintf+0x398>
    1eca:	ce 01       	movw	r24, r28
    1ecc:	01 96       	adiw	r24, 0x01	; 1
    1ece:	4c 01       	movw	r8, r24
    1ed0:	f7 01       	movw	r30, r14
    1ed2:	93 81       	ldd	r25, Z+3	; 0x03
    1ed4:	f6 01       	movw	r30, r12
    1ed6:	93 fd       	sbrc	r25, 3
    1ed8:	85 91       	lpm	r24, Z+
    1eda:	93 ff       	sbrs	r25, 3
    1edc:	81 91       	ld	r24, Z+
    1ede:	6f 01       	movw	r12, r30
    1ee0:	88 23       	and	r24, r24
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <vfprintf+0x3a>
    1ee4:	ab c1       	rjmp	.+854    	; 0x223c <vfprintf+0x390>
    1ee6:	85 32       	cpi	r24, 0x25	; 37
    1ee8:	39 f4       	brne	.+14     	; 0x1ef8 <vfprintf+0x4c>
    1eea:	93 fd       	sbrc	r25, 3
    1eec:	85 91       	lpm	r24, Z+
    1eee:	93 ff       	sbrs	r25, 3
    1ef0:	81 91       	ld	r24, Z+
    1ef2:	6f 01       	movw	r12, r30
    1ef4:	85 32       	cpi	r24, 0x25	; 37
    1ef6:	29 f4       	brne	.+10     	; 0x1f02 <vfprintf+0x56>
    1ef8:	b7 01       	movw	r22, r14
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	0e 94 3e 11 	call	0x227c	; 0x227c <fputc>
    1f00:	e7 cf       	rjmp	.-50     	; 0x1ed0 <vfprintf+0x24>
    1f02:	51 2c       	mov	r5, r1
    1f04:	31 2c       	mov	r3, r1
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	20 32       	cpi	r18, 0x20	; 32
    1f0a:	a0 f4       	brcc	.+40     	; 0x1f34 <vfprintf+0x88>
    1f0c:	8b 32       	cpi	r24, 0x2B	; 43
    1f0e:	69 f0       	breq	.+26     	; 0x1f2a <vfprintf+0x7e>
    1f10:	30 f4       	brcc	.+12     	; 0x1f1e <vfprintf+0x72>
    1f12:	80 32       	cpi	r24, 0x20	; 32
    1f14:	59 f0       	breq	.+22     	; 0x1f2c <vfprintf+0x80>
    1f16:	83 32       	cpi	r24, 0x23	; 35
    1f18:	69 f4       	brne	.+26     	; 0x1f34 <vfprintf+0x88>
    1f1a:	20 61       	ori	r18, 0x10	; 16
    1f1c:	2c c0       	rjmp	.+88     	; 0x1f76 <vfprintf+0xca>
    1f1e:	8d 32       	cpi	r24, 0x2D	; 45
    1f20:	39 f0       	breq	.+14     	; 0x1f30 <vfprintf+0x84>
    1f22:	80 33       	cpi	r24, 0x30	; 48
    1f24:	39 f4       	brne	.+14     	; 0x1f34 <vfprintf+0x88>
    1f26:	21 60       	ori	r18, 0x01	; 1
    1f28:	26 c0       	rjmp	.+76     	; 0x1f76 <vfprintf+0xca>
    1f2a:	22 60       	ori	r18, 0x02	; 2
    1f2c:	24 60       	ori	r18, 0x04	; 4
    1f2e:	23 c0       	rjmp	.+70     	; 0x1f76 <vfprintf+0xca>
    1f30:	28 60       	ori	r18, 0x08	; 8
    1f32:	21 c0       	rjmp	.+66     	; 0x1f76 <vfprintf+0xca>
    1f34:	27 fd       	sbrc	r18, 7
    1f36:	27 c0       	rjmp	.+78     	; 0x1f86 <vfprintf+0xda>
    1f38:	30 ed       	ldi	r19, 0xD0	; 208
    1f3a:	38 0f       	add	r19, r24
    1f3c:	3a 30       	cpi	r19, 0x0A	; 10
    1f3e:	78 f4       	brcc	.+30     	; 0x1f5e <vfprintf+0xb2>
    1f40:	26 ff       	sbrs	r18, 6
    1f42:	06 c0       	rjmp	.+12     	; 0x1f50 <vfprintf+0xa4>
    1f44:	fa e0       	ldi	r31, 0x0A	; 10
    1f46:	5f 9e       	mul	r5, r31
    1f48:	30 0d       	add	r19, r0
    1f4a:	11 24       	eor	r1, r1
    1f4c:	53 2e       	mov	r5, r19
    1f4e:	13 c0       	rjmp	.+38     	; 0x1f76 <vfprintf+0xca>
    1f50:	8a e0       	ldi	r24, 0x0A	; 10
    1f52:	38 9e       	mul	r3, r24
    1f54:	30 0d       	add	r19, r0
    1f56:	11 24       	eor	r1, r1
    1f58:	33 2e       	mov	r3, r19
    1f5a:	20 62       	ori	r18, 0x20	; 32
    1f5c:	0c c0       	rjmp	.+24     	; 0x1f76 <vfprintf+0xca>
    1f5e:	8e 32       	cpi	r24, 0x2E	; 46
    1f60:	21 f4       	brne	.+8      	; 0x1f6a <vfprintf+0xbe>
    1f62:	26 fd       	sbrc	r18, 6
    1f64:	6b c1       	rjmp	.+726    	; 0x223c <vfprintf+0x390>
    1f66:	20 64       	ori	r18, 0x40	; 64
    1f68:	06 c0       	rjmp	.+12     	; 0x1f76 <vfprintf+0xca>
    1f6a:	8c 36       	cpi	r24, 0x6C	; 108
    1f6c:	11 f4       	brne	.+4      	; 0x1f72 <vfprintf+0xc6>
    1f6e:	20 68       	ori	r18, 0x80	; 128
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <vfprintf+0xca>
    1f72:	88 36       	cpi	r24, 0x68	; 104
    1f74:	41 f4       	brne	.+16     	; 0x1f86 <vfprintf+0xda>
    1f76:	f6 01       	movw	r30, r12
    1f78:	93 fd       	sbrc	r25, 3
    1f7a:	85 91       	lpm	r24, Z+
    1f7c:	93 ff       	sbrs	r25, 3
    1f7e:	81 91       	ld	r24, Z+
    1f80:	6f 01       	movw	r12, r30
    1f82:	81 11       	cpse	r24, r1
    1f84:	c1 cf       	rjmp	.-126    	; 0x1f08 <vfprintf+0x5c>
    1f86:	98 2f       	mov	r25, r24
    1f88:	9f 7d       	andi	r25, 0xDF	; 223
    1f8a:	95 54       	subi	r25, 0x45	; 69
    1f8c:	93 30       	cpi	r25, 0x03	; 3
    1f8e:	28 f4       	brcc	.+10     	; 0x1f9a <vfprintf+0xee>
    1f90:	0c 5f       	subi	r16, 0xFC	; 252
    1f92:	1f 4f       	sbci	r17, 0xFF	; 255
    1f94:	ff e3       	ldi	r31, 0x3F	; 63
    1f96:	f9 83       	std	Y+1, r31	; 0x01
    1f98:	0d c0       	rjmp	.+26     	; 0x1fb4 <vfprintf+0x108>
    1f9a:	83 36       	cpi	r24, 0x63	; 99
    1f9c:	31 f0       	breq	.+12     	; 0x1faa <vfprintf+0xfe>
    1f9e:	83 37       	cpi	r24, 0x73	; 115
    1fa0:	71 f0       	breq	.+28     	; 0x1fbe <vfprintf+0x112>
    1fa2:	83 35       	cpi	r24, 0x53	; 83
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <vfprintf+0xfc>
    1fa6:	5b c0       	rjmp	.+182    	; 0x205e <vfprintf+0x1b2>
    1fa8:	22 c0       	rjmp	.+68     	; 0x1fee <vfprintf+0x142>
    1faa:	f8 01       	movw	r30, r16
    1fac:	80 81       	ld	r24, Z
    1fae:	89 83       	std	Y+1, r24	; 0x01
    1fb0:	0e 5f       	subi	r16, 0xFE	; 254
    1fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb4:	44 24       	eor	r4, r4
    1fb6:	43 94       	inc	r4
    1fb8:	51 2c       	mov	r5, r1
    1fba:	54 01       	movw	r10, r8
    1fbc:	15 c0       	rjmp	.+42     	; 0x1fe8 <vfprintf+0x13c>
    1fbe:	38 01       	movw	r6, r16
    1fc0:	f2 e0       	ldi	r31, 0x02	; 2
    1fc2:	6f 0e       	add	r6, r31
    1fc4:	71 1c       	adc	r7, r1
    1fc6:	f8 01       	movw	r30, r16
    1fc8:	a0 80       	ld	r10, Z
    1fca:	b1 80       	ldd	r11, Z+1	; 0x01
    1fcc:	26 ff       	sbrs	r18, 6
    1fce:	03 c0       	rjmp	.+6      	; 0x1fd6 <vfprintf+0x12a>
    1fd0:	65 2d       	mov	r22, r5
    1fd2:	70 e0       	ldi	r23, 0x00	; 0
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <vfprintf+0x12e>
    1fd6:	6f ef       	ldi	r22, 0xFF	; 255
    1fd8:	7f ef       	ldi	r23, 0xFF	; 255
    1fda:	c5 01       	movw	r24, r10
    1fdc:	2c 87       	std	Y+12, r18	; 0x0c
    1fde:	0e 94 33 11 	call	0x2266	; 0x2266 <strnlen>
    1fe2:	2c 01       	movw	r4, r24
    1fe4:	83 01       	movw	r16, r6
    1fe6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fe8:	2f 77       	andi	r18, 0x7F	; 127
    1fea:	22 2e       	mov	r2, r18
    1fec:	17 c0       	rjmp	.+46     	; 0x201c <vfprintf+0x170>
    1fee:	38 01       	movw	r6, r16
    1ff0:	f2 e0       	ldi	r31, 0x02	; 2
    1ff2:	6f 0e       	add	r6, r31
    1ff4:	71 1c       	adc	r7, r1
    1ff6:	f8 01       	movw	r30, r16
    1ff8:	a0 80       	ld	r10, Z
    1ffa:	b1 80       	ldd	r11, Z+1	; 0x01
    1ffc:	26 ff       	sbrs	r18, 6
    1ffe:	03 c0       	rjmp	.+6      	; 0x2006 <vfprintf+0x15a>
    2000:	65 2d       	mov	r22, r5
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	02 c0       	rjmp	.+4      	; 0x200a <vfprintf+0x15e>
    2006:	6f ef       	ldi	r22, 0xFF	; 255
    2008:	7f ef       	ldi	r23, 0xFF	; 255
    200a:	c5 01       	movw	r24, r10
    200c:	2c 87       	std	Y+12, r18	; 0x0c
    200e:	0e 94 28 11 	call	0x2250	; 0x2250 <strnlen_P>
    2012:	2c 01       	movw	r4, r24
    2014:	2c 85       	ldd	r18, Y+12	; 0x0c
    2016:	20 68       	ori	r18, 0x80	; 128
    2018:	22 2e       	mov	r2, r18
    201a:	83 01       	movw	r16, r6
    201c:	23 fc       	sbrc	r2, 3
    201e:	1b c0       	rjmp	.+54     	; 0x2056 <vfprintf+0x1aa>
    2020:	83 2d       	mov	r24, r3
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	48 16       	cp	r4, r24
    2026:	59 06       	cpc	r5, r25
    2028:	b0 f4       	brcc	.+44     	; 0x2056 <vfprintf+0x1aa>
    202a:	b7 01       	movw	r22, r14
    202c:	80 e2       	ldi	r24, 0x20	; 32
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	0e 94 3e 11 	call	0x227c	; 0x227c <fputc>
    2034:	3a 94       	dec	r3
    2036:	f4 cf       	rjmp	.-24     	; 0x2020 <vfprintf+0x174>
    2038:	f5 01       	movw	r30, r10
    203a:	27 fc       	sbrc	r2, 7
    203c:	85 91       	lpm	r24, Z+
    203e:	27 fe       	sbrs	r2, 7
    2040:	81 91       	ld	r24, Z+
    2042:	5f 01       	movw	r10, r30
    2044:	b7 01       	movw	r22, r14
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	0e 94 3e 11 	call	0x227c	; 0x227c <fputc>
    204c:	31 10       	cpse	r3, r1
    204e:	3a 94       	dec	r3
    2050:	f1 e0       	ldi	r31, 0x01	; 1
    2052:	4f 1a       	sub	r4, r31
    2054:	51 08       	sbc	r5, r1
    2056:	41 14       	cp	r4, r1
    2058:	51 04       	cpc	r5, r1
    205a:	71 f7       	brne	.-36     	; 0x2038 <vfprintf+0x18c>
    205c:	e5 c0       	rjmp	.+458    	; 0x2228 <vfprintf+0x37c>
    205e:	84 36       	cpi	r24, 0x64	; 100
    2060:	11 f0       	breq	.+4      	; 0x2066 <vfprintf+0x1ba>
    2062:	89 36       	cpi	r24, 0x69	; 105
    2064:	39 f5       	brne	.+78     	; 0x20b4 <vfprintf+0x208>
    2066:	f8 01       	movw	r30, r16
    2068:	27 ff       	sbrs	r18, 7
    206a:	07 c0       	rjmp	.+14     	; 0x207a <vfprintf+0x1ce>
    206c:	60 81       	ld	r22, Z
    206e:	71 81       	ldd	r23, Z+1	; 0x01
    2070:	82 81       	ldd	r24, Z+2	; 0x02
    2072:	93 81       	ldd	r25, Z+3	; 0x03
    2074:	0c 5f       	subi	r16, 0xFC	; 252
    2076:	1f 4f       	sbci	r17, 0xFF	; 255
    2078:	08 c0       	rjmp	.+16     	; 0x208a <vfprintf+0x1de>
    207a:	60 81       	ld	r22, Z
    207c:	71 81       	ldd	r23, Z+1	; 0x01
    207e:	07 2e       	mov	r0, r23
    2080:	00 0c       	add	r0, r0
    2082:	88 0b       	sbc	r24, r24
    2084:	99 0b       	sbc	r25, r25
    2086:	0e 5f       	subi	r16, 0xFE	; 254
    2088:	1f 4f       	sbci	r17, 0xFF	; 255
    208a:	2f 76       	andi	r18, 0x6F	; 111
    208c:	72 2e       	mov	r7, r18
    208e:	97 ff       	sbrs	r25, 7
    2090:	09 c0       	rjmp	.+18     	; 0x20a4 <vfprintf+0x1f8>
    2092:	90 95       	com	r25
    2094:	80 95       	com	r24
    2096:	70 95       	com	r23
    2098:	61 95       	neg	r22
    209a:	7f 4f       	sbci	r23, 0xFF	; 255
    209c:	8f 4f       	sbci	r24, 0xFF	; 255
    209e:	9f 4f       	sbci	r25, 0xFF	; 255
    20a0:	20 68       	ori	r18, 0x80	; 128
    20a2:	72 2e       	mov	r7, r18
    20a4:	2a e0       	ldi	r18, 0x0A	; 10
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	a4 01       	movw	r20, r8
    20aa:	0e 94 76 11 	call	0x22ec	; 0x22ec <__ultoa_invert>
    20ae:	a8 2e       	mov	r10, r24
    20b0:	a8 18       	sub	r10, r8
    20b2:	44 c0       	rjmp	.+136    	; 0x213c <vfprintf+0x290>
    20b4:	85 37       	cpi	r24, 0x75	; 117
    20b6:	29 f4       	brne	.+10     	; 0x20c2 <vfprintf+0x216>
    20b8:	2f 7e       	andi	r18, 0xEF	; 239
    20ba:	b2 2e       	mov	r11, r18
    20bc:	2a e0       	ldi	r18, 0x0A	; 10
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	25 c0       	rjmp	.+74     	; 0x210c <vfprintf+0x260>
    20c2:	f2 2f       	mov	r31, r18
    20c4:	f9 7f       	andi	r31, 0xF9	; 249
    20c6:	bf 2e       	mov	r11, r31
    20c8:	8f 36       	cpi	r24, 0x6F	; 111
    20ca:	c1 f0       	breq	.+48     	; 0x20fc <vfprintf+0x250>
    20cc:	18 f4       	brcc	.+6      	; 0x20d4 <vfprintf+0x228>
    20ce:	88 35       	cpi	r24, 0x58	; 88
    20d0:	79 f0       	breq	.+30     	; 0x20f0 <vfprintf+0x244>
    20d2:	b4 c0       	rjmp	.+360    	; 0x223c <vfprintf+0x390>
    20d4:	80 37       	cpi	r24, 0x70	; 112
    20d6:	19 f0       	breq	.+6      	; 0x20de <vfprintf+0x232>
    20d8:	88 37       	cpi	r24, 0x78	; 120
    20da:	21 f0       	breq	.+8      	; 0x20e4 <vfprintf+0x238>
    20dc:	af c0       	rjmp	.+350    	; 0x223c <vfprintf+0x390>
    20de:	2f 2f       	mov	r18, r31
    20e0:	20 61       	ori	r18, 0x10	; 16
    20e2:	b2 2e       	mov	r11, r18
    20e4:	b4 fe       	sbrs	r11, 4
    20e6:	0d c0       	rjmp	.+26     	; 0x2102 <vfprintf+0x256>
    20e8:	8b 2d       	mov	r24, r11
    20ea:	84 60       	ori	r24, 0x04	; 4
    20ec:	b8 2e       	mov	r11, r24
    20ee:	09 c0       	rjmp	.+18     	; 0x2102 <vfprintf+0x256>
    20f0:	24 ff       	sbrs	r18, 4
    20f2:	0a c0       	rjmp	.+20     	; 0x2108 <vfprintf+0x25c>
    20f4:	9f 2f       	mov	r25, r31
    20f6:	96 60       	ori	r25, 0x06	; 6
    20f8:	b9 2e       	mov	r11, r25
    20fa:	06 c0       	rjmp	.+12     	; 0x2108 <vfprintf+0x25c>
    20fc:	28 e0       	ldi	r18, 0x08	; 8
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	05 c0       	rjmp	.+10     	; 0x210c <vfprintf+0x260>
    2102:	20 e1       	ldi	r18, 0x10	; 16
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	02 c0       	rjmp	.+4      	; 0x210c <vfprintf+0x260>
    2108:	20 e1       	ldi	r18, 0x10	; 16
    210a:	32 e0       	ldi	r19, 0x02	; 2
    210c:	f8 01       	movw	r30, r16
    210e:	b7 fe       	sbrs	r11, 7
    2110:	07 c0       	rjmp	.+14     	; 0x2120 <vfprintf+0x274>
    2112:	60 81       	ld	r22, Z
    2114:	71 81       	ldd	r23, Z+1	; 0x01
    2116:	82 81       	ldd	r24, Z+2	; 0x02
    2118:	93 81       	ldd	r25, Z+3	; 0x03
    211a:	0c 5f       	subi	r16, 0xFC	; 252
    211c:	1f 4f       	sbci	r17, 0xFF	; 255
    211e:	06 c0       	rjmp	.+12     	; 0x212c <vfprintf+0x280>
    2120:	60 81       	ld	r22, Z
    2122:	71 81       	ldd	r23, Z+1	; 0x01
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	0e 5f       	subi	r16, 0xFE	; 254
    212a:	1f 4f       	sbci	r17, 0xFF	; 255
    212c:	a4 01       	movw	r20, r8
    212e:	0e 94 76 11 	call	0x22ec	; 0x22ec <__ultoa_invert>
    2132:	a8 2e       	mov	r10, r24
    2134:	a8 18       	sub	r10, r8
    2136:	fb 2d       	mov	r31, r11
    2138:	ff 77       	andi	r31, 0x7F	; 127
    213a:	7f 2e       	mov	r7, r31
    213c:	76 fe       	sbrs	r7, 6
    213e:	0b c0       	rjmp	.+22     	; 0x2156 <vfprintf+0x2aa>
    2140:	37 2d       	mov	r19, r7
    2142:	3e 7f       	andi	r19, 0xFE	; 254
    2144:	a5 14       	cp	r10, r5
    2146:	50 f4       	brcc	.+20     	; 0x215c <vfprintf+0x2b0>
    2148:	74 fe       	sbrs	r7, 4
    214a:	0a c0       	rjmp	.+20     	; 0x2160 <vfprintf+0x2b4>
    214c:	72 fc       	sbrc	r7, 2
    214e:	08 c0       	rjmp	.+16     	; 0x2160 <vfprintf+0x2b4>
    2150:	37 2d       	mov	r19, r7
    2152:	3e 7e       	andi	r19, 0xEE	; 238
    2154:	05 c0       	rjmp	.+10     	; 0x2160 <vfprintf+0x2b4>
    2156:	ba 2c       	mov	r11, r10
    2158:	37 2d       	mov	r19, r7
    215a:	03 c0       	rjmp	.+6      	; 0x2162 <vfprintf+0x2b6>
    215c:	ba 2c       	mov	r11, r10
    215e:	01 c0       	rjmp	.+2      	; 0x2162 <vfprintf+0x2b6>
    2160:	b5 2c       	mov	r11, r5
    2162:	34 ff       	sbrs	r19, 4
    2164:	0d c0       	rjmp	.+26     	; 0x2180 <vfprintf+0x2d4>
    2166:	fe 01       	movw	r30, r28
    2168:	ea 0d       	add	r30, r10
    216a:	f1 1d       	adc	r31, r1
    216c:	80 81       	ld	r24, Z
    216e:	80 33       	cpi	r24, 0x30	; 48
    2170:	11 f4       	brne	.+4      	; 0x2176 <vfprintf+0x2ca>
    2172:	39 7e       	andi	r19, 0xE9	; 233
    2174:	09 c0       	rjmp	.+18     	; 0x2188 <vfprintf+0x2dc>
    2176:	32 ff       	sbrs	r19, 2
    2178:	06 c0       	rjmp	.+12     	; 0x2186 <vfprintf+0x2da>
    217a:	b3 94       	inc	r11
    217c:	b3 94       	inc	r11
    217e:	04 c0       	rjmp	.+8      	; 0x2188 <vfprintf+0x2dc>
    2180:	83 2f       	mov	r24, r19
    2182:	86 78       	andi	r24, 0x86	; 134
    2184:	09 f0       	breq	.+2      	; 0x2188 <vfprintf+0x2dc>
    2186:	b3 94       	inc	r11
    2188:	33 fd       	sbrc	r19, 3
    218a:	13 c0       	rjmp	.+38     	; 0x21b2 <vfprintf+0x306>
    218c:	30 ff       	sbrs	r19, 0
    218e:	06 c0       	rjmp	.+12     	; 0x219c <vfprintf+0x2f0>
    2190:	5a 2c       	mov	r5, r10
    2192:	b3 14       	cp	r11, r3
    2194:	18 f4       	brcc	.+6      	; 0x219c <vfprintf+0x2f0>
    2196:	53 0c       	add	r5, r3
    2198:	5b 18       	sub	r5, r11
    219a:	b3 2c       	mov	r11, r3
    219c:	b3 14       	cp	r11, r3
    219e:	68 f4       	brcc	.+26     	; 0x21ba <vfprintf+0x30e>
    21a0:	b7 01       	movw	r22, r14
    21a2:	80 e2       	ldi	r24, 0x20	; 32
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	3c 87       	std	Y+12, r19	; 0x0c
    21a8:	0e 94 3e 11 	call	0x227c	; 0x227c <fputc>
    21ac:	b3 94       	inc	r11
    21ae:	3c 85       	ldd	r19, Y+12	; 0x0c
    21b0:	f5 cf       	rjmp	.-22     	; 0x219c <vfprintf+0x2f0>
    21b2:	b3 14       	cp	r11, r3
    21b4:	10 f4       	brcc	.+4      	; 0x21ba <vfprintf+0x30e>
    21b6:	3b 18       	sub	r3, r11
    21b8:	01 c0       	rjmp	.+2      	; 0x21bc <vfprintf+0x310>
    21ba:	31 2c       	mov	r3, r1
    21bc:	34 ff       	sbrs	r19, 4
    21be:	12 c0       	rjmp	.+36     	; 0x21e4 <vfprintf+0x338>
    21c0:	b7 01       	movw	r22, r14
    21c2:	80 e3       	ldi	r24, 0x30	; 48
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	3c 87       	std	Y+12, r19	; 0x0c
    21c8:	0e 94 3e 11 	call	0x227c	; 0x227c <fputc>
    21cc:	3c 85       	ldd	r19, Y+12	; 0x0c
    21ce:	32 ff       	sbrs	r19, 2
    21d0:	17 c0       	rjmp	.+46     	; 0x2200 <vfprintf+0x354>
    21d2:	31 fd       	sbrc	r19, 1
    21d4:	03 c0       	rjmp	.+6      	; 0x21dc <vfprintf+0x330>
    21d6:	88 e7       	ldi	r24, 0x78	; 120
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <vfprintf+0x334>
    21dc:	88 e5       	ldi	r24, 0x58	; 88
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	b7 01       	movw	r22, r14
    21e2:	0c c0       	rjmp	.+24     	; 0x21fc <vfprintf+0x350>
    21e4:	83 2f       	mov	r24, r19
    21e6:	86 78       	andi	r24, 0x86	; 134
    21e8:	59 f0       	breq	.+22     	; 0x2200 <vfprintf+0x354>
    21ea:	31 ff       	sbrs	r19, 1
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <vfprintf+0x346>
    21ee:	8b e2       	ldi	r24, 0x2B	; 43
    21f0:	01 c0       	rjmp	.+2      	; 0x21f4 <vfprintf+0x348>
    21f2:	80 e2       	ldi	r24, 0x20	; 32
    21f4:	37 fd       	sbrc	r19, 7
    21f6:	8d e2       	ldi	r24, 0x2D	; 45
    21f8:	b7 01       	movw	r22, r14
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	0e 94 3e 11 	call	0x227c	; 0x227c <fputc>
    2200:	a5 14       	cp	r10, r5
    2202:	38 f4       	brcc	.+14     	; 0x2212 <vfprintf+0x366>
    2204:	b7 01       	movw	r22, r14
    2206:	80 e3       	ldi	r24, 0x30	; 48
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	0e 94 3e 11 	call	0x227c	; 0x227c <fputc>
    220e:	5a 94       	dec	r5
    2210:	f7 cf       	rjmp	.-18     	; 0x2200 <vfprintf+0x354>
    2212:	aa 94       	dec	r10
    2214:	f4 01       	movw	r30, r8
    2216:	ea 0d       	add	r30, r10
    2218:	f1 1d       	adc	r31, r1
    221a:	80 81       	ld	r24, Z
    221c:	b7 01       	movw	r22, r14
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	0e 94 3e 11 	call	0x227c	; 0x227c <fputc>
    2224:	a1 10       	cpse	r10, r1
    2226:	f5 cf       	rjmp	.-22     	; 0x2212 <vfprintf+0x366>
    2228:	33 20       	and	r3, r3
    222a:	09 f4       	brne	.+2      	; 0x222e <vfprintf+0x382>
    222c:	51 ce       	rjmp	.-862    	; 0x1ed0 <vfprintf+0x24>
    222e:	b7 01       	movw	r22, r14
    2230:	80 e2       	ldi	r24, 0x20	; 32
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	0e 94 3e 11 	call	0x227c	; 0x227c <fputc>
    2238:	3a 94       	dec	r3
    223a:	f6 cf       	rjmp	.-20     	; 0x2228 <vfprintf+0x37c>
    223c:	f7 01       	movw	r30, r14
    223e:	86 81       	ldd	r24, Z+6	; 0x06
    2240:	97 81       	ldd	r25, Z+7	; 0x07
    2242:	02 c0       	rjmp	.+4      	; 0x2248 <vfprintf+0x39c>
    2244:	8f ef       	ldi	r24, 0xFF	; 255
    2246:	9f ef       	ldi	r25, 0xFF	; 255
    2248:	2c 96       	adiw	r28, 0x0c	; 12
    224a:	e2 e1       	ldi	r30, 0x12	; 18
    224c:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__epilogue_restores__>

00002250 <strnlen_P>:
    2250:	fc 01       	movw	r30, r24
    2252:	05 90       	lpm	r0, Z+
    2254:	61 50       	subi	r22, 0x01	; 1
    2256:	70 40       	sbci	r23, 0x00	; 0
    2258:	01 10       	cpse	r0, r1
    225a:	d8 f7       	brcc	.-10     	; 0x2252 <strnlen_P+0x2>
    225c:	80 95       	com	r24
    225e:	90 95       	com	r25
    2260:	8e 0f       	add	r24, r30
    2262:	9f 1f       	adc	r25, r31
    2264:	08 95       	ret

00002266 <strnlen>:
    2266:	fc 01       	movw	r30, r24
    2268:	61 50       	subi	r22, 0x01	; 1
    226a:	70 40       	sbci	r23, 0x00	; 0
    226c:	01 90       	ld	r0, Z+
    226e:	01 10       	cpse	r0, r1
    2270:	d8 f7       	brcc	.-10     	; 0x2268 <strnlen+0x2>
    2272:	80 95       	com	r24
    2274:	90 95       	com	r25
    2276:	8e 0f       	add	r24, r30
    2278:	9f 1f       	adc	r25, r31
    227a:	08 95       	ret

0000227c <fputc>:
    227c:	0f 93       	push	r16
    227e:	1f 93       	push	r17
    2280:	cf 93       	push	r28
    2282:	df 93       	push	r29
    2284:	fb 01       	movw	r30, r22
    2286:	23 81       	ldd	r18, Z+3	; 0x03
    2288:	21 fd       	sbrc	r18, 1
    228a:	03 c0       	rjmp	.+6      	; 0x2292 <fputc+0x16>
    228c:	8f ef       	ldi	r24, 0xFF	; 255
    228e:	9f ef       	ldi	r25, 0xFF	; 255
    2290:	28 c0       	rjmp	.+80     	; 0x22e2 <fputc+0x66>
    2292:	22 ff       	sbrs	r18, 2
    2294:	16 c0       	rjmp	.+44     	; 0x22c2 <fputc+0x46>
    2296:	46 81       	ldd	r20, Z+6	; 0x06
    2298:	57 81       	ldd	r21, Z+7	; 0x07
    229a:	24 81       	ldd	r18, Z+4	; 0x04
    229c:	35 81       	ldd	r19, Z+5	; 0x05
    229e:	42 17       	cp	r20, r18
    22a0:	53 07       	cpc	r21, r19
    22a2:	44 f4       	brge	.+16     	; 0x22b4 <fputc+0x38>
    22a4:	a0 81       	ld	r26, Z
    22a6:	b1 81       	ldd	r27, Z+1	; 0x01
    22a8:	9d 01       	movw	r18, r26
    22aa:	2f 5f       	subi	r18, 0xFF	; 255
    22ac:	3f 4f       	sbci	r19, 0xFF	; 255
    22ae:	31 83       	std	Z+1, r19	; 0x01
    22b0:	20 83       	st	Z, r18
    22b2:	8c 93       	st	X, r24
    22b4:	26 81       	ldd	r18, Z+6	; 0x06
    22b6:	37 81       	ldd	r19, Z+7	; 0x07
    22b8:	2f 5f       	subi	r18, 0xFF	; 255
    22ba:	3f 4f       	sbci	r19, 0xFF	; 255
    22bc:	37 83       	std	Z+7, r19	; 0x07
    22be:	26 83       	std	Z+6, r18	; 0x06
    22c0:	10 c0       	rjmp	.+32     	; 0x22e2 <fputc+0x66>
    22c2:	eb 01       	movw	r28, r22
    22c4:	09 2f       	mov	r16, r25
    22c6:	18 2f       	mov	r17, r24
    22c8:	00 84       	ldd	r0, Z+8	; 0x08
    22ca:	f1 85       	ldd	r31, Z+9	; 0x09
    22cc:	e0 2d       	mov	r30, r0
    22ce:	09 95       	icall
    22d0:	89 2b       	or	r24, r25
    22d2:	e1 f6       	brne	.-72     	; 0x228c <fputc+0x10>
    22d4:	8e 81       	ldd	r24, Y+6	; 0x06
    22d6:	9f 81       	ldd	r25, Y+7	; 0x07
    22d8:	01 96       	adiw	r24, 0x01	; 1
    22da:	9f 83       	std	Y+7, r25	; 0x07
    22dc:	8e 83       	std	Y+6, r24	; 0x06
    22de:	81 2f       	mov	r24, r17
    22e0:	90 2f       	mov	r25, r16
    22e2:	df 91       	pop	r29
    22e4:	cf 91       	pop	r28
    22e6:	1f 91       	pop	r17
    22e8:	0f 91       	pop	r16
    22ea:	08 95       	ret

000022ec <__ultoa_invert>:
    22ec:	fa 01       	movw	r30, r20
    22ee:	aa 27       	eor	r26, r26
    22f0:	28 30       	cpi	r18, 0x08	; 8
    22f2:	51 f1       	breq	.+84     	; 0x2348 <__ultoa_invert+0x5c>
    22f4:	20 31       	cpi	r18, 0x10	; 16
    22f6:	81 f1       	breq	.+96     	; 0x2358 <__ultoa_invert+0x6c>
    22f8:	e8 94       	clt
    22fa:	6f 93       	push	r22
    22fc:	6e 7f       	andi	r22, 0xFE	; 254
    22fe:	6e 5f       	subi	r22, 0xFE	; 254
    2300:	7f 4f       	sbci	r23, 0xFF	; 255
    2302:	8f 4f       	sbci	r24, 0xFF	; 255
    2304:	9f 4f       	sbci	r25, 0xFF	; 255
    2306:	af 4f       	sbci	r26, 0xFF	; 255
    2308:	b1 e0       	ldi	r27, 0x01	; 1
    230a:	3e d0       	rcall	.+124    	; 0x2388 <__ultoa_invert+0x9c>
    230c:	b4 e0       	ldi	r27, 0x04	; 4
    230e:	3c d0       	rcall	.+120    	; 0x2388 <__ultoa_invert+0x9c>
    2310:	67 0f       	add	r22, r23
    2312:	78 1f       	adc	r23, r24
    2314:	89 1f       	adc	r24, r25
    2316:	9a 1f       	adc	r25, r26
    2318:	a1 1d       	adc	r26, r1
    231a:	68 0f       	add	r22, r24
    231c:	79 1f       	adc	r23, r25
    231e:	8a 1f       	adc	r24, r26
    2320:	91 1d       	adc	r25, r1
    2322:	a1 1d       	adc	r26, r1
    2324:	6a 0f       	add	r22, r26
    2326:	71 1d       	adc	r23, r1
    2328:	81 1d       	adc	r24, r1
    232a:	91 1d       	adc	r25, r1
    232c:	a1 1d       	adc	r26, r1
    232e:	20 d0       	rcall	.+64     	; 0x2370 <__ultoa_invert+0x84>
    2330:	09 f4       	brne	.+2      	; 0x2334 <__ultoa_invert+0x48>
    2332:	68 94       	set
    2334:	3f 91       	pop	r19
    2336:	2a e0       	ldi	r18, 0x0A	; 10
    2338:	26 9f       	mul	r18, r22
    233a:	11 24       	eor	r1, r1
    233c:	30 19       	sub	r19, r0
    233e:	30 5d       	subi	r19, 0xD0	; 208
    2340:	31 93       	st	Z+, r19
    2342:	de f6       	brtc	.-74     	; 0x22fa <__ultoa_invert+0xe>
    2344:	cf 01       	movw	r24, r30
    2346:	08 95       	ret
    2348:	46 2f       	mov	r20, r22
    234a:	47 70       	andi	r20, 0x07	; 7
    234c:	40 5d       	subi	r20, 0xD0	; 208
    234e:	41 93       	st	Z+, r20
    2350:	b3 e0       	ldi	r27, 0x03	; 3
    2352:	0f d0       	rcall	.+30     	; 0x2372 <__ultoa_invert+0x86>
    2354:	c9 f7       	brne	.-14     	; 0x2348 <__ultoa_invert+0x5c>
    2356:	f6 cf       	rjmp	.-20     	; 0x2344 <__ultoa_invert+0x58>
    2358:	46 2f       	mov	r20, r22
    235a:	4f 70       	andi	r20, 0x0F	; 15
    235c:	40 5d       	subi	r20, 0xD0	; 208
    235e:	4a 33       	cpi	r20, 0x3A	; 58
    2360:	18 f0       	brcs	.+6      	; 0x2368 <__ultoa_invert+0x7c>
    2362:	49 5d       	subi	r20, 0xD9	; 217
    2364:	31 fd       	sbrc	r19, 1
    2366:	40 52       	subi	r20, 0x20	; 32
    2368:	41 93       	st	Z+, r20
    236a:	02 d0       	rcall	.+4      	; 0x2370 <__ultoa_invert+0x84>
    236c:	a9 f7       	brne	.-22     	; 0x2358 <__ultoa_invert+0x6c>
    236e:	ea cf       	rjmp	.-44     	; 0x2344 <__ultoa_invert+0x58>
    2370:	b4 e0       	ldi	r27, 0x04	; 4
    2372:	a6 95       	lsr	r26
    2374:	97 95       	ror	r25
    2376:	87 95       	ror	r24
    2378:	77 95       	ror	r23
    237a:	67 95       	ror	r22
    237c:	ba 95       	dec	r27
    237e:	c9 f7       	brne	.-14     	; 0x2372 <__ultoa_invert+0x86>
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	61 05       	cpc	r22, r1
    2384:	71 05       	cpc	r23, r1
    2386:	08 95       	ret
    2388:	9b 01       	movw	r18, r22
    238a:	ac 01       	movw	r20, r24
    238c:	0a 2e       	mov	r0, r26
    238e:	06 94       	lsr	r0
    2390:	57 95       	ror	r21
    2392:	47 95       	ror	r20
    2394:	37 95       	ror	r19
    2396:	27 95       	ror	r18
    2398:	ba 95       	dec	r27
    239a:	c9 f7       	brne	.-14     	; 0x238e <__ultoa_invert+0xa2>
    239c:	62 0f       	add	r22, r18
    239e:	73 1f       	adc	r23, r19
    23a0:	84 1f       	adc	r24, r20
    23a2:	95 1f       	adc	r25, r21
    23a4:	a0 1d       	adc	r26, r0
    23a6:	08 95       	ret

000023a8 <_exit>:
    23a8:	f8 94       	cli

000023aa <__stop_program>:
    23aa:	ff cf       	rjmp	.-2      	; 0x23aa <__stop_program>
