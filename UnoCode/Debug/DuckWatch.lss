
DuckWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004c0  00800100  00002a68  00002afc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010a  008005c0  008005c0  00002fbc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002fbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003018  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005504  00000000  00000000  00003358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001949  00000000  00000000  0000885c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000113e  00000000  00000000  0000a1a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b84  00000000  00000000  0000b2e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ef6  00000000  00000000  0000be68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003349  00000000  00000000  0000cd5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  000100a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__vector_14>
      3c:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <__vector_15>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	15 e0       	ldi	r17, 0x05	; 5
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e6       	ldi	r30, 0x68	; 104
      7c:	fa e2       	ldi	r31, 0x2A	; 42
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 3c       	cpi	r26, 0xC0	; 192
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	a0 ec       	ldi	r26, 0xC0	; 192
      8e:	b5 e0       	ldi	r27, 0x05	; 5
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 3c       	cpi	r26, 0xCA	; 202
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <main>
      9e:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN6BME2804initEv>:
			 p_i2c->read(BME280_ADDR, BME280_CTRL_MEAS) | BME280_NORMAL_MODE);
			break;
		case SLEEP:
		default:
			stat = p_i2c->write(BME280_ADDR, BME280_CTRL_MEAS,
			 p_i2c->read(BME280_ADDR, BME280_CTRL_MEAS) | BME280_SLEEP_MODE);
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	ec 01       	movw	r28, r24
      ac:	21 e0       	ldi	r18, 0x01	; 1
      ae:	42 ef       	ldi	r20, 0xF2	; 242
      b0:	6e ee       	ldi	r22, 0xEE	; 238
			break;
	}
	
	return stat;	
}
      b2:	88 81       	ld	r24, Y
      b4:	99 81       	ldd	r25, Y+1	; 0x01
      b6:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN3i2c5writeEhhh>
      ba:	81 11       	cpse	r24, r1
      bc:	10 c0       	rjmp	.+32     	; 0xde <_ZN6BME2804initEv+0x38>
	 * 3. Turn off IIR Filter and set inactive duration to 1s for normal
	 *	  mode
	 */
	return (p_i2c->write(BME280_ADDR, BME280_CTRL_HUM, BME280_H_OVSM_1)
			|| p_i2c->write(BME280_ADDR, BME280_CTRL_MEAS, 
				BME280_P_OVSM_1 | BME280_T_OVSM_16 | BME280_NORMAL_MODE)
      be:	27 e3       	ldi	r18, 0x37	; 55
      c0:	44 ef       	ldi	r20, 0xF4	; 244
      c2:	6e ee       	ldi	r22, 0xEE	; 238
      c4:	88 81       	ld	r24, Y
      c6:	99 81       	ldd	r25, Y+1	; 0x01
      c8:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN3i2c5writeEhhh>
	 *    by 1 and set mode to normal
	 * 3. Turn off IIR Filter and set inactive duration to 1s for normal
	 *	  mode
	 */
	return (p_i2c->write(BME280_ADDR, BME280_CTRL_HUM, BME280_H_OVSM_1)
			|| p_i2c->write(BME280_ADDR, BME280_CTRL_MEAS, 
      cc:	81 11       	cpse	r24, r1
      ce:	07 c0       	rjmp	.+14     	; 0xde <_ZN6BME2804initEv+0x38>
				BME280_P_OVSM_1 | BME280_T_OVSM_16 | BME280_NORMAL_MODE)
			|| p_i2c->write(BME280_ADDR, BME280_CONFIG, 
				BME280_TSB_F | BME280_FLTR_OFF | BME280_SPI_DIS));
      d0:	20 e0       	ldi	r18, 0x00	; 0
      d2:	45 ef       	ldi	r20, 0xF5	; 245
      d4:	6e ee       	ldi	r22, 0xEE	; 238
      d6:	88 81       	ld	r24, Y
      d8:	99 81       	ldd	r25, Y+1	; 0x01
      da:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN3i2c5writeEhhh>
}
      de:	df 91       	pop	r29
      e0:	cf 91       	pop	r28
      e2:	08 95       	ret

000000e4 <_ZN6BME28016convert_pressureEv>:
 * Return:		int32_t - the human-readable pressure reading accurate to
 *							2 decimal places in Pascals. A value of 5382 is
 *							equal to 53.82 Pa
 ****************************************************************************/
int32_t BME280::convert_pressure (void)
{
      e4:	2f 92       	push	r2
      e6:	3f 92       	push	r3
      e8:	4f 92       	push	r4
      ea:	5f 92       	push	r5
      ec:	6f 92       	push	r6
      ee:	7f 92       	push	r7
      f0:	8f 92       	push	r8
      f2:	9f 92       	push	r9
      f4:	af 92       	push	r10
      f6:	bf 92       	push	r11
      f8:	cf 92       	push	r12
      fa:	df 92       	push	r13
      fc:	ef 92       	push	r14
      fe:	ff 92       	push	r15
     100:	0f 93       	push	r16
     102:	1f 93       	push	r17
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
     108:	cd b7       	in	r28, 0x3d	; 61
     10a:	de b7       	in	r29, 0x3e	; 62
     10c:	a0 97       	sbiw	r28, 0x20	; 32
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	f8 94       	cli
     112:	de bf       	out	0x3e, r29	; 62
     114:	0f be       	out	0x3f, r0	; 63
     116:	cd bf       	out	0x3d, r28	; 61
     118:	98 a3       	std	Y+32, r25	; 0x20
     11a:	8f 8f       	std	Y+31, r24	; 0x1f
	int64_t var1, var2, p;
	
	raw_pres >>= 4;
     11c:	fc 01       	movw	r30, r24
     11e:	80 85       	ldd	r24, Z+8	; 0x08
     120:	91 85       	ldd	r25, Z+9	; 0x09
     122:	a2 85       	ldd	r26, Z+10	; 0x0a
     124:	b3 85       	ldd	r27, Z+11	; 0x0b
     126:	9c 01       	movw	r18, r24
     128:	ad 01       	movw	r20, r26
     12a:	68 94       	set
     12c:	13 f8       	bld	r1, 3
     12e:	55 95       	asr	r21
     130:	47 95       	ror	r20
     132:	37 95       	ror	r19
     134:	27 95       	ror	r18
     136:	16 94       	lsr	r1
     138:	d1 f7       	brne	.-12     	; 0x12e <_ZN6BME28016convert_pressureEv+0x4a>
     13a:	2d 87       	std	Y+13, r18	; 0x0d
     13c:	3e 87       	std	Y+14, r19	; 0x0e
     13e:	4f 87       	std	Y+15, r20	; 0x0f
     140:	58 8b       	std	Y+16, r21	; 0x10
     142:	20 87       	std	Z+8, r18	; 0x08
     144:	31 87       	std	Z+9, r19	; 0x09
     146:	42 87       	std	Z+10, r20	; 0x0a
     148:	53 87       	std	Z+11, r21	; 0x0b
	
	var1 =	((int64_t)cal.t_fine) - 128000;
     14a:	ef 5b       	subi	r30, 0xBF	; 191
     14c:	ff 4f       	sbci	r31, 0xFF	; 255
     14e:	80 81       	ld	r24, Z
     150:	91 81       	ldd	r25, Z+1	; 0x01
     152:	a2 81       	ldd	r26, Z+2	; 0x02
     154:	b3 81       	ldd	r27, Z+3	; 0x03
     156:	6c 01       	movw	r12, r24
     158:	7d 01       	movw	r14, r26
     15a:	ff 0c       	add	r15, r15
     15c:	cc 08       	sbc	r12, r12
     15e:	dc 2c       	mov	r13, r12
     160:	76 01       	movw	r14, r12
     162:	28 2f       	mov	r18, r24
     164:	39 2f       	mov	r19, r25
     166:	4a 2f       	mov	r20, r26
     168:	5b 2f       	mov	r21, r27
     16a:	6c 2d       	mov	r22, r12
     16c:	7c 2d       	mov	r23, r12
     16e:	8c 2d       	mov	r24, r12
     170:	9c 2d       	mov	r25, r12
     172:	34 5f       	subi	r19, 0xF4	; 244
     174:	41 40       	sbci	r20, 0x01	; 1
     176:	51 09       	sbc	r21, r1
     178:	61 09       	sbc	r22, r1
     17a:	71 09       	sbc	r23, r1
     17c:	81 09       	sbc	r24, r1
     17e:	91 09       	sbc	r25, r1
     180:	29 83       	std	Y+1, r18	; 0x01
     182:	3a 83       	std	Y+2, r19	; 0x02
     184:	4b 83       	std	Y+3, r20	; 0x03
     186:	5c 83       	std	Y+4, r21	; 0x04
     188:	6d 83       	std	Y+5, r22	; 0x05
     18a:	7e 83       	std	Y+6, r23	; 0x06
     18c:	8f 83       	std	Y+7, r24	; 0x07
     18e:	98 87       	std	Y+8, r25	; 0x08
	
	var2 =	var1 * var1 * (int64_t)cal.dig_P6;
     190:	a2 2e       	mov	r10, r18
     192:	b3 2e       	mov	r11, r19
     194:	c4 2e       	mov	r12, r20
     196:	d5 2e       	mov	r13, r21
     198:	e6 2e       	mov	r14, r22
     19a:	f7 2e       	mov	r15, r23
     19c:	08 2f       	mov	r16, r24
     19e:	19 2f       	mov	r17, r25
     1a0:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__muldi3>
     1a4:	29 87       	std	Y+9, r18	; 0x09
     1a6:	3a 87       	std	Y+10, r19	; 0x0a
     1a8:	4b 87       	std	Y+11, r20	; 0x0b
     1aa:	5c 87       	std	Y+12, r21	; 0x0c
     1ac:	6d 8b       	std	Y+21, r22	; 0x15
     1ae:	7e 8b       	std	Y+22, r23	; 0x16
     1b0:	8f 8b       	std	Y+23, r24	; 0x17
     1b2:	98 8f       	std	Y+24, r25	; 0x18
     1b4:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1b6:	f8 a1       	ldd	r31, Y+32	; 0x20
     1b8:	f0 a9       	ldd	r31, Z+48	; 0x30
     1ba:	fc 8f       	std	Y+28, r31	; 0x1c
     1bc:	af 8d       	ldd	r26, Y+31	; 0x1f
     1be:	b8 a1       	ldd	r27, Y+32	; 0x20
     1c0:	d1 96       	adiw	r26, 0x31	; 49
     1c2:	bc 91       	ld	r27, X
     1c4:	b9 8f       	std	Y+25, r27	; 0x19
	var2 =	var2 + ((var1*(int64_t)cal.dig_P5) << 17);
     1c6:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1c8:	f8 a1       	ldd	r31, Y+32	; 0x20
     1ca:	f6 a5       	ldd	r31, Z+46	; 0x2e
     1cc:	fd 8f       	std	Y+29, r31	; 0x1d
     1ce:	af 8d       	ldd	r26, Y+31	; 0x1f
     1d0:	b8 a1       	ldd	r27, Y+32	; 0x20
     1d2:	9f 96       	adiw	r26, 0x2f	; 47
     1d4:	bc 91       	ld	r27, X
     1d6:	ba 8f       	std	Y+26, r27	; 0x1a
	var2 =	var2 + (((int64_t)cal.dig_P4) << 35);
     1d8:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1da:	f8 a1       	ldd	r31, Y+32	; 0x20
     1dc:	f4 a5       	ldd	r31, Z+44	; 0x2c
     1de:	fe 8f       	std	Y+30, r31	; 0x1e
     1e0:	af 8d       	ldd	r26, Y+31	; 0x1f
     1e2:	b8 a1       	ldd	r27, Y+32	; 0x20
     1e4:	9d 96       	adiw	r26, 0x2d	; 45
     1e6:	bc 91       	ld	r27, X
     1e8:	bb 8f       	std	Y+27, r27	; 0x1b
	
	var1 =	((var1 * var1 * (int64_t)cal.dig_P3) >> 8) +
			((var1 * (int64_t)cal.dig_P2)<<12);
     1ea:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1ec:	f8 a1       	ldd	r31, Y+32	; 0x20
     1ee:	31 a5       	ldd	r19, Z+41	; 0x29
     1f0:	20 a5       	ldd	r18, Z+40	; 0x28
     1f2:	93 2f       	mov	r25, r19
     1f4:	99 0f       	add	r25, r25
     1f6:	99 0b       	sbc	r25, r25
     1f8:	49 2f       	mov	r20, r25
     1fa:	59 2f       	mov	r21, r25
     1fc:	69 2f       	mov	r22, r25
     1fe:	79 2f       	mov	r23, r25
     200:	89 2f       	mov	r24, r25
     202:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__muldi3>
     206:	0c e0       	ldi	r16, 0x0C	; 12
     208:	0e 94 19 12 	call	0x2432	; 0x2432 <__ashldi3>
     20c:	22 2e       	mov	r2, r18
     20e:	33 2e       	mov	r3, r19
     210:	44 2e       	mov	r4, r20
     212:	55 2e       	mov	r5, r21
     214:	66 2e       	mov	r6, r22
     216:	77 2e       	mov	r7, r23
     218:	88 2e       	mov	r8, r24
     21a:	99 2e       	mov	r9, r25
	
	var2 =	var1 * var1 * (int64_t)cal.dig_P6;
	var2 =	var2 + ((var1*(int64_t)cal.dig_P5) << 17);
	var2 =	var2 + (((int64_t)cal.dig_P4) << 35);
	
	var1 =	((var1 * var1 * (int64_t)cal.dig_P3) >> 8) +
     21c:	af 8d       	ldd	r26, Y+31	; 0x1f
     21e:	b8 a1       	ldd	r27, Y+32	; 0x20
     220:	9b 96       	adiw	r26, 0x2b	; 43
     222:	bc 90       	ld	r11, X
     224:	9b 97       	sbiw	r26, 0x2b	; 43
     226:	9a 96       	adiw	r26, 0x2a	; 42
     228:	ac 90       	ld	r10, X
     22a:	1b 2d       	mov	r17, r11
     22c:	11 0f       	add	r17, r17
     22e:	11 0b       	sbc	r17, r17
     230:	c1 2e       	mov	r12, r17
     232:	d1 2e       	mov	r13, r17
     234:	e1 2e       	mov	r14, r17
     236:	f1 2e       	mov	r15, r17
     238:	01 2f       	mov	r16, r17
     23a:	29 85       	ldd	r18, Y+9	; 0x09
     23c:	3a 85       	ldd	r19, Y+10	; 0x0a
     23e:	4b 85       	ldd	r20, Y+11	; 0x0b
     240:	5c 85       	ldd	r21, Y+12	; 0x0c
     242:	6d 89       	ldd	r22, Y+21	; 0x15
     244:	7e 89       	ldd	r23, Y+22	; 0x16
     246:	8f 89       	ldd	r24, Y+23	; 0x17
     248:	98 8d       	ldd	r25, Y+24	; 0x18
     24a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__muldi3>
     24e:	08 e0       	ldi	r16, 0x08	; 8
     250:	0e 94 32 12 	call	0x2464	; 0x2464 <__ashrdi3>
			((var1 * (int64_t)cal.dig_P2)<<12);
     254:	a2 2c       	mov	r10, r2
     256:	b3 2c       	mov	r11, r3
     258:	c4 2c       	mov	r12, r4
     25a:	d5 2c       	mov	r13, r5
     25c:	e6 2c       	mov	r14, r6
     25e:	f7 2c       	mov	r15, r7
     260:	08 2d       	mov	r16, r8
     262:	19 2d       	mov	r17, r9
     264:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__adddi3>
	var1 =	(((((int64_t)1) << 47) + var1)) * ((int64_t)cal.dig_P1) >> 33;
     268:	70 58       	subi	r23, 0x80	; 128
     26a:	8f 4f       	sbci	r24, 0xFF	; 255
     26c:	9f 4f       	sbci	r25, 0xFF	; 255
     26e:	ef 8d       	ldd	r30, Y+31	; 0x1f
     270:	f8 a1       	ldd	r31, Y+32	; 0x20
     272:	26 a0       	ldd	r2, Z+38	; 0x26
     274:	37 a0       	ldd	r3, Z+39	; 0x27
     276:	a2 2c       	mov	r10, r2
     278:	b3 2c       	mov	r11, r3
     27a:	c1 2c       	mov	r12, r1
     27c:	d1 2c       	mov	r13, r1
     27e:	e1 2c       	mov	r14, r1
     280:	f1 2c       	mov	r15, r1
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	10 e0       	ldi	r17, 0x00	; 0
     286:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__muldi3>
     28a:	01 e2       	ldi	r16, 0x21	; 33
     28c:	0e 94 32 12 	call	0x2464	; 0x2464 <__ashrdi3>
     290:	29 8b       	std	Y+17, r18	; 0x11
     292:	3a 8b       	std	Y+18, r19	; 0x12
     294:	4b 8b       	std	Y+19, r20	; 0x13
     296:	45 2e       	mov	r4, r21
     298:	56 2e       	mov	r5, r22
     29a:	7c 8b       	std	Y+20, r23	; 0x14
     29c:	38 2e       	mov	r3, r24
     29e:	29 2e       	mov	r2, r25
	 
	if (var1 == 0) {
     2a0:	65 2d       	mov	r22, r5
     2a2:	83 2d       	mov	r24, r3
     2a4:	92 2d       	mov	r25, r2
     2a6:	a0 e0       	ldi	r26, 0x00	; 0
     2a8:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__cmpdi2_s8>
     2ac:	09 f4       	brne	.+2      	; 0x2b0 <_ZN6BME28016convert_pressureEv+0x1cc>
     2ae:	8f c1       	rjmp	.+798    	; 0x5ce <_ZN6BME28016convert_pressureEv+0x4ea>
	
	raw_pres >>= 4;
	
	var1 =	((int64_t)cal.t_fine) - 128000;
	
	var2 =	var1 * var1 * (int64_t)cal.dig_P6;
     2b0:	ac 8c       	ldd	r10, Y+28	; 0x1c
     2b2:	19 8d       	ldd	r17, Y+25	; 0x19
     2b4:	11 0f       	add	r17, r17
     2b6:	11 0b       	sbc	r17, r17
     2b8:	b9 8c       	ldd	r11, Y+25	; 0x19
     2ba:	c1 2e       	mov	r12, r17
     2bc:	d1 2e       	mov	r13, r17
     2be:	e1 2e       	mov	r14, r17
     2c0:	f1 2e       	mov	r15, r17
     2c2:	01 2f       	mov	r16, r17
     2c4:	29 85       	ldd	r18, Y+9	; 0x09
     2c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     2c8:	4b 85       	ldd	r20, Y+11	; 0x0b
     2ca:	5c 85       	ldd	r21, Y+12	; 0x0c
     2cc:	6d 89       	ldd	r22, Y+21	; 0x15
     2ce:	7e 89       	ldd	r23, Y+22	; 0x16
     2d0:	8f 89       	ldd	r24, Y+23	; 0x17
     2d2:	98 8d       	ldd	r25, Y+24	; 0x18
     2d4:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__muldi3>
     2d8:	29 87       	std	Y+9, r18	; 0x09
     2da:	3a 87       	std	Y+10, r19	; 0x0a
     2dc:	4b 87       	std	Y+11, r20	; 0x0b
     2de:	75 2e       	mov	r7, r21
     2e0:	86 2e       	mov	r8, r22
     2e2:	97 2e       	mov	r9, r23
     2e4:	8c 87       	std	Y+12, r24	; 0x0c
     2e6:	69 2e       	mov	r6, r25
	var2 =	var2 + ((var1*(int64_t)cal.dig_P5) << 17);
     2e8:	2d 8d       	ldd	r18, Y+29	; 0x1d
     2ea:	9a 8d       	ldd	r25, Y+26	; 0x1a
     2ec:	99 0f       	add	r25, r25
     2ee:	99 0b       	sbc	r25, r25
     2f0:	a9 80       	ldd	r10, Y+1	; 0x01
     2f2:	ba 80       	ldd	r11, Y+2	; 0x02
     2f4:	cb 80       	ldd	r12, Y+3	; 0x03
     2f6:	dc 80       	ldd	r13, Y+4	; 0x04
     2f8:	ed 80       	ldd	r14, Y+5	; 0x05
     2fa:	fe 80       	ldd	r15, Y+6	; 0x06
     2fc:	0f 81       	ldd	r16, Y+7	; 0x07
     2fe:	18 85       	ldd	r17, Y+8	; 0x08
     300:	3a 8d       	ldd	r19, Y+26	; 0x1a
     302:	49 2f       	mov	r20, r25
     304:	59 2f       	mov	r21, r25
     306:	69 2f       	mov	r22, r25
     308:	79 2f       	mov	r23, r25
     30a:	89 2f       	mov	r24, r25
     30c:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__muldi3>
     310:	01 e1       	ldi	r16, 0x11	; 17
     312:	0e 94 19 12 	call	0x2432	; 0x2432 <__ashldi3>
     316:	a9 84       	ldd	r10, Y+9	; 0x09
     318:	ba 84       	ldd	r11, Y+10	; 0x0a
     31a:	cb 84       	ldd	r12, Y+11	; 0x0b
     31c:	d7 2c       	mov	r13, r7
     31e:	e8 2c       	mov	r14, r8
     320:	f9 2c       	mov	r15, r9
     322:	0c 85       	ldd	r16, Y+12	; 0x0c
     324:	16 2d       	mov	r17, r6
     326:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__adddi3>
     32a:	a2 2e       	mov	r10, r18
     32c:	b3 2e       	mov	r11, r19
     32e:	c4 2e       	mov	r12, r20
     330:	d5 2e       	mov	r13, r21
     332:	e6 2e       	mov	r14, r22
     334:	f7 2e       	mov	r15, r23
     336:	e8 2f       	mov	r30, r24
     338:	19 2f       	mov	r17, r25
	 
	if (var1 == 0) {
		return 0;  // avoid exception caused by division by zero 
	}
	
	p = 1048576 - raw_pres;
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	a0 e1       	ldi	r26, 0x10	; 16
     340:	b0 e0       	ldi	r27, 0x00	; 0
     342:	2d 85       	ldd	r18, Y+13	; 0x0d
     344:	3e 85       	ldd	r19, Y+14	; 0x0e
     346:	4f 85       	ldd	r20, Y+15	; 0x0f
     348:	58 89       	ldd	r21, Y+16	; 0x10
     34a:	82 1b       	sub	r24, r18
     34c:	93 0b       	sbc	r25, r19
     34e:	a4 0b       	sbc	r26, r20
     350:	b5 0b       	sbc	r27, r21
     352:	3c 01       	movw	r6, r24
     354:	4d 01       	movw	r8, r26
     356:	99 0c       	add	r9, r9
     358:	66 08       	sbc	r6, r6
     35a:	76 2c       	mov	r7, r6
     35c:	43 01       	movw	r8, r6
	p = (((p << 31) - var2) * 3125) / var1;
     35e:	28 2f       	mov	r18, r24
     360:	39 2f       	mov	r19, r25
     362:	4a 2f       	mov	r20, r26
     364:	5b 2f       	mov	r21, r27
     366:	66 2d       	mov	r22, r6
     368:	76 2d       	mov	r23, r6
     36a:	86 2d       	mov	r24, r6
     36c:	96 2d       	mov	r25, r6
     36e:	0f e1       	ldi	r16, 0x1F	; 31
     370:	0e 94 19 12 	call	0x2432	; 0x2432 <__ashldi3>
     374:	82 2e       	mov	r8, r18
     376:	93 2e       	mov	r9, r19
     378:	64 2e       	mov	r6, r20
     37a:	75 2e       	mov	r7, r21
     37c:	b6 2f       	mov	r27, r22
     37e:	a7 2f       	mov	r26, r23
     380:	8a 83       	std	Y+2, r24	; 0x02
     382:	f9 2f       	mov	r31, r25
	
	var1 =	((int64_t)cal.t_fine) - 128000;
	
	var2 =	var1 * var1 * (int64_t)cal.dig_P6;
	var2 =	var2 + ((var1*(int64_t)cal.dig_P5) << 17);
	var2 =	var2 + (((int64_t)cal.dig_P4) << 35);
     384:	2e 8d       	ldd	r18, Y+30	; 0x1e
     386:	9b 8d       	ldd	r25, Y+27	; 0x1b
     388:	99 0f       	add	r25, r25
     38a:	99 0b       	sbc	r25, r25
     38c:	3b 8d       	ldd	r19, Y+27	; 0x1b
     38e:	49 2f       	mov	r20, r25
     390:	59 2f       	mov	r21, r25
     392:	69 2f       	mov	r22, r25
     394:	79 2f       	mov	r23, r25
     396:	89 2f       	mov	r24, r25
     398:	03 e2       	ldi	r16, 0x23	; 35
     39a:	0e 94 19 12 	call	0x2432	; 0x2432 <__ashldi3>
     39e:	0e 2f       	mov	r16, r30
     3a0:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__adddi3>
     3a4:	a2 2e       	mov	r10, r18
     3a6:	b3 2e       	mov	r11, r19
     3a8:	c4 2e       	mov	r12, r20
     3aa:	d5 2e       	mov	r13, r21
     3ac:	e6 2e       	mov	r14, r22
     3ae:	f7 2e       	mov	r15, r23
     3b0:	08 2f       	mov	r16, r24
     3b2:	19 2f       	mov	r17, r25
	if (var1 == 0) {
		return 0;  // avoid exception caused by division by zero 
	}
	
	p = 1048576 - raw_pres;
	p = (((p << 31) - var2) * 3125) / var1;
     3b4:	28 2d       	mov	r18, r8
     3b6:	39 2d       	mov	r19, r9
     3b8:	46 2d       	mov	r20, r6
     3ba:	57 2d       	mov	r21, r7
     3bc:	6b 2f       	mov	r22, r27
     3be:	7a 2f       	mov	r23, r26
     3c0:	8a 81       	ldd	r24, Y+2	; 0x02
     3c2:	9f 2f       	mov	r25, r31
     3c4:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__subdi3>
     3c8:	82 2e       	mov	r8, r18
     3ca:	93 2e       	mov	r9, r19
     3cc:	64 2e       	mov	r6, r20
     3ce:	75 2e       	mov	r7, r21
     3d0:	b6 2f       	mov	r27, r22
     3d2:	a7 2f       	mov	r26, r23
     3d4:	e8 2f       	mov	r30, r24
     3d6:	f9 2f       	mov	r31, r25
     3d8:	03 e0       	ldi	r16, 0x03	; 3
     3da:	0e 94 19 12 	call	0x2432	; 0x2432 <__ashldi3>
     3de:	a8 2c       	mov	r10, r8
     3e0:	b9 2c       	mov	r11, r9
     3e2:	c6 2c       	mov	r12, r6
     3e4:	d7 2c       	mov	r13, r7
     3e6:	eb 2e       	mov	r14, r27
     3e8:	fa 2e       	mov	r15, r26
     3ea:	0e 2f       	mov	r16, r30
     3ec:	1f 2f       	mov	r17, r31
     3ee:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__subdi3>
     3f2:	a2 2e       	mov	r10, r18
     3f4:	b3 2e       	mov	r11, r19
     3f6:	c4 2e       	mov	r12, r20
     3f8:	d5 2e       	mov	r13, r21
     3fa:	e6 2e       	mov	r14, r22
     3fc:	f7 2e       	mov	r15, r23
     3fe:	89 83       	std	Y+1, r24	; 0x01
     400:	19 2f       	mov	r17, r25
     402:	03 e0       	ldi	r16, 0x03	; 3
     404:	0e 94 19 12 	call	0x2432	; 0x2432 <__ashldi3>
     408:	09 81       	ldd	r16, Y+1	; 0x01
     40a:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__subdi3>
     40e:	03 e0       	ldi	r16, 0x03	; 3
     410:	0e 94 19 12 	call	0x2432	; 0x2432 <__ashldi3>
     414:	a8 2c       	mov	r10, r8
     416:	b9 2c       	mov	r11, r9
     418:	c6 2c       	mov	r12, r6
     41a:	d7 2c       	mov	r13, r7
     41c:	eb 2e       	mov	r14, r27
     41e:	fa 2e       	mov	r15, r26
     420:	0e 2f       	mov	r16, r30
     422:	1f 2f       	mov	r17, r31
     424:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__subdi3>
     428:	02 e0       	ldi	r16, 0x02	; 2
     42a:	0e 94 19 12 	call	0x2432	; 0x2432 <__ashldi3>
     42e:	0e 2f       	mov	r16, r30
     430:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__subdi3>
     434:	01 e0       	ldi	r16, 0x01	; 1
     436:	0e 94 19 12 	call	0x2432	; 0x2432 <__ashldi3>
     43a:	0e 2f       	mov	r16, r30
     43c:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__subdi3>
     440:	a9 88       	ldd	r10, Y+17	; 0x11
     442:	ba 88       	ldd	r11, Y+18	; 0x12
     444:	cb 88       	ldd	r12, Y+19	; 0x13
     446:	d4 2c       	mov	r13, r4
     448:	e5 2c       	mov	r14, r5
     44a:	fc 88       	ldd	r15, Y+20	; 0x14
     44c:	03 2d       	mov	r16, r3
     44e:	12 2d       	mov	r17, r2
     450:	0e 94 44 11 	call	0x2288	; 0x2288 <__divdi3>
     454:	29 83       	std	Y+1, r18	; 0x01
     456:	3a 83       	std	Y+2, r19	; 0x02
     458:	4b 83       	std	Y+3, r20	; 0x03
     45a:	5c 83       	std	Y+4, r21	; 0x04
     45c:	6d 83       	std	Y+5, r22	; 0x05
     45e:	7e 83       	std	Y+6, r23	; 0x06
     460:	8f 83       	std	Y+7, r24	; 0x07
     462:	98 87       	std	Y+8, r25	; 0x08
	
	var1 = (((int64_t)cal.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
     464:	0d e0       	ldi	r16, 0x0D	; 13
     466:	0e 94 32 12 	call	0x2464	; 0x2464 <__ashrdi3>
     46a:	82 2e       	mov	r8, r18
     46c:	93 2e       	mov	r9, r19
     46e:	74 2e       	mov	r7, r20
     470:	65 2e       	mov	r6, r21
     472:	56 2e       	mov	r5, r22
     474:	47 2e       	mov	r4, r23
     476:	38 2e       	mov	r3, r24
     478:	29 2e       	mov	r2, r25
     47a:	af 8d       	ldd	r26, Y+31	; 0x1f
     47c:	b8 a1       	ldd	r27, Y+32	; 0x20
     47e:	d7 96       	adiw	r26, 0x37	; 55
     480:	3c 91       	ld	r19, X
     482:	d7 97       	sbiw	r26, 0x37	; 55
     484:	d6 96       	adiw	r26, 0x36	; 54
     486:	2c 91       	ld	r18, X
     488:	93 2f       	mov	r25, r19
     48a:	99 0f       	add	r25, r25
     48c:	99 0b       	sbc	r25, r25
     48e:	a8 2c       	mov	r10, r8
     490:	b9 2c       	mov	r11, r9
     492:	c7 2c       	mov	r12, r7
     494:	d6 2c       	mov	r13, r6
     496:	e5 2c       	mov	r14, r5
     498:	f4 2c       	mov	r15, r4
     49a:	03 2d       	mov	r16, r3
     49c:	12 2d       	mov	r17, r2
     49e:	49 2f       	mov	r20, r25
     4a0:	59 2f       	mov	r21, r25
     4a2:	69 2f       	mov	r22, r25
     4a4:	79 2f       	mov	r23, r25
     4a6:	89 2f       	mov	r24, r25
     4a8:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__muldi3>
     4ac:	a2 2e       	mov	r10, r18
     4ae:	b3 2e       	mov	r11, r19
     4b0:	c4 2e       	mov	r12, r20
     4b2:	d5 2e       	mov	r13, r21
     4b4:	e6 2e       	mov	r14, r22
     4b6:	f7 2e       	mov	r15, r23
     4b8:	08 2f       	mov	r16, r24
     4ba:	19 2f       	mov	r17, r25
     4bc:	28 2d       	mov	r18, r8
     4be:	39 2d       	mov	r19, r9
     4c0:	47 2d       	mov	r20, r7
     4c2:	56 2d       	mov	r21, r6
     4c4:	65 2d       	mov	r22, r5
     4c6:	74 2d       	mov	r23, r4
     4c8:	83 2d       	mov	r24, r3
     4ca:	92 2d       	mov	r25, r2
     4cc:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__muldi3>
     4d0:	09 e1       	ldi	r16, 0x19	; 25
     4d2:	0e 94 32 12 	call	0x2464	; 0x2464 <__ashrdi3>
     4d6:	a2 2e       	mov	r10, r18
     4d8:	b3 2e       	mov	r11, r19
     4da:	c4 2e       	mov	r12, r20
     4dc:	d5 2e       	mov	r13, r21
     4de:	e6 2e       	mov	r14, r22
     4e0:	f7 2e       	mov	r15, r23
     4e2:	08 2f       	mov	r16, r24
     4e4:	19 2f       	mov	r17, r25
	var2 = (((int64_t)cal.dig_P8) * p) >> 19; 
	
	p = ((p + var1 + var2) >> 8) + (((int64_t)cal.dig_P7) << 4);
     4e6:	29 81       	ldd	r18, Y+1	; 0x01
     4e8:	3a 81       	ldd	r19, Y+2	; 0x02
     4ea:	4b 81       	ldd	r20, Y+3	; 0x03
     4ec:	5c 81       	ldd	r21, Y+4	; 0x04
     4ee:	6d 81       	ldd	r22, Y+5	; 0x05
     4f0:	7e 81       	ldd	r23, Y+6	; 0x06
     4f2:	8f 81       	ldd	r24, Y+7	; 0x07
     4f4:	98 85       	ldd	r25, Y+8	; 0x08
     4f6:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__adddi3>
     4fa:	22 2e       	mov	r2, r18
     4fc:	33 2e       	mov	r3, r19
     4fe:	44 2e       	mov	r4, r20
     500:	55 2e       	mov	r5, r21
     502:	66 2e       	mov	r6, r22
     504:	77 2e       	mov	r7, r23
     506:	88 2e       	mov	r8, r24
     508:	99 2e       	mov	r9, r25
	
	p = 1048576 - raw_pres;
	p = (((p << 31) - var2) * 3125) / var1;
	
	var1 = (((int64_t)cal.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
	var2 = (((int64_t)cal.dig_P8) * p) >> 19; 
     50a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     50c:	f8 a1       	ldd	r31, Y+32	; 0x20
     50e:	35 a9       	ldd	r19, Z+53	; 0x35
     510:	24 a9       	ldd	r18, Z+52	; 0x34
     512:	93 2f       	mov	r25, r19
     514:	99 0f       	add	r25, r25
     516:	99 0b       	sbc	r25, r25
     518:	a9 80       	ldd	r10, Y+1	; 0x01
     51a:	ba 80       	ldd	r11, Y+2	; 0x02
     51c:	cb 80       	ldd	r12, Y+3	; 0x03
     51e:	dc 80       	ldd	r13, Y+4	; 0x04
     520:	ed 80       	ldd	r14, Y+5	; 0x05
     522:	fe 80       	ldd	r15, Y+6	; 0x06
     524:	0f 81       	ldd	r16, Y+7	; 0x07
     526:	18 85       	ldd	r17, Y+8	; 0x08
     528:	49 2f       	mov	r20, r25
     52a:	59 2f       	mov	r21, r25
     52c:	69 2f       	mov	r22, r25
     52e:	79 2f       	mov	r23, r25
     530:	89 2f       	mov	r24, r25
     532:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__muldi3>
     536:	03 e1       	ldi	r16, 0x13	; 19
     538:	0e 94 32 12 	call	0x2464	; 0x2464 <__ashrdi3>
     53c:	a2 2e       	mov	r10, r18
     53e:	b3 2e       	mov	r11, r19
     540:	c4 2e       	mov	r12, r20
     542:	d5 2e       	mov	r13, r21
     544:	e6 2e       	mov	r14, r22
     546:	f7 2e       	mov	r15, r23
     548:	08 2f       	mov	r16, r24
     54a:	19 2f       	mov	r17, r25
	
	p = ((p + var1 + var2) >> 8) + (((int64_t)cal.dig_P7) << 4);
     54c:	22 2d       	mov	r18, r2
     54e:	33 2d       	mov	r19, r3
     550:	44 2d       	mov	r20, r4
     552:	55 2d       	mov	r21, r5
     554:	66 2d       	mov	r22, r6
     556:	77 2d       	mov	r23, r7
     558:	88 2d       	mov	r24, r8
     55a:	99 2d       	mov	r25, r9
     55c:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__adddi3>
     560:	08 e0       	ldi	r16, 0x08	; 8
     562:	0e 94 32 12 	call	0x2464	; 0x2464 <__ashrdi3>
     566:	52 2e       	mov	r5, r18
     568:	63 2e       	mov	r6, r19
     56a:	74 2e       	mov	r7, r20
     56c:	85 2e       	mov	r8, r21
     56e:	96 2e       	mov	r9, r22
     570:	f7 2f       	mov	r31, r23
     572:	e8 2f       	mov	r30, r24
     574:	49 2e       	mov	r4, r25
     576:	af 8d       	ldd	r26, Y+31	; 0x1f
     578:	b8 a1       	ldd	r27, Y+32	; 0x20
     57a:	d3 96       	adiw	r26, 0x33	; 51
     57c:	3c 91       	ld	r19, X
     57e:	d3 97       	sbiw	r26, 0x33	; 51
     580:	d2 96       	adiw	r26, 0x32	; 50
     582:	2c 91       	ld	r18, X
     584:	93 2f       	mov	r25, r19
     586:	99 0f       	add	r25, r25
     588:	99 0b       	sbc	r25, r25
     58a:	49 2f       	mov	r20, r25
     58c:	59 2f       	mov	r21, r25
     58e:	69 2f       	mov	r22, r25
     590:	79 2f       	mov	r23, r25
     592:	89 2f       	mov	r24, r25
     594:	04 e0       	ldi	r16, 0x04	; 4
     596:	0e 94 19 12 	call	0x2432	; 0x2432 <__ashldi3>
     59a:	a2 2e       	mov	r10, r18
     59c:	b3 2e       	mov	r11, r19
     59e:	c4 2e       	mov	r12, r20
     5a0:	d5 2e       	mov	r13, r21
     5a2:	e6 2e       	mov	r14, r22
     5a4:	f7 2e       	mov	r15, r23
     5a6:	08 2f       	mov	r16, r24
     5a8:	19 2f       	mov	r17, r25
     5aa:	25 2d       	mov	r18, r5
     5ac:	36 2d       	mov	r19, r6
     5ae:	47 2d       	mov	r20, r7
     5b0:	58 2d       	mov	r21, r8
     5b2:	69 2d       	mov	r22, r9
     5b4:	7f 2f       	mov	r23, r31
     5b6:	8e 2f       	mov	r24, r30
     5b8:	94 2d       	mov	r25, r4
     5ba:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__adddi3>
	 
	return p >> 8;
     5be:	08 e0       	ldi	r16, 0x08	; 8
     5c0:	0e 94 32 12 	call	0x2464	; 0x2464 <__ashrdi3>
     5c4:	62 2f       	mov	r22, r18
     5c6:	73 2f       	mov	r23, r19
     5c8:	84 2f       	mov	r24, r20
     5ca:	95 2f       	mov	r25, r21
     5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <_ZN6BME28016convert_pressureEv+0x4f2>
	var1 =	((var1 * var1 * (int64_t)cal.dig_P3) >> 8) +
			((var1 * (int64_t)cal.dig_P2)<<12);
	var1 =	(((((int64_t)1) << 47) + var1)) * ((int64_t)cal.dig_P1) >> 33;
	 
	if (var1 == 0) {
		return 0;  // avoid exception caused by division by zero 
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
	var2 = (((int64_t)cal.dig_P8) * p) >> 19; 
	
	p = ((p + var1 + var2) >> 8) + (((int64_t)cal.dig_P7) << 4);
	 
	return p >> 8;
}
     5d6:	a0 96       	adiw	r28, 0x20	; 32
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	df 90       	pop	r13
     5f0:	cf 90       	pop	r12
     5f2:	bf 90       	pop	r11
     5f4:	af 90       	pop	r10
     5f6:	9f 90       	pop	r9
     5f8:	8f 90       	pop	r8
     5fa:	7f 90       	pop	r7
     5fc:	6f 90       	pop	r6
     5fe:	5f 90       	pop	r5
     600:	4f 90       	pop	r4
     602:	3f 90       	pop	r3
     604:	2f 90       	pop	r2
     606:	08 95       	ret

00000608 <_ZN6BME28019convert_temperatureEv>:
 * Return:		int32_t - the human-readable temperature reading accurate to
 *							2 decimal places in Centigrade. A value of 5382 is
 *							equal to 53.82 degrees Centigrade
 ****************************************************************************/
int32_t BME280::convert_temperature (void)
{
     608:	8f 92       	push	r8
     60a:	9f 92       	push	r9
     60c:	af 92       	push	r10
     60e:	bf 92       	push	r11
     610:	cf 92       	push	r12
     612:	df 92       	push	r13
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	fc 01       	movw	r30, r24
	int32_t var1 = 0;
	int32_t var2 = 0;
	
	temperature = 0;
     61e:	10 8e       	std	Z+24, r1	; 0x18
     620:	11 8e       	std	Z+25, r1	; 0x19
     622:	12 8e       	std	Z+26, r1	; 0x1a
     624:	13 8e       	std	Z+27, r1	; 0x1b
	
	/* calculate x1 */
	var1 =	((((raw_temp>>3) - ((int32_t)cal.dig_T1 <<1))) *
     626:	84 85       	ldd	r24, Z+12	; 0x0c
     628:	95 85       	ldd	r25, Z+13	; 0x0d
     62a:	a6 85       	ldd	r26, Z+14	; 0x0e
     62c:	b7 85       	ldd	r27, Z+15	; 0x0f
     62e:	40 a1       	ldd	r20, Z+32	; 0x20
     630:	51 a1       	ldd	r21, Z+33	; 0x21
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	70 e0       	ldi	r23, 0x00	; 0
		 ((int32_t)cal.dig_T2)) >> 11;
	
	/* calculate x2 */
	var2 =	(((((raw_temp>>4) - ((int32_t)cal.dig_T1)) *
			   ((raw_temp>>4) - ((int32_t)cal.dig_T1))) >> 12) *
     636:	4c 01       	movw	r8, r24
     638:	5d 01       	movw	r10, r26
     63a:	68 94       	set
     63c:	13 f8       	bld	r1, 3
     63e:	b5 94       	asr	r11
     640:	a7 94       	ror	r10
     642:	97 94       	ror	r9
     644:	87 94       	ror	r8
     646:	16 94       	lsr	r1
     648:	d1 f7       	brne	.-12     	; 0x63e <_ZN6BME28019convert_temperatureEv+0x36>
     64a:	84 1a       	sub	r8, r20
     64c:	95 0a       	sbc	r9, r21
     64e:	a6 0a       	sbc	r10, r22
     650:	b7 0a       	sbc	r11, r23
	int32_t var2 = 0;
	
	temperature = 0;
	
	/* calculate x1 */
	var1 =	((((raw_temp>>3) - ((int32_t)cal.dig_T1 <<1))) *
     652:	68 94       	set
     654:	12 f8       	bld	r1, 2
     656:	b5 95       	asr	r27
     658:	a7 95       	ror	r26
     65a:	97 95       	ror	r25
     65c:	87 95       	ror	r24
     65e:	16 94       	lsr	r1
     660:	d1 f7       	brne	.-12     	; 0x656 <_ZN6BME28019convert_temperatureEv+0x4e>
     662:	44 0f       	add	r20, r20
     664:	55 1f       	adc	r21, r21
     666:	66 1f       	adc	r22, r22
     668:	77 1f       	adc	r23, r23
     66a:	7c 01       	movw	r14, r24
     66c:	8d 01       	movw	r16, r26
     66e:	e4 1a       	sub	r14, r20
     670:	f5 0a       	sbc	r15, r21
     672:	06 0b       	sbc	r16, r22
     674:	17 0b       	sbc	r17, r23
     676:	a8 01       	movw	r20, r16
     678:	97 01       	movw	r18, r14
     67a:	a2 a1       	ldd	r26, Z+34	; 0x22
     67c:	b3 a1       	ldd	r27, Z+35	; 0x23
     67e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulshisi3>
		 ((int32_t)cal.dig_T2)) >> 11;
     682:	6b 01       	movw	r12, r22
     684:	7c 01       	movw	r14, r24
     686:	0b 2e       	mov	r0, r27
     688:	bb e0       	ldi	r27, 0x0B	; 11
     68a:	f5 94       	asr	r15
     68c:	e7 94       	ror	r14
     68e:	d7 94       	ror	r13
     690:	c7 94       	ror	r12
     692:	ba 95       	dec	r27
     694:	d1 f7       	brne	.-12     	; 0x68a <_ZN6BME28019convert_temperatureEv+0x82>
     696:	b0 2d       	mov	r27, r0
	
	/* calculate x2 */
	var2 =	(((((raw_temp>>4) - ((int32_t)cal.dig_T1)) *
     698:	a5 01       	movw	r20, r10
     69a:	94 01       	movw	r18, r8
     69c:	c5 01       	movw	r24, r10
     69e:	b4 01       	movw	r22, r8
     6a0:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__mulsi3>
			   ((raw_temp>>4) - ((int32_t)cal.dig_T1))) >> 12) *
     6a4:	9b 01       	movw	r18, r22
     6a6:	ac 01       	movw	r20, r24
     6a8:	01 2e       	mov	r0, r17
     6aa:	1c e0       	ldi	r17, 0x0C	; 12
     6ac:	55 95       	asr	r21
     6ae:	47 95       	ror	r20
     6b0:	37 95       	ror	r19
     6b2:	27 95       	ror	r18
     6b4:	1a 95       	dec	r17
     6b6:	d1 f7       	brne	.-12     	; 0x6ac <_ZN6BME28019convert_temperatureEv+0xa4>
     6b8:	10 2d       	mov	r17, r0
     6ba:	a4 a1       	ldd	r26, Z+36	; 0x24
     6bc:	b5 a1       	ldd	r27, Z+37	; 0x25
     6be:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulshisi3>
			((int32_t)cal.dig_T3)) >> 14;
     6c2:	ab 01       	movw	r20, r22
     6c4:	bc 01       	movw	r22, r24
     6c6:	03 2e       	mov	r0, r19
     6c8:	3e e0       	ldi	r19, 0x0E	; 14
     6ca:	75 95       	asr	r23
     6cc:	67 95       	ror	r22
     6ce:	57 95       	ror	r21
     6d0:	47 95       	ror	r20
     6d2:	3a 95       	dec	r19
     6d4:	d1 f7       	brne	.-12     	; 0x6ca <_ZN6BME28019convert_temperatureEv+0xc2>
     6d6:	30 2d       	mov	r19, r0
	
	cal.t_fine = var1 + var2;
     6d8:	4c 0d       	add	r20, r12
     6da:	5d 1d       	adc	r21, r13
     6dc:	6e 1d       	adc	r22, r14
     6de:	7f 1d       	adc	r23, r15
     6e0:	df 01       	movw	r26, r30
     6e2:	af 5b       	subi	r26, 0xBF	; 191
     6e4:	bf 4f       	sbci	r27, 0xFF	; 255
     6e6:	4d 93       	st	X+, r20
     6e8:	5d 93       	st	X+, r21
     6ea:	6d 93       	st	X+, r22
     6ec:	7c 93       	st	X, r23
     6ee:	13 97       	sbiw	r26, 0x03	; 3
	
	return (((cal.t_fine * 5 + 128) >> 8) - temp_cal);
     6f0:	6a 01       	movw	r12, r20
     6f2:	7b 01       	movw	r14, r22
     6f4:	cc 0c       	add	r12, r12
     6f6:	dd 1c       	adc	r13, r13
     6f8:	ee 1c       	adc	r14, r14
     6fa:	ff 1c       	adc	r15, r15
     6fc:	cc 0c       	add	r12, r12
     6fe:	dd 1c       	adc	r13, r13
     700:	ee 1c       	adc	r14, r14
     702:	ff 1c       	adc	r15, r15
     704:	d7 01       	movw	r26, r14
     706:	c6 01       	movw	r24, r12
     708:	84 0f       	add	r24, r20
     70a:	95 1f       	adc	r25, r21
     70c:	a6 1f       	adc	r26, r22
     70e:	b7 1f       	adc	r27, r23
     710:	80 58       	subi	r24, 0x80	; 128
     712:	9f 4f       	sbci	r25, 0xFF	; 255
     714:	af 4f       	sbci	r26, 0xFF	; 255
     716:	bf 4f       	sbci	r27, 0xFF	; 255
     718:	89 2f       	mov	r24, r25
     71a:	9a 2f       	mov	r25, r26
     71c:	ab 2f       	mov	r26, r27
     71e:	bb 27       	eor	r27, r27
     720:	a7 fd       	sbrc	r26, 7
     722:	ba 95       	dec	r27
     724:	c4 80       	ldd	r12, Z+4	; 0x04
     726:	d5 80       	ldd	r13, Z+5	; 0x05
     728:	e6 80       	ldd	r14, Z+6	; 0x06
     72a:	f7 80       	ldd	r15, Z+7	; 0x07
     72c:	bc 01       	movw	r22, r24
     72e:	cd 01       	movw	r24, r26
     730:	6c 19       	sub	r22, r12
     732:	7d 09       	sbc	r23, r13
     734:	8e 09       	sbc	r24, r14
     736:	9f 09       	sbc	r25, r15
}
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	ff 90       	pop	r15
     73e:	ef 90       	pop	r14
     740:	df 90       	pop	r13
     742:	cf 90       	pop	r12
     744:	bf 90       	pop	r11
     746:	af 90       	pop	r10
     748:	9f 90       	pop	r9
     74a:	8f 90       	pop	r8
     74c:	08 95       	ret

0000074e <_ZN6BME28016convert_humidityEv>:
 * Return:		uint32_t - the human-readable humidity reading accurate to 3
 *							decimal places in %rH where 42313 represents
 *							42313 / 1024 = 41.321 %rH
 ****************************************************************************/
uint32_t BME280::convert_humidity (void)
{
     74e:	4f 92       	push	r4
     750:	5f 92       	push	r5
     752:	6f 92       	push	r6
     754:	7f 92       	push	r7
     756:	8f 92       	push	r8
     758:	9f 92       	push	r9
     75a:	af 92       	push	r10
     75c:	bf 92       	push	r11
     75e:	cf 92       	push	r12
     760:	df 92       	push	r13
     762:	ef 92       	push	r14
     764:	ff 92       	push	r15
     766:	fc 01       	movw	r30, r24
	int32_t var1;
	
	/* Utilize t_fine calculation */
	var1 = (cal.t_fine - ((int32_t)76800));
     768:	dc 01       	movw	r26, r24
     76a:	af 5b       	subi	r26, 0xBF	; 191
     76c:	bf 4f       	sbci	r27, 0xFF	; 255
     76e:	8d 90       	ld	r8, X+
     770:	9d 90       	ld	r9, X+
     772:	ad 90       	ld	r10, X+
     774:	bc 90       	ld	r11, X
     776:	2c e2       	ldi	r18, 0x2C	; 44
     778:	92 1a       	sub	r9, r18
     77a:	21 e0       	ldi	r18, 0x01	; 1
     77c:	a2 0a       	sbc	r10, r18
     77e:	b1 08       	sbc	r11, r1
	
	/* Calculate var1 - part 1	 */
	var1 =	(((((raw_hum << 14) - (((int32_t)cal.dig_H4) << 20) -
     780:	c0 88       	ldd	r12, Z+16	; 0x10
     782:	d1 88       	ldd	r13, Z+17	; 0x11
     784:	e2 88       	ldd	r14, Z+18	; 0x12
     786:	f3 88       	ldd	r15, Z+19	; 0x13
     788:	0b 2e       	mov	r0, r27
     78a:	be e0       	ldi	r27, 0x0E	; 14
     78c:	cc 0c       	add	r12, r12
     78e:	dd 1c       	adc	r13, r13
     790:	ee 1c       	adc	r14, r14
     792:	ff 1c       	adc	r15, r15
     794:	ba 95       	dec	r27
     796:	d1 f7       	brne	.-12     	; 0x78c <_ZN6BME28016convert_humidityEv+0x3e>
     798:	b0 2d       	mov	r27, r0
     79a:	84 ad       	ldd	r24, Z+60	; 0x3c
     79c:	95 ad       	ldd	r25, Z+61	; 0x3d
     79e:	09 2e       	mov	r0, r25
     7a0:	00 0c       	add	r0, r0
     7a2:	aa 0b       	sbc	r26, r26
     7a4:	bb 0b       	sbc	r27, r27
     7a6:	07 2e       	mov	r0, r23
     7a8:	74 e1       	ldi	r23, 0x14	; 20
     7aa:	88 0f       	add	r24, r24
     7ac:	99 1f       	adc	r25, r25
     7ae:	aa 1f       	adc	r26, r26
     7b0:	bb 1f       	adc	r27, r27
     7b2:	7a 95       	dec	r23
     7b4:	d1 f7       	brne	.-12     	; 0x7aa <_ZN6BME28016convert_humidityEv+0x5c>
     7b6:	70 2d       	mov	r23, r0
     7b8:	c8 1a       	sub	r12, r24
     7ba:	d9 0a       	sbc	r13, r25
     7bc:	ea 0a       	sbc	r14, r26
     7be:	fb 0a       	sbc	r15, r27
				(((int32_t)cal.dig_H5) * var1)) + ((int32_t)16384)) >> 15) *
     7c0:	a6 ad       	ldd	r26, Z+62	; 0x3e
     7c2:	b7 ad       	ldd	r27, Z+63	; 0x3f
     7c4:	a5 01       	movw	r20, r10
     7c6:	94 01       	movw	r18, r8
     7c8:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulshisi3>
	
	/* Utilize t_fine calculation */
	var1 = (cal.t_fine - ((int32_t)76800));
	
	/* Calculate var1 - part 1	 */
	var1 =	(((((raw_hum << 14) - (((int32_t)cal.dig_H4) << 20) -
     7cc:	c6 1a       	sub	r12, r22
     7ce:	d7 0a       	sbc	r13, r23
     7d0:	e8 0a       	sbc	r14, r24
     7d2:	f9 0a       	sbc	r15, r25
				(((int32_t)cal.dig_H5) * var1)) + ((int32_t)16384)) >> 15) *
     7d4:	30 e4       	ldi	r19, 0x40	; 64
     7d6:	d3 0e       	add	r13, r19
     7d8:	e1 1c       	adc	r14, r1
     7da:	f1 1c       	adc	r15, r1
     7dc:	0b 2e       	mov	r0, r27
     7de:	bf e0       	ldi	r27, 0x0F	; 15
     7e0:	f5 94       	asr	r15
     7e2:	e7 94       	ror	r14
     7e4:	d7 94       	ror	r13
     7e6:	c7 94       	ror	r12
     7e8:	ba 95       	dec	r27
     7ea:	d1 f7       	brne	.-12     	; 0x7e0 <_ZN6BME28016convert_humidityEv+0x92>
     7ec:	b0 2d       	mov	r27, r0
			 (((((((var1 * ((int32_t)cal.dig_H6)) >> 10) *
     7ee:	df 01       	movw	r26, r30
     7f0:	a0 5c       	subi	r26, 0xC0	; 192
     7f2:	bf 4f       	sbci	r27, 0xFF	; 255
     7f4:	ac 91       	ld	r26, X
     7f6:	0a 2e       	mov	r0, r26
     7f8:	00 0c       	add	r0, r0
     7fa:	bb 0b       	sbc	r27, r27
     7fc:	a5 01       	movw	r20, r10
     7fe:	94 01       	movw	r18, r8
     800:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulshisi3>
     804:	2b 01       	movw	r4, r22
     806:	3c 01       	movw	r6, r24
     808:	03 2e       	mov	r0, r19
     80a:	3a e0       	ldi	r19, 0x0A	; 10
     80c:	75 94       	asr	r7
     80e:	67 94       	ror	r6
     810:	57 94       	ror	r5
     812:	47 94       	ror	r4
     814:	3a 95       	dec	r19
     816:	d1 f7       	brne	.-12     	; 0x80c <_ZN6BME28016convert_humidityEv+0xbe>
     818:	30 2d       	mov	r19, r0
				  (((var1 * ((int32_t)cal.dig_H3)) >> 11)
     81a:	a3 ad       	ldd	r26, Z+59	; 0x3b
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__muluhisi3>
     822:	dc 01       	movw	r26, r24
     824:	cb 01       	movw	r24, r22
     826:	07 2e       	mov	r0, r23
     828:	7b e0       	ldi	r23, 0x0B	; 11
     82a:	b5 95       	asr	r27
     82c:	a7 95       	ror	r26
     82e:	97 95       	ror	r25
     830:	87 95       	ror	r24
     832:	7a 95       	dec	r23
     834:	d1 f7       	brne	.-12     	; 0x82a <_ZN6BME28016convert_humidityEv+0xdc>
     836:	70 2d       	mov	r23, r0
				   + ((int32_t)32768))) >> 10) +	
     838:	bc 01       	movw	r22, r24
     83a:	cd 01       	movw	r24, r26
     83c:	70 58       	subi	r23, 0x80	; 128
     83e:	8f 4f       	sbci	r24, 0xFF	; 255
     840:	9f 4f       	sbci	r25, 0xFF	; 255
	var1 = (cal.t_fine - ((int32_t)76800));
	
	/* Calculate var1 - part 1	 */
	var1 =	(((((raw_hum << 14) - (((int32_t)cal.dig_H4) << 20) -
				(((int32_t)cal.dig_H5) * var1)) + ((int32_t)16384)) >> 15) *
			 (((((((var1 * ((int32_t)cal.dig_H6)) >> 10) *
     842:	a3 01       	movw	r20, r6
     844:	92 01       	movw	r18, r4
     846:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__mulsi3>
				  (((var1 * ((int32_t)cal.dig_H3)) >> 11)
				   + ((int32_t)32768))) >> 10) +	
     84a:	dc 01       	movw	r26, r24
     84c:	cb 01       	movw	r24, r22
     84e:	07 2e       	mov	r0, r23
     850:	7a e0       	ldi	r23, 0x0A	; 10
     852:	b5 95       	asr	r27
     854:	a7 95       	ror	r26
     856:	97 95       	ror	r25
     858:	87 95       	ror	r24
     85a:	7a 95       	dec	r23
     85c:	d1 f7       	brne	.-12     	; 0x852 <_ZN6BME28016convert_humidityEv+0x104>
     85e:	70 2d       	mov	r23, r0
     860:	9c 01       	movw	r18, r24
     862:	ad 01       	movw	r20, r26
     864:	40 5e       	subi	r20, 0xE0	; 224
     866:	5f 4f       	sbci	r21, 0xFF	; 255
				((int32_t)2097152)) * ((int32_t)cal.dig_H2) + 8192) >> 14));
     868:	a1 ad       	ldd	r26, Z+57	; 0x39
     86a:	b2 ad       	ldd	r27, Z+58	; 0x3a
     86c:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__mulshisi3>
     870:	dc 01       	movw	r26, r24
     872:	cb 01       	movw	r24, r22
     874:	90 5e       	subi	r25, 0xE0	; 224
     876:	af 4f       	sbci	r26, 0xFF	; 255
     878:	bf 4f       	sbci	r27, 0xFF	; 255
     87a:	bc 01       	movw	r22, r24
     87c:	cd 01       	movw	r24, r26
     87e:	05 2e       	mov	r0, r21
     880:	5e e0       	ldi	r21, 0x0E	; 14
     882:	95 95       	asr	r25
     884:	87 95       	ror	r24
     886:	77 95       	ror	r23
     888:	67 95       	ror	r22
     88a:	5a 95       	dec	r21
     88c:	d1 f7       	brne	.-12     	; 0x882 <_ZN6BME28016convert_humidityEv+0x134>
     88e:	50 2d       	mov	r21, r0
     890:	a7 01       	movw	r20, r14
     892:	96 01       	movw	r18, r12
     894:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__mulsi3>
     898:	6b 01       	movw	r12, r22
     89a:	7c 01       	movw	r14, r24
	
	/* Calculate var1 - part 2 */
	var1 = (var1 - (((((var1 >> 15) * (var1 >> 15)) >> 7)
     89c:	05 2e       	mov	r0, r21
     89e:	5f e0       	ldi	r21, 0x0F	; 15
     8a0:	95 95       	asr	r25
     8a2:	87 95       	ror	r24
     8a4:	77 95       	ror	r23
     8a6:	67 95       	ror	r22
     8a8:	5a 95       	dec	r21
     8aa:	d1 f7       	brne	.-12     	; 0x8a0 <_ZN6BME28016convert_humidityEv+0x152>
     8ac:	50 2d       	mov	r21, r0
     8ae:	9b 01       	movw	r18, r22
     8b0:	ac 01       	movw	r20, r24
     8b2:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__mulsi3>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	68 94       	set
     8bc:	16 f8       	bld	r1, 6
     8be:	55 95       	asr	r21
     8c0:	47 95       	ror	r20
     8c2:	37 95       	ror	r19
     8c4:	27 95       	ror	r18
     8c6:	16 94       	lsr	r1
     8c8:	d1 f7       	brne	.-12     	; 0x8be <_ZN6BME28016convert_humidityEv+0x170>
			* ((int32_t)cal.dig_H1)) >> 4));
     8ca:	a0 ad       	ldd	r26, Z+56	; 0x38
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__muluhisi3>
     8d2:	dc 01       	movw	r26, r24
     8d4:	cb 01       	movw	r24, r22
     8d6:	68 94       	set
     8d8:	13 f8       	bld	r1, 3
     8da:	b5 95       	asr	r27
     8dc:	a7 95       	ror	r26
     8de:	97 95       	ror	r25
     8e0:	87 95       	ror	r24
     8e2:	16 94       	lsr	r1
     8e4:	d1 f7       	brne	.-12     	; 0x8da <_ZN6BME28016convert_humidityEv+0x18c>
	
	
	/* Check boundaries */	
	var1 = (var1 < 0 ? 0 : var1);
     8e6:	a7 01       	movw	r20, r14
     8e8:	96 01       	movw	r18, r12
     8ea:	28 1b       	sub	r18, r24
     8ec:	39 0b       	sbc	r19, r25
     8ee:	4a 0b       	sbc	r20, r26
     8f0:	5b 0b       	sbc	r21, r27
     8f2:	da 01       	movw	r26, r20
     8f4:	c9 01       	movw	r24, r18
     8f6:	1a f4       	brpl	.+6      	; 0x8fe <_ZN6BME28016convert_humidityEv+0x1b0>
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	dc 01       	movw	r26, r24
	var1 = (var1 > 419430400 ? 419430400 : var1);
     8fe:	81 30       	cpi	r24, 0x01	; 1
     900:	91 05       	cpc	r25, r1
     902:	a1 05       	cpc	r26, r1
     904:	39 e1       	ldi	r19, 0x19	; 25
     906:	b3 07       	cpc	r27, r19
     908:	24 f0       	brlt	.+8      	; 0x912 <__stack+0x13>
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	a0 e0       	ldi	r26, 0x00	; 0
     910:	b9 e1       	ldi	r27, 0x19	; 25
	
	return (uint32_t)((var1 >> 12));
     912:	bc 01       	movw	r22, r24
     914:	cd 01       	movw	r24, r26
     916:	05 2e       	mov	r0, r21
     918:	5c e0       	ldi	r21, 0x0C	; 12
     91a:	95 95       	asr	r25
     91c:	87 95       	ror	r24
     91e:	77 95       	ror	r23
     920:	67 95       	ror	r22
     922:	5a 95       	dec	r21
     924:	d1 f7       	brne	.-12     	; 0x91a <__stack+0x1b>
     926:	50 2d       	mov	r21, r0
}
     928:	ff 90       	pop	r15
     92a:	ef 90       	pop	r14
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	bf 90       	pop	r11
     932:	af 90       	pop	r10
     934:	9f 90       	pop	r9
     936:	8f 90       	pop	r8
     938:	7f 90       	pop	r7
     93a:	6f 90       	pop	r6
     93c:	5f 90       	pop	r5
     93e:	4f 90       	pop	r4
     940:	08 95       	ret

00000942 <_ZN6BME2809read_dataEv>:
 * 
 * Return:		bool - the status of the operation (false = success,
 *													true = failure)
 ****************************************************************************/
bool BME280::read_data (void)
{
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
     954:	28 97       	sbiw	r28, 0x08	; 8
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	7c 01       	movw	r14, r24
	uint8_t data[NUM_DATA_REG];		// array to hold all of raw data from read
	
	// read in the data from the registers
	if (p_i2c->read(BME280_ADDR, BME280_P_RAW_MSB, data, NUM_DATA_REG))
     962:	08 e0       	ldi	r16, 0x08	; 8
     964:	9e 01       	movw	r18, r28
     966:	2f 5f       	subi	r18, 0xFF	; 255
     968:	3f 4f       	sbci	r19, 0xFF	; 255
     96a:	47 ef       	ldi	r20, 0xF7	; 247
     96c:	6e ee       	ldi	r22, 0xEE	; 238
     96e:	fc 01       	movw	r30, r24
     970:	80 81       	ld	r24, Z
     972:	91 81       	ldd	r25, Z+1	; 0x01
     974:	0e 94 08 09 	call	0x1210	; 0x1210 <_ZN3i2c4readEhhPhh>
     978:	d8 2e       	mov	r13, r24
     97a:	88 23       	and	r24, r24
     97c:	89 f0       	breq	.+34     	; 0x9a0 <_ZN6BME2809read_dataEv+0x5e>
	{
		// There was an error in the read operation, propagate this message
		DBG(this->p_serial, "BME280::read_data FAILED to read data registers\r\n");
     97e:	82 e3       	ldi	r24, 0x32	; 50
     980:	e2 e3       	ldi	r30, 0x32	; 50
     982:	f1 e0       	ldi	r31, 0x01	; 1
     984:	a7 ec       	ldi	r26, 0xC7	; 199
     986:	b5 e0       	ldi	r27, 0x05	; 5
     988:	01 90       	ld	r0, Z+
     98a:	0d 92       	st	X+, r0
     98c:	8a 95       	dec	r24
     98e:	e1 f7       	brne	.-8      	; 0x988 <_ZN6BME2809read_dataEv+0x46>
     990:	67 ec       	ldi	r22, 0xC7	; 199
     992:	75 e0       	ldi	r23, 0x05	; 5
     994:	f7 01       	movw	r30, r14
     996:	82 81       	ldd	r24, Z+2	; 0x02
     998:	93 81       	ldd	r25, Z+3	; 0x03
     99a:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
		return true;
     99e:	81 c0       	rjmp	.+258    	; 0xaa2 <_ZN6BME2809read_dataEv+0x160>
	}
	
	// store data in class variables
	raw_pres = (int32_t)(
						((uint32_t)data[NDX_P_MSB]  << P_T_MSB_SHIFT)
						| ((uint32_t)data[NDX_P_LSB]  << P_T_LSB_SHIFT)
     9a0:	8a 81       	ldd	r24, Y+2	; 0x02
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	a0 e0       	ldi	r26, 0x00	; 0
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	aa 1f       	adc	r26, r26
     9ae:	bb 1f       	adc	r27, r27
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	aa 1f       	adc	r26, r26
     9b6:	bb 1f       	adc	r27, r27
     9b8:	88 0f       	add	r24, r24
     9ba:	99 1f       	adc	r25, r25
     9bc:	aa 1f       	adc	r26, r26
     9be:	bb 1f       	adc	r27, r27
     9c0:	88 0f       	add	r24, r24
     9c2:	99 1f       	adc	r25, r25
     9c4:	aa 1f       	adc	r26, r26
     9c6:	bb 1f       	adc	r27, r27
		return true;
	}
	
	// store data in class variables
	raw_pres = (int32_t)(
						((uint32_t)data[NDX_P_MSB]  << P_T_MSB_SHIFT)
     9c8:	49 81       	ldd	r20, Y+1	; 0x01
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	03 2e       	mov	r0, r19
     9d2:	3c e0       	ldi	r19, 0x0C	; 12
     9d4:	44 0f       	add	r20, r20
     9d6:	55 1f       	adc	r21, r21
     9d8:	66 1f       	adc	r22, r22
     9da:	77 1f       	adc	r23, r23
     9dc:	3a 95       	dec	r19
     9de:	d1 f7       	brne	.-12     	; 0x9d4 <_ZN6BME2809read_dataEv+0x92>
     9e0:	30 2d       	mov	r19, r0
						| ((uint32_t)data[NDX_P_LSB]  << P_T_LSB_SHIFT)
     9e2:	84 2b       	or	r24, r20
     9e4:	95 2b       	or	r25, r21
     9e6:	a6 2b       	or	r26, r22
     9e8:	b7 2b       	or	r27, r23
						| (((uint32_t)data[NDX_P_XLSB] >> P_T_XLSB_SHIFT) & 0x0F)
     9ea:	2b 81       	ldd	r18, Y+3	; 0x03
     9ec:	22 95       	swap	r18
     9ee:	2f 70       	andi	r18, 0x0F	; 15
     9f0:	82 2b       	or	r24, r18
						);
     9f2:	f7 01       	movw	r30, r14
     9f4:	80 87       	std	Z+8, r24	; 0x08
     9f6:	91 87       	std	Z+9, r25	; 0x09
     9f8:	a2 87       	std	Z+10, r26	; 0x0a
     9fa:	b3 87       	std	Z+11, r27	; 0x0b
	
	raw_temp = (int32_t)(
						((uint32_t)data[NDX_T_MSB]  << P_T_MSB_SHIFT)
						| ((uint32_t)data[NDX_T_LSB]  << P_T_LSB_SHIFT)
     9fc:	4d 81       	ldd	r20, Y+5	; 0x05
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	44 0f       	add	r20, r20
     a06:	55 1f       	adc	r21, r21
     a08:	66 1f       	adc	r22, r22
     a0a:	77 1f       	adc	r23, r23
     a0c:	44 0f       	add	r20, r20
     a0e:	55 1f       	adc	r21, r21
     a10:	66 1f       	adc	r22, r22
     a12:	77 1f       	adc	r23, r23
     a14:	44 0f       	add	r20, r20
     a16:	55 1f       	adc	r21, r21
     a18:	66 1f       	adc	r22, r22
     a1a:	77 1f       	adc	r23, r23
     a1c:	44 0f       	add	r20, r20
     a1e:	55 1f       	adc	r21, r21
     a20:	66 1f       	adc	r22, r22
     a22:	77 1f       	adc	r23, r23
						| ((uint32_t)data[NDX_P_LSB]  << P_T_LSB_SHIFT)
						| (((uint32_t)data[NDX_P_XLSB] >> P_T_XLSB_SHIFT) & 0x0F)
						);
	
	raw_temp = (int32_t)(
						((uint32_t)data[NDX_T_MSB]  << P_T_MSB_SHIFT)
     a24:	0c 81       	ldd	r16, Y+4	; 0x04
     a26:	10 e0       	ldi	r17, 0x00	; 0
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	0f 2e       	mov	r0, r31
     a2e:	fc e0       	ldi	r31, 0x0C	; 12
     a30:	00 0f       	add	r16, r16
     a32:	11 1f       	adc	r17, r17
     a34:	22 1f       	adc	r18, r18
     a36:	33 1f       	adc	r19, r19
     a38:	fa 95       	dec	r31
     a3a:	d1 f7       	brne	.-12     	; 0xa30 <_ZN6BME2809read_dataEv+0xee>
     a3c:	f0 2d       	mov	r31, r0
						| ((uint32_t)data[NDX_T_LSB]  << P_T_LSB_SHIFT)
     a3e:	40 2b       	or	r20, r16
     a40:	51 2b       	or	r21, r17
     a42:	62 2b       	or	r22, r18
     a44:	73 2b       	or	r23, r19
						| (((uint32_t)data[NDX_T_XLSB] >> P_T_XLSB_SHIFT) & 0x0F)
     a46:	8e 81       	ldd	r24, Y+6	; 0x06
     a48:	82 95       	swap	r24
     a4a:	8f 70       	andi	r24, 0x0F	; 15
     a4c:	48 2b       	or	r20, r24
						);
     a4e:	44 87       	std	Z+12, r20	; 0x0c
     a50:	55 87       	std	Z+13, r21	; 0x0d
     a52:	66 87       	std	Z+14, r22	; 0x0e
     a54:	77 87       	std	Z+15, r23	; 0x0f
			  
	raw_hum  = (int32_t)(
						((uint32_t)data[NDX_H_MSB] << BYTE_SHIFT)
     a56:	8f 81       	ldd	r24, Y+7	; 0x07
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	a0 e0       	ldi	r26, 0x00	; 0
     a5c:	b0 e0       	ldi	r27, 0x00	; 0
     a5e:	ba 2f       	mov	r27, r26
     a60:	a9 2f       	mov	r26, r25
     a62:	98 2f       	mov	r25, r24
     a64:	88 27       	eor	r24, r24
						| ((uint32_t)data[NDX_H_LSB])
     a66:	28 85       	ldd	r18, Y+8	; 0x08
     a68:	82 2b       	or	r24, r18
						);
     a6a:	80 8b       	std	Z+16, r24	; 0x10
     a6c:	91 8b       	std	Z+17, r25	; 0x11
     a6e:	a2 8b       	std	Z+18, r26	; 0x12
     a70:	b3 8b       	std	Z+19, r27	; 0x13
	
	// convert the raw values into human readable format
	pressure = convert_pressure();
     a72:	c7 01       	movw	r24, r14
     a74:	0e 94 72 00 	call	0xe4	; 0xe4 <_ZN6BME28016convert_pressureEv>
     a78:	f7 01       	movw	r30, r14
     a7a:	64 8b       	std	Z+20, r22	; 0x14
     a7c:	75 8b       	std	Z+21, r23	; 0x15
     a7e:	86 8b       	std	Z+22, r24	; 0x16
     a80:	97 8b       	std	Z+23, r25	; 0x17
	temperature = convert_temperature();
     a82:	c7 01       	movw	r24, r14
     a84:	0e 94 04 03 	call	0x608	; 0x608 <_ZN6BME28019convert_temperatureEv>
     a88:	f7 01       	movw	r30, r14
     a8a:	60 8f       	std	Z+24, r22	; 0x18
     a8c:	71 8f       	std	Z+25, r23	; 0x19
     a8e:	82 8f       	std	Z+26, r24	; 0x1a
     a90:	93 8f       	std	Z+27, r25	; 0x1b
	humidity = convert_humidity();
     a92:	c7 01       	movw	r24, r14
     a94:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN6BME28016convert_humidityEv>
     a98:	f7 01       	movw	r30, r14
     a9a:	64 8f       	std	Z+28, r22	; 0x1c
     a9c:	75 8f       	std	Z+29, r23	; 0x1d
     a9e:	86 8f       	std	Z+30, r24	; 0x1e
     aa0:	97 8f       	std	Z+31, r25	; 0x1f
	
	return false;
}
     aa2:	8d 2d       	mov	r24, r13
     aa4:	28 96       	adiw	r28, 0x08	; 8
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	f8 94       	cli
     aaa:	de bf       	out	0x3e, r29	; 62
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	cd bf       	out	0x3d, r28	; 61
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	ff 90       	pop	r15
     aba:	ef 90       	pop	r14
     abc:	df 90       	pop	r13
     abe:	08 95       	ret

00000ac0 <_ZN6BME2808read_calEv>:
 * 
 * Return:		bool - the status of the operation (false = success,
 *													true = failure)
 ****************************************************************************/
bool BME280::read_cal (void)
{
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	cd b7       	in	r28, 0x3d	; 61
     acc:	de b7       	in	r29, 0x3e	; 62
     ace:	a1 97       	sbiw	r28, 0x21	; 33
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
     ada:	7c 01       	movw	r14, r24
	uint8_t data1[BME280_CAL_RNG_1];	// hold calibration data from range 1
	uint8_t data2[BME280_CAL_RNG_2];	// hold calibration data from range 2
	
	if (p_i2c->read(BME280_ADDR, BME280_CAL_START_1, data1, BME280_CAL_RNG_1)
     adc:	0a e1       	ldi	r16, 0x1A	; 26
     ade:	9e 01       	movw	r18, r28
     ae0:	2f 5f       	subi	r18, 0xFF	; 255
     ae2:	3f 4f       	sbci	r19, 0xFF	; 255
     ae4:	48 e8       	ldi	r20, 0x88	; 136
     ae6:	6e ee       	ldi	r22, 0xEE	; 238
     ae8:	fc 01       	movw	r30, r24
     aea:	80 81       	ld	r24, Z
     aec:	91 81       	ldd	r25, Z+1	; 0x01
     aee:	0e 94 08 09 	call	0x1210	; 0x1210 <_ZN3i2c4readEhhPhh>
	 || p_i2c->read(BME280_ADDR, BME280_CAL_START_2, data2, BME280_CAL_RNG_2))
     af2:	81 11       	cpse	r24, r1
     af4:	0d c0       	rjmp	.+26     	; 0xb10 <_ZN6BME2808read_calEv+0x50>
     af6:	07 e0       	ldi	r16, 0x07	; 7
     af8:	9e 01       	movw	r18, r28
     afa:	25 5e       	subi	r18, 0xE5	; 229
     afc:	3f 4f       	sbci	r19, 0xFF	; 255
     afe:	41 ee       	ldi	r20, 0xE1	; 225
     b00:	6e ee       	ldi	r22, 0xEE	; 238
     b02:	f7 01       	movw	r30, r14
     b04:	80 81       	ld	r24, Z
     b06:	91 81       	ldd	r25, Z+1	; 0x01
     b08:	0e 94 08 09 	call	0x1210	; 0x1210 <_ZN3i2c4readEhhPhh>
bool BME280::read_cal (void)
{
	uint8_t data1[BME280_CAL_RNG_1];	// hold calibration data from range 1
	uint8_t data2[BME280_CAL_RNG_2];	// hold calibration data from range 2
	
	if (p_i2c->read(BME280_ADDR, BME280_CAL_START_1, data1, BME280_CAL_RNG_1)
     b0c:	88 23       	and	r24, r24
     b0e:	91 f0       	breq	.+36     	; 0xb34 <_ZN6BME2808read_calEv+0x74>
	 || p_i2c->read(BME280_ADDR, BME280_CAL_START_2, data2, BME280_CAL_RNG_2))
	{
		// There was an error in the read operation, propagate this message
		DBG(this->p_serial, "BME280::read_cal FAILED to read cal reigsters\r\n");
     b10:	80 e3       	ldi	r24, 0x30	; 48
     b12:	e4 e6       	ldi	r30, 0x64	; 100
     b14:	f1 e0       	ldi	r31, 0x01	; 1
     b16:	a7 ec       	ldi	r26, 0xC7	; 199
     b18:	b5 e0       	ldi	r27, 0x05	; 5
     b1a:	01 90       	ld	r0, Z+
     b1c:	0d 92       	st	X+, r0
     b1e:	8a 95       	dec	r24
     b20:	e1 f7       	brne	.-8      	; 0xb1a <_ZN6BME2808read_calEv+0x5a>
     b22:	67 ec       	ldi	r22, 0xC7	; 199
     b24:	75 e0       	ldi	r23, 0x05	; 5
     b26:	f7 01       	movw	r30, r14
     b28:	82 81       	ldd	r24, Z+2	; 0x02
     b2a:	93 81       	ldd	r25, Z+3	; 0x03
     b2c:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
		return true;
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	88 c0       	rjmp	.+272    	; 0xc44 <_ZN6BME2808read_calEv+0x184>
	}
	
	cal.dig_T1 = (uint16_t)(((uint16_t)data1[CAL_DIG_T1_MSB] << BYTE_SHIFT)
     b34:	2a 81       	ldd	r18, Y+2	; 0x02
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	32 2f       	mov	r19, r18
     b3a:	22 27       	eor	r18, r18
							| data1[CAL_DIG_T1_LSB]);
     b3c:	99 81       	ldd	r25, Y+1	; 0x01
     b3e:	29 2b       	or	r18, r25
     b40:	f7 01       	movw	r30, r14
     b42:	31 a3       	std	Z+33, r19	; 0x21
     b44:	20 a3       	std	Z+32, r18	; 0x20
	cal.dig_T2 = (int16_t)(((uint16_t)data1[CAL_DIG_T2_MSB] << BYTE_SHIFT)
     b46:	2c 81       	ldd	r18, Y+4	; 0x04
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	32 2f       	mov	r19, r18
     b4c:	22 27       	eor	r18, r18
							| data1[CAL_DIG_T2_LSB]);
     b4e:	9b 81       	ldd	r25, Y+3	; 0x03
     b50:	29 2b       	or	r18, r25
     b52:	33 a3       	std	Z+35, r19	; 0x23
     b54:	22 a3       	std	Z+34, r18	; 0x22
	cal.dig_T3 = (int16_t)(((uint16_t)data1[CAL_DIG_T3_MSB] << BYTE_SHIFT)
     b56:	2e 81       	ldd	r18, Y+6	; 0x06
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	32 2f       	mov	r19, r18
     b5c:	22 27       	eor	r18, r18
							| data1[CAL_DIG_T3_LSB]);
     b5e:	9d 81       	ldd	r25, Y+5	; 0x05
     b60:	29 2b       	or	r18, r25
     b62:	35 a3       	std	Z+37, r19	; 0x25
     b64:	24 a3       	std	Z+36, r18	; 0x24
	
	cal.dig_P1 = (uint16_t)(((uint16_t)data1[CAL_DIG_P1_MSB] << BYTE_SHIFT)
     b66:	28 85       	ldd	r18, Y+8	; 0x08
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	32 2f       	mov	r19, r18
     b6c:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P1_LSB]);
     b6e:	9f 81       	ldd	r25, Y+7	; 0x07
     b70:	29 2b       	or	r18, r25
     b72:	37 a3       	std	Z+39, r19	; 0x27
     b74:	26 a3       	std	Z+38, r18	; 0x26
	cal.dig_P2 = (int16_t)(((uint16_t)data1[CAL_DIG_P2_MSB] << BYTE_SHIFT)
     b76:	2a 85       	ldd	r18, Y+10	; 0x0a
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	32 2f       	mov	r19, r18
     b7c:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P2_LSB]);
     b7e:	99 85       	ldd	r25, Y+9	; 0x09
     b80:	29 2b       	or	r18, r25
     b82:	31 a7       	std	Z+41, r19	; 0x29
     b84:	20 a7       	std	Z+40, r18	; 0x28
	cal.dig_P3 = (int16_t)(((uint16_t)data1[CAL_DIG_P3_MSB] << BYTE_SHIFT)
     b86:	2c 85       	ldd	r18, Y+12	; 0x0c
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	32 2f       	mov	r19, r18
     b8c:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P3_LSB]);
     b8e:	9b 85       	ldd	r25, Y+11	; 0x0b
     b90:	29 2b       	or	r18, r25
     b92:	33 a7       	std	Z+43, r19	; 0x2b
     b94:	22 a7       	std	Z+42, r18	; 0x2a
	cal.dig_P4 = (int16_t)(((uint16_t)data1[CAL_DIG_P4_MSB] << BYTE_SHIFT)
     b96:	2e 85       	ldd	r18, Y+14	; 0x0e
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	32 2f       	mov	r19, r18
     b9c:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P4_LSB]);
     b9e:	9d 85       	ldd	r25, Y+13	; 0x0d
     ba0:	29 2b       	or	r18, r25
     ba2:	35 a7       	std	Z+45, r19	; 0x2d
     ba4:	24 a7       	std	Z+44, r18	; 0x2c
	cal.dig_P5 = (int16_t)(((uint16_t)data1[CAL_DIG_P5_MSB] << BYTE_SHIFT)
     ba6:	28 89       	ldd	r18, Y+16	; 0x10
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	32 2f       	mov	r19, r18
     bac:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P5_LSB]);
     bae:	9f 85       	ldd	r25, Y+15	; 0x0f
     bb0:	29 2b       	or	r18, r25
     bb2:	37 a7       	std	Z+47, r19	; 0x2f
     bb4:	26 a7       	std	Z+46, r18	; 0x2e
	cal.dig_P6 = (int16_t)(((uint16_t)data1[CAL_DIG_P6_MSB] << BYTE_SHIFT)
     bb6:	2a 89       	ldd	r18, Y+18	; 0x12
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	32 2f       	mov	r19, r18
     bbc:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P6_LSB]);
     bbe:	99 89       	ldd	r25, Y+17	; 0x11
     bc0:	29 2b       	or	r18, r25
     bc2:	31 ab       	std	Z+49, r19	; 0x31
     bc4:	20 ab       	std	Z+48, r18	; 0x30
	cal.dig_P7 = (int16_t)(((uint16_t)data1[CAL_DIG_P7_MSB] << BYTE_SHIFT)
     bc6:	2c 89       	ldd	r18, Y+20	; 0x14
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	32 2f       	mov	r19, r18
     bcc:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P7_LSB]);
     bce:	9b 89       	ldd	r25, Y+19	; 0x13
     bd0:	29 2b       	or	r18, r25
     bd2:	33 ab       	std	Z+51, r19	; 0x33
     bd4:	22 ab       	std	Z+50, r18	; 0x32
	cal.dig_P8 = (int16_t)(((uint16_t)data1[CAL_DIG_P8_MSB] << BYTE_SHIFT)
     bd6:	2e 89       	ldd	r18, Y+22	; 0x16
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	32 2f       	mov	r19, r18
     bdc:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P8_LSB]);
     bde:	9d 89       	ldd	r25, Y+21	; 0x15
     be0:	29 2b       	or	r18, r25
     be2:	35 ab       	std	Z+53, r19	; 0x35
     be4:	24 ab       	std	Z+52, r18	; 0x34
	cal.dig_P9 = (int16_t)(((uint16_t)data1[CAL_DIG_P9_MSB] << BYTE_SHIFT)
     be6:	28 8d       	ldd	r18, Y+24	; 0x18
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	32 2f       	mov	r19, r18
     bec:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P9_LSB]);
     bee:	9f 89       	ldd	r25, Y+23	; 0x17
     bf0:	29 2b       	or	r18, r25
     bf2:	37 ab       	std	Z+55, r19	; 0x37
     bf4:	26 ab       	std	Z+54, r18	; 0x36
	
	cal.dig_H1 = (uint8_t)data1[CAL_DIG_H1_LSB];
     bf6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bf8:	90 af       	std	Z+56, r25	; 0x38
	cal.dig_H2 = (int16_t)(((uint16_t)data2[CAL_DIG_H2_MSB] << BYTE_SHIFT)
     bfa:	2c 8d       	ldd	r18, Y+28	; 0x1c
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	32 2f       	mov	r19, r18
     c00:	22 27       	eor	r18, r18
							| data2[CAL_DIG_H2_LSB]);
     c02:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c04:	29 2b       	or	r18, r25
     c06:	32 af       	std	Z+58, r19	; 0x3a
     c08:	21 af       	std	Z+57, r18	; 0x39
	cal.dig_H3 = (uint8_t)data2[CAL_DIG_H3_LSB];
     c0a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c0c:	93 af       	std	Z+59, r25	; 0x3b
	cal.dig_H4 = (int16_t)(((uint16_t)data2[CAL_DIG_H4_MSB] << NIB_SHIFT)
							| (data2[CAL_DIG_H4_LSB] & CAL_DIG_H_MSK));
     c0e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c10:	49 2f       	mov	r20, r25
     c12:	4f 70       	andi	r20, 0x0F	; 15
	
	cal.dig_H1 = (uint8_t)data1[CAL_DIG_H1_LSB];
	cal.dig_H2 = (int16_t)(((uint16_t)data2[CAL_DIG_H2_MSB] << BYTE_SHIFT)
							| data2[CAL_DIG_H2_LSB]);
	cal.dig_H3 = (uint8_t)data2[CAL_DIG_H3_LSB];
	cal.dig_H4 = (int16_t)(((uint16_t)data2[CAL_DIG_H4_MSB] << NIB_SHIFT)
     c14:	2e 8d       	ldd	r18, Y+30	; 0x1e
     c16:	f0 e1       	ldi	r31, 0x10	; 16
     c18:	2f 9f       	mul	r18, r31
     c1a:	90 01       	movw	r18, r0
     c1c:	11 24       	eor	r1, r1
							| (data2[CAL_DIG_H4_LSB] & CAL_DIG_H_MSK));
     c1e:	24 2b       	or	r18, r20
     c20:	f7 01       	movw	r30, r14
     c22:	35 af       	std	Z+61, r19	; 0x3d
     c24:	24 af       	std	Z+60, r18	; 0x3c
	cal.dig_H5 = (int16_t)(((uint16_t)data2[CAL_DIG_H5_MSB] << NIB_SHIFT)
							| ((data2[CAL_DIG_H5_LSB] >> NIB_SHIFT) 
     c26:	92 95       	swap	r25
     c28:	9f 70       	andi	r25, 0x0F	; 15
	cal.dig_H2 = (int16_t)(((uint16_t)data2[CAL_DIG_H2_MSB] << BYTE_SHIFT)
							| data2[CAL_DIG_H2_LSB]);
	cal.dig_H3 = (uint8_t)data2[CAL_DIG_H3_LSB];
	cal.dig_H4 = (int16_t)(((uint16_t)data2[CAL_DIG_H4_MSB] << NIB_SHIFT)
							| (data2[CAL_DIG_H4_LSB] & CAL_DIG_H_MSK));
	cal.dig_H5 = (int16_t)(((uint16_t)data2[CAL_DIG_H5_MSB] << NIB_SHIFT)
     c2a:	28 a1       	ldd	r18, Y+32	; 0x20
     c2c:	f0 e1       	ldi	r31, 0x10	; 16
     c2e:	2f 9f       	mul	r18, r31
     c30:	90 01       	movw	r18, r0
     c32:	11 24       	eor	r1, r1
							| ((data2[CAL_DIG_H5_LSB] >> NIB_SHIFT) 
     c34:	29 2b       	or	r18, r25
								& CAL_DIG_H_MSK));
     c36:	f7 01       	movw	r30, r14
     c38:	37 af       	std	Z+63, r19	; 0x3f
     c3a:	26 af       	std	Z+62, r18	; 0x3e
	cal.dig_H6 = (int8_t)data2[CAL_DIG_H6_LSB];
     c3c:	e0 5c       	subi	r30, 0xC0	; 192
     c3e:	ff 4f       	sbci	r31, 0xFF	; 255
     c40:	99 a1       	ldd	r25, Y+33	; 0x21
     c42:	90 83       	st	Z, r25
	
	return false;
}
     c44:	a1 96       	adiw	r28, 0x21	; 33
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	08 95       	ret

00000c5c <_ZN6BME280C1EP3i2cP6seriall>:
 * Parameters:	ptr_i2c		- pointer to an i2c object to be used for 
 *								communicating with the BME280 sensor
 *				ptr_serial	- pointer to a serial object to be used for
 *								debugging
 ****************************************************************************/
BME280::BME280 (i2c* ptr_i2c, serial *ptr_serial, int32_t temperature_cal)
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	ec 01       	movw	r28, r24
     c66:	cb 01       	movw	r24, r22
{
	p_i2c = ptr_i2c;			// store local copy of i2c pointer for use
     c68:	79 83       	std	Y+1, r23	; 0x01
     c6a:	68 83       	st	Y, r22
	p_serial = ptr_serial;		// store local copy of serial pointer for debug
     c6c:	5b 83       	std	Y+3, r21	; 0x03
     c6e:	4a 83       	std	Y+2, r20	; 0x02
	temp_cal = temperature_cal;	// store local copy of temp cal
     c70:	0c 83       	std	Y+4, r16	; 0x04
     c72:	1d 83       	std	Y+5, r17	; 0x05
     c74:	2e 83       	std	Y+6, r18	; 0x06
     c76:	3f 83       	std	Y+7, r19	; 0x07
	
	if (p_i2c->ping(BME280_ADDR))
     c78:	6e ee       	ldi	r22, 0xEE	; 238
     c7a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_ZN3i2c4pingEh>
     c7e:	88 23       	and	r24, r24
     c80:	f9 f0       	breq	.+62     	; 0xcc0 <_ZN6BME280C1EP3i2cP6seriall+0x64>
	{
		DBG(this->p_serial, "BME280 <0x%X> ALIVE\r\n", BME280_ADDR);
     c82:	1f 92       	push	r1
     c84:	8e ee       	ldi	r24, 0xEE	; 238
     c86:	8f 93       	push	r24
     c88:	84 e9       	ldi	r24, 0x94	; 148
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	9f 93       	push	r25
     c8e:	8f 93       	push	r24
     c90:	87 ec       	ldi	r24, 0xC7	; 199
     c92:	95 e0       	ldi	r25, 0x05	; 5
     c94:	9f 93       	push	r25
     c96:	8f 93       	push	r24
     c98:	0e 94 91 12 	call	0x2522	; 0x2522 <sprintf>
     c9c:	67 ec       	ldi	r22, 0xC7	; 199
     c9e:	75 e0       	ldi	r23, 0x05	; 5
     ca0:	8a 81       	ldd	r24, Y+2	; 0x02
     ca2:	9b 81       	ldd	r25, Y+3	; 0x03
     ca4:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
		DBG(this->p_serial, "BME280 <0x%X> DEAD\r\n", BME280_ADDR);
		return;
	}

	// initialize the sensor registers
	if(init())
     ca8:	ce 01       	movw	r24, r28
     caa:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN6BME2804initEv>
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	88 23       	and	r24, r24
     cbc:	59 f1       	breq	.+86     	; 0xd14 <_ZN6BME280C1EP3i2cP6seriall+0xb8>
     cbe:	1a c0       	rjmp	.+52     	; 0xcf4 <_ZN6BME280C1EP3i2cP6seriall+0x98>
	{
		DBG(this->p_serial, "BME280 <0x%X> ALIVE\r\n", BME280_ADDR);
	}
	else
	{
		DBG(this->p_serial, "BME280 <0x%X> DEAD\r\n", BME280_ADDR);
     cc0:	1f 92       	push	r1
     cc2:	8e ee       	ldi	r24, 0xEE	; 238
     cc4:	8f 93       	push	r24
     cc6:	8a ea       	ldi	r24, 0xAA	; 170
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	9f 93       	push	r25
     ccc:	8f 93       	push	r24
     cce:	87 ec       	ldi	r24, 0xC7	; 199
     cd0:	95 e0       	ldi	r25, 0x05	; 5
     cd2:	9f 93       	push	r25
     cd4:	8f 93       	push	r24
     cd6:	0e 94 91 12 	call	0x2522	; 0x2522 <sprintf>
     cda:	67 ec       	ldi	r22, 0xC7	; 199
     cdc:	75 e0       	ldi	r23, 0x05	; 5
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	9b 81       	ldd	r25, Y+3	; 0x03
     ce2:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
		return;
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	37 c0       	rjmp	.+110    	; 0xd62 <_ZN6BME280C1EP3i2cP6seriall+0x106>
	}

	// initialize the sensor registers
	if(init())
	{
		DBG(this->p_serial, "BME280::BME280 FAILED BME280::init\r\n");
     cf4:	85 e2       	ldi	r24, 0x25	; 37
     cf6:	ef eb       	ldi	r30, 0xBF	; 191
     cf8:	f1 e0       	ldi	r31, 0x01	; 1
     cfa:	a7 ec       	ldi	r26, 0xC7	; 199
     cfc:	b5 e0       	ldi	r27, 0x05	; 5
     cfe:	01 90       	ld	r0, Z+
     d00:	0d 92       	st	X+, r0
     d02:	8a 95       	dec	r24
     d04:	e1 f7       	brne	.-8      	; 0xcfe <_ZN6BME280C1EP3i2cP6seriall+0xa2>
     d06:	67 ec       	ldi	r22, 0xC7	; 199
     d08:	75 e0       	ldi	r23, 0x05	; 5
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	9b 81       	ldd	r25, Y+3	; 0x03
     d0e:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
		return;
     d12:	27 c0       	rjmp	.+78     	; 0xd62 <_ZN6BME280C1EP3i2cP6seriall+0x106>
	}
	
	// read out cal registers for calculations
	if (read_cal())
     d14:	ce 01       	movw	r24, r28
     d16:	0e 94 60 05 	call	0xac0	; 0xac0 <_ZN6BME2808read_calEv>
     d1a:	88 23       	and	r24, r24
     d1c:	81 f0       	breq	.+32     	; 0xd3e <_ZN6BME280C1EP3i2cP6seriall+0xe2>
	{
		DBG(this->p_serial, "BME280::BME280 FAILED BME280::read_cal\r\n");
     d1e:	89 e2       	ldi	r24, 0x29	; 41
     d20:	e4 ee       	ldi	r30, 0xE4	; 228
     d22:	f1 e0       	ldi	r31, 0x01	; 1
     d24:	a7 ec       	ldi	r26, 0xC7	; 199
     d26:	b5 e0       	ldi	r27, 0x05	; 5
     d28:	01 90       	ld	r0, Z+
     d2a:	0d 92       	st	X+, r0
     d2c:	8a 95       	dec	r24
     d2e:	e1 f7       	brne	.-8      	; 0xd28 <_ZN6BME280C1EP3i2cP6seriall+0xcc>
     d30:	67 ec       	ldi	r22, 0xC7	; 199
     d32:	75 e0       	ldi	r23, 0x05	; 5
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	9b 81       	ldd	r25, Y+3	; 0x03
     d38:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
		return;
     d3c:	12 c0       	rjmp	.+36     	; 0xd62 <_ZN6BME280C1EP3i2cP6seriall+0x106>
	}
	
	// initial read of data to fill sensor data
	read_data();
     d3e:	ce 01       	movw	r24, r28
     d40:	0e 94 a1 04 	call	0x942	; 0x942 <_ZN6BME2809read_dataEv>
	
	DBG(this->p_serial, "BME280 Constructor OK!\r\n");
     d44:	89 e1       	ldi	r24, 0x19	; 25
     d46:	ed e0       	ldi	r30, 0x0D	; 13
     d48:	f2 e0       	ldi	r31, 0x02	; 2
     d4a:	a7 ec       	ldi	r26, 0xC7	; 199
     d4c:	b5 e0       	ldi	r27, 0x05	; 5
     d4e:	01 90       	ld	r0, Z+
     d50:	0d 92       	st	X+, r0
     d52:	8a 95       	dec	r24
     d54:	e1 f7       	brne	.-8      	; 0xd4e <_ZN6BME280C1EP3i2cP6seriall+0xf2>
     d56:	67 ec       	ldi	r22, 0xC7	; 199
     d58:	75 e0       	ldi	r23, 0x05	; 5
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	9b 81       	ldd	r25, Y+3	; 0x03
     d5e:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
}
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	08 95       	ret

00000d6c <_ZN6BME28010BME280TaskEv>:
	
	return false;
}

void BME280::BME280Task (void)
{
     d6c:	8f 92       	push	r8
     d6e:	9f 92       	push	r9
     d70:	af 92       	push	r10
     d72:	bf 92       	push	r11
     d74:	cf 92       	push	r12
     d76:	df 92       	push	r13
     d78:	ef 92       	push	r14
     d7a:	ff 92       	push	r15
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	ec 01       	movw	r28, r24
	static uint8_t runs = 0;
	int32_t temp_f;
	
	if ((runs % 5) == 0)
     d86:	20 91 c0 05 	lds	r18, 0x05C0
     d8a:	9d ec       	ldi	r25, 0xCD	; 205
     d8c:	29 9f       	mul	r18, r25
     d8e:	91 2d       	mov	r25, r1
     d90:	11 24       	eor	r1, r1
     d92:	96 95       	lsr	r25
     d94:	96 95       	lsr	r25
     d96:	39 2f       	mov	r19, r25
     d98:	33 0f       	add	r19, r19
     d9a:	33 0f       	add	r19, r19
     d9c:	93 0f       	add	r25, r19
     d9e:	29 13       	cpse	r18, r25
     da0:	b0 c0       	rjmp	.+352    	; 0xf02 <_ZN6BME28010BME280TaskEv+0x196>
	{
		DBG(this->p_serial, "\r\nBME280 Task Running\r\n");
     da2:	07 ec       	ldi	r16, 0xC7	; 199
     da4:	15 e0       	ldi	r17, 0x05	; 5
     da6:	88 e1       	ldi	r24, 0x18	; 24
     da8:	e6 e2       	ldi	r30, 0x26	; 38
     daa:	f2 e0       	ldi	r31, 0x02	; 2
     dac:	d8 01       	movw	r26, r16
     dae:	01 90       	ld	r0, Z+
     db0:	0d 92       	st	X+, r0
     db2:	8a 95       	dec	r24
     db4:	e1 f7       	brne	.-8      	; 0xdae <_ZN6BME28010BME280TaskEv+0x42>
     db6:	b8 01       	movw	r22, r16
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	9b 81       	ldd	r25, Y+3	; 0x03
     dbc:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
		
		read_data();
     dc0:	ce 01       	movw	r24, r28
     dc2:	0e 94 a1 04 	call	0x942	; 0x942 <_ZN6BME2809read_dataEv>
		
		temp_f = TEMP_C_TO_F(temperature);	
     dc6:	c8 8c       	ldd	r12, Y+24	; 0x18
     dc8:	d9 8c       	ldd	r13, Y+25	; 0x19
     dca:	ea 8c       	ldd	r14, Y+26	; 0x1a
     dcc:	fb 8c       	ldd	r15, Y+27	; 0x1b
     dce:	d7 01       	movw	r26, r14
     dd0:	c6 01       	movw	r24, r12
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	aa 1f       	adc	r26, r26
     dd8:	bb 1f       	adc	r27, r27
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	aa 1f       	adc	r26, r26
     de0:	bb 1f       	adc	r27, r27
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	aa 1f       	adc	r26, r26
     de8:	bb 1f       	adc	r27, r27
     dea:	8c 0d       	add	r24, r12
     dec:	9d 1d       	adc	r25, r13
     dee:	ae 1d       	adc	r26, r14
     df0:	bf 1d       	adc	r27, r15
     df2:	bc 01       	movw	r22, r24
     df4:	cd 01       	movw	r24, r26
     df6:	60 58       	subi	r22, 0x80	; 128
     df8:	71 4c       	sbci	r23, 0xC1	; 193
     dfa:	8f 4f       	sbci	r24, 0xFF	; 255
     dfc:	9f 4f       	sbci	r25, 0xFF	; 255
     dfe:	25 e0       	ldi	r18, 0x05	; 5
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e0       	ldi	r20, 0x00	; 0
     e04:	50 e0       	ldi	r21, 0x00	; 0
     e06:	0e 94 b7 10 	call	0x216e	; 0x216e <__divmodsi4>
		
		DBG(this->p_serial, "Temperature: %ld.%02ldC or %ld.%02ldF\r\n",
     e0a:	0f 2e       	mov	r0, r31
     e0c:	f4 e6       	ldi	r31, 0x64	; 100
     e0e:	8f 2e       	mov	r8, r31
     e10:	91 2c       	mov	r9, r1
     e12:	a1 2c       	mov	r10, r1
     e14:	b1 2c       	mov	r11, r1
     e16:	f0 2d       	mov	r31, r0
     e18:	ca 01       	movw	r24, r20
     e1a:	b9 01       	movw	r22, r18
     e1c:	a5 01       	movw	r20, r10
     e1e:	94 01       	movw	r18, r8
     e20:	0e 94 b7 10 	call	0x216e	; 0x216e <__divmodsi4>
     e24:	9f 93       	push	r25
     e26:	8f 93       	push	r24
     e28:	7f 93       	push	r23
     e2a:	6f 93       	push	r22
     e2c:	5f 93       	push	r21
     e2e:	4f 93       	push	r20
     e30:	3f 93       	push	r19
     e32:	2f 93       	push	r18
     e34:	c7 01       	movw	r24, r14
     e36:	b6 01       	movw	r22, r12
     e38:	a5 01       	movw	r20, r10
     e3a:	94 01       	movw	r18, r8
     e3c:	0e 94 b7 10 	call	0x216e	; 0x216e <__divmodsi4>
     e40:	9f 93       	push	r25
     e42:	8f 93       	push	r24
     e44:	7f 93       	push	r23
     e46:	6f 93       	push	r22
     e48:	5f 93       	push	r21
     e4a:	4f 93       	push	r20
     e4c:	3f 93       	push	r19
     e4e:	2f 93       	push	r18
     e50:	8e e3       	ldi	r24, 0x3E	; 62
     e52:	92 e0       	ldi	r25, 0x02	; 2
     e54:	9f 93       	push	r25
     e56:	8f 93       	push	r24
     e58:	1f 93       	push	r17
     e5a:	0f 93       	push	r16
     e5c:	0e 94 91 12 	call	0x2522	; 0x2522 <sprintf>
     e60:	b8 01       	movw	r22, r16
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	9b 81       	ldd	r25, Y+3	; 0x03
     e66:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
				(temperature / 100), (temperature % 100),
				(temp_f / 100), (temp_f % 100));
		
		DBG(this->p_serial, "Humidity: %lu.%lu%%\r\n",
     e6a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e6c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     e6e:	ae 8d       	ldd	r26, Y+30	; 0x1e
     e70:	bf 8d       	ldd	r27, Y+31	; 0x1f
     e72:	ac 01       	movw	r20, r24
     e74:	bd 01       	movw	r22, r26
     e76:	53 70       	andi	r21, 0x03	; 3
     e78:	66 27       	eor	r22, r22
     e7a:	77 27       	eor	r23, r23
     e7c:	7f 93       	push	r23
     e7e:	6f 93       	push	r22
     e80:	5f 93       	push	r21
     e82:	4f 93       	push	r20
     e84:	07 2e       	mov	r0, r23
     e86:	7a e0       	ldi	r23, 0x0A	; 10
     e88:	b6 95       	lsr	r27
     e8a:	a7 95       	ror	r26
     e8c:	97 95       	ror	r25
     e8e:	87 95       	ror	r24
     e90:	7a 95       	dec	r23
     e92:	d1 f7       	brne	.-12     	; 0xe88 <_ZN6BME28010BME280TaskEv+0x11c>
     e94:	70 2d       	mov	r23, r0
     e96:	bf 93       	push	r27
     e98:	af 93       	push	r26
     e9a:	9f 93       	push	r25
     e9c:	8f 93       	push	r24
     e9e:	86 e6       	ldi	r24, 0x66	; 102
     ea0:	92 e0       	ldi	r25, 0x02	; 2
     ea2:	9f 93       	push	r25
     ea4:	8f 93       	push	r24
     ea6:	1f 93       	push	r17
     ea8:	0f 93       	push	r16
     eaa:	0e 94 91 12 	call	0x2522	; 0x2522 <sprintf>
     eae:	8d b7       	in	r24, 0x3d	; 61
     eb0:	9e b7       	in	r25, 0x3e	; 62
     eb2:	80 96       	adiw	r24, 0x20	; 32
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	9e bf       	out	0x3e, r25	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	8d bf       	out	0x3d, r24	; 61
     ebe:	b8 01       	movw	r22, r16
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	9b 81       	ldd	r25, Y+3	; 0x03
     ec4:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
			(humidity / 1024), (humidity % 1024));
			
		DBG(this->p_serial, "Pressure: %luPa\r\n",
     ec8:	8f 89       	ldd	r24, Y+23	; 0x17
     eca:	8f 93       	push	r24
     ecc:	8e 89       	ldd	r24, Y+22	; 0x16
     ece:	8f 93       	push	r24
     ed0:	8d 89       	ldd	r24, Y+21	; 0x15
     ed2:	8f 93       	push	r24
     ed4:	8c 89       	ldd	r24, Y+20	; 0x14
     ed6:	8f 93       	push	r24
     ed8:	8c e7       	ldi	r24, 0x7C	; 124
     eda:	92 e0       	ldi	r25, 0x02	; 2
     edc:	9f 93       	push	r25
     ede:	8f 93       	push	r24
     ee0:	1f 93       	push	r17
     ee2:	0f 93       	push	r16
     ee4:	0e 94 91 12 	call	0x2522	; 0x2522 <sprintf>
     ee8:	b8 01       	movw	r22, r16
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	9b 81       	ldd	r25, Y+3	; 0x03
     eee:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
     ef2:	8d b7       	in	r24, 0x3d	; 61
     ef4:	9e b7       	in	r25, 0x3e	; 62
     ef6:	08 96       	adiw	r24, 0x08	; 8
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	9e bf       	out	0x3e, r25	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	8d bf       	out	0x3d, r24	; 61
			pressure);
	}
	
	runs++;
     f02:	80 91 c0 05 	lds	r24, 0x05C0
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	80 93 c0 05 	sts	0x05C0, r24
	return;
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	ef 90       	pop	r14
     f18:	df 90       	pop	r13
     f1a:	cf 90       	pop	r12
     f1c:	bf 90       	pop	r11
     f1e:	af 90       	pop	r10
     f20:	9f 90       	pop	r9
     f22:	8f 90       	pop	r8
     f24:	08 95       	ret

00000f26 <_ZN3i2cC1EP6serial>:
 * 
 * Parameters:	ptr_serial - a reference to the serial debug object
 ****************************************************************************/
i2c::i2c (serial *ptr_serial)
{
	p_serial = ptr_serial;	// store a local copy of serial pointer for debug
     f26:	fc 01       	movw	r30, r24
     f28:	71 83       	std	Z+1, r23	; 0x01
     f2a:	60 83       	st	Z, r22
	
	// set the bit rate to 200kHz, with no prescaler
	TWSR = 0x00;
     f2c:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = 32;
     f30:	20 e2       	ldi	r18, 0x20	; 32
     f32:	20 93 b8 00 	sts	0x00B8, r18
	
	// enable i2c protocol
	TWCR = (1 << TWEN);
     f36:	24 e0       	ldi	r18, 0x04	; 4
     f38:	20 93 bc 00 	sts	0x00BC, r18
	
	DBG(this->p_serial, "i2c constructor OK!\r\n");
     f3c:	26 e1       	ldi	r18, 0x16	; 22
     f3e:	ee e8       	ldi	r30, 0x8E	; 142
     f40:	f2 e0       	ldi	r31, 0x02	; 2
     f42:	a7 ec       	ldi	r26, 0xC7	; 199
     f44:	b5 e0       	ldi	r27, 0x05	; 5
     f46:	01 90       	ld	r0, Z+
     f48:	0d 92       	st	X+, r0
     f4a:	2a 95       	dec	r18
     f4c:	e1 f7       	brne	.-8      	; 0xf46 <_ZN3i2cC1EP6serial+0x20>
     f4e:	67 ec       	ldi	r22, 0xC7	; 199
     f50:	75 e0       	ldi	r23, 0x05	; 5
     f52:	fc 01       	movw	r30, r24
     f54:	80 81       	ld	r24, Z
     f56:	91 81       	ldd	r25, Z+1	; 0x01
     f58:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
     f5c:	08 95       	ret

00000f5e <_ZN3i2c5startEv>:
 * Description:	This method puts the start signal on the i2c bus
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::start (void)
{
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	ec 01       	movw	r28, r24
	// put a start condition on the line
	TWCR = ((1 << TWSTA) | (1 << TWEN) | (1 << TWINT));
     f64:	ec eb       	ldi	r30, 0xBC	; 188
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	84 ea       	ldi	r24, 0xA4	; 164
     f6a:	80 83       	st	Z, r24
	
	// wait for TWINT to go low, which signals start condition completed
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     f6c:	80 81       	ld	r24, Z
     f6e:	88 23       	and	r24, r24
     f70:	ac f4       	brge	.+42     	; 0xf9c <_ZN3i2c5startEv+0x3e>
     f72:	1b c0       	rjmp	.+54     	; 0xfaa <_ZN3i2c5startEv+0x4c>
     f74:	21 50       	subi	r18, 0x01	; 1
     f76:	31 09       	sbc	r19, r1
	{
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
     f78:	a9 f4       	brne	.+42     	; 0xfa4 <_ZN3i2c5startEv+0x46>
		{
			// timeout occurred, error
			DBG(this->p_serial, "i2c::start FAILED - timed out\r\n");
     f7a:	80 e2       	ldi	r24, 0x20	; 32
     f7c:	e4 ea       	ldi	r30, 0xA4	; 164
     f7e:	f2 e0       	ldi	r31, 0x02	; 2
     f80:	a7 ec       	ldi	r26, 0xC7	; 199
     f82:	b5 e0       	ldi	r27, 0x05	; 5
     f84:	01 90       	ld	r0, Z+
     f86:	0d 92       	st	X+, r0
     f88:	8a 95       	dec	r24
     f8a:	e1 f7       	brne	.-8      	; 0xf84 <_ZN3i2c5startEv+0x26>
     f8c:	67 ec       	ldi	r22, 0xC7	; 199
     f8e:	75 e0       	ldi	r23, 0x05	; 5
     f90:	88 81       	ld	r24, Y
     f92:	99 81       	ldd	r25, Y+1	; 0x01
     f94:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
			return true;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	29 c0       	rjmp	.+82     	; 0xfee <_ZN3i2c5startEv+0x90>
{
	// put a start condition on the line
	TWCR = ((1 << TWSTA) | (1 << TWEN) | (1 << TWINT));
	
	// wait for TWINT to go low, which signals start condition completed
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     f9c:	21 e0       	ldi	r18, 0x01	; 1
     f9e:	34 e0       	ldi	r19, 0x04	; 4
     fa0:	ec eb       	ldi	r30, 0xBC	; 188
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	90 81       	ld	r25, Z
     fa6:	99 23       	and	r25, r25
     fa8:	2c f7       	brge	.-54     	; 0xf74 <_ZN3i2c5startEv+0x16>
			return true;
		}
	}
	
	// check status register
	if ((TWSR & STAT_MSK) != STAT_START)
     faa:	90 91 b9 00 	lds	r25, 0x00B9
     fae:	98 7f       	andi	r25, 0xF8	; 248
     fb0:	98 30       	cpi	r25, 0x08	; 8
     fb2:	e1 f0       	breq	.+56     	; 0xfec <_ZN3i2c5startEv+0x8e>
	{
		// Status register is not a start signal, error
		DBG(this->p_serial, "i2c::start FAILED - status (0x%2X) bad\r\n", TWSR);
     fb4:	80 91 b9 00 	lds	r24, 0x00B9
     fb8:	1f 92       	push	r1
     fba:	8f 93       	push	r24
     fbc:	84 ec       	ldi	r24, 0xC4	; 196
     fbe:	92 e0       	ldi	r25, 0x02	; 2
     fc0:	9f 93       	push	r25
     fc2:	8f 93       	push	r24
     fc4:	87 ec       	ldi	r24, 0xC7	; 199
     fc6:	95 e0       	ldi	r25, 0x05	; 5
     fc8:	9f 93       	push	r25
     fca:	8f 93       	push	r24
     fcc:	0e 94 91 12 	call	0x2522	; 0x2522 <sprintf>
     fd0:	67 ec       	ldi	r22, 0xC7	; 199
     fd2:	75 e0       	ldi	r23, 0x05	; 5
     fd4:	88 81       	ld	r24, Y
     fd6:	99 81       	ldd	r25, Y+1	; 0x01
     fd8:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
		return true;
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	01 c0       	rjmp	.+2      	; 0xfee <_ZN3i2c5startEv+0x90>
	}
	
	return false;
     fec:	80 e0       	ldi	r24, 0x00	; 0
}
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	08 95       	ret

00000ff4 <_ZN3i2c7restartEv>:
 * Description: This method sends a repeated start signal on the i2c bus
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::restart (void)
{
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	ec 01       	movw	r28, r24
	// put another start condition on the line
	TWCR = ((1 << TWSTA) | (1 << TWEN) | (1 << TWINT));
     ffa:	ec eb       	ldi	r30, 0xBC	; 188
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	84 ea       	ldi	r24, 0xA4	; 164
    1000:	80 83       	st	Z, r24
	
	// wait for TWINT to go low, which signals start condition completed
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
    1002:	80 81       	ld	r24, Z
    1004:	88 23       	and	r24, r24
    1006:	ac f4       	brge	.+42     	; 0x1032 <_ZN3i2c7restartEv+0x3e>
    1008:	1b c0       	rjmp	.+54     	; 0x1040 <_ZN3i2c7restartEv+0x4c>
    100a:	21 50       	subi	r18, 0x01	; 1
    100c:	31 09       	sbc	r19, r1
	{
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
    100e:	a9 f4       	brne	.+42     	; 0x103a <_ZN3i2c7restartEv+0x46>
		{
			// timeout occurred, error
			DBG(this->p_serial, "i2c::restart FAILED - timed out\r\n");
    1010:	82 e2       	ldi	r24, 0x22	; 34
    1012:	ed ee       	ldi	r30, 0xED	; 237
    1014:	f2 e0       	ldi	r31, 0x02	; 2
    1016:	a7 ec       	ldi	r26, 0xC7	; 199
    1018:	b5 e0       	ldi	r27, 0x05	; 5
    101a:	01 90       	ld	r0, Z+
    101c:	0d 92       	st	X+, r0
    101e:	8a 95       	dec	r24
    1020:	e1 f7       	brne	.-8      	; 0x101a <_ZN3i2c7restartEv+0x26>
    1022:	67 ec       	ldi	r22, 0xC7	; 199
    1024:	75 e0       	ldi	r23, 0x05	; 5
    1026:	88 81       	ld	r24, Y
    1028:	99 81       	ldd	r25, Y+1	; 0x01
    102a:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
			return true;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	29 c0       	rjmp	.+82     	; 0x1084 <_ZN3i2c7restartEv+0x90>
{
	// put another start condition on the line
	TWCR = ((1 << TWSTA) | (1 << TWEN) | (1 << TWINT));
	
	// wait for TWINT to go low, which signals start condition completed
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
    1032:	21 e0       	ldi	r18, 0x01	; 1
    1034:	34 e0       	ldi	r19, 0x04	; 4
    1036:	ec eb       	ldi	r30, 0xBC	; 188
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	90 81       	ld	r25, Z
    103c:	99 23       	and	r25, r25
    103e:	2c f7       	brge	.-54     	; 0x100a <_ZN3i2c7restartEv+0x16>
			return true;
		}
	}
	
	// check status register
	if ((TWSR & STAT_MSK) != STAT_RESTART)
    1040:	90 91 b9 00 	lds	r25, 0x00B9
    1044:	98 7f       	andi	r25, 0xF8	; 248
    1046:	90 31       	cpi	r25, 0x10	; 16
    1048:	e1 f0       	breq	.+56     	; 0x1082 <_ZN3i2c7restartEv+0x8e>
	{
		// Status register is not a repeated start signal, error
		DBG(this->p_serial, "i2c::restart FAILED - status (0x%2X) bad\r\n", TWSR);
    104a:	80 91 b9 00 	lds	r24, 0x00B9
    104e:	1f 92       	push	r1
    1050:	8f 93       	push	r24
    1052:	8f e0       	ldi	r24, 0x0F	; 15
    1054:	93 e0       	ldi	r25, 0x03	; 3
    1056:	9f 93       	push	r25
    1058:	8f 93       	push	r24
    105a:	87 ec       	ldi	r24, 0xC7	; 199
    105c:	95 e0       	ldi	r25, 0x05	; 5
    105e:	9f 93       	push	r25
    1060:	8f 93       	push	r24
    1062:	0e 94 91 12 	call	0x2522	; 0x2522 <sprintf>
    1066:	67 ec       	ldi	r22, 0xC7	; 199
    1068:	75 e0       	ldi	r23, 0x05	; 5
    106a:	88 81       	ld	r24, Y
    106c:	99 81       	ldd	r25, Y+1	; 0x01
    106e:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
		return true;
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <_ZN3i2c7restartEv+0x90>
	}
	
	return false;	
    1082:	80 e0       	ldi	r24, 0x00	; 0
}
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	08 95       	ret

0000108a <_ZN3i2c10write_byteEh>:
 * 
 * Parameters:	data - the byte of data being written to the bus
 * Return:		bool - status of operation (true = ack, false = nack)
 ****************************************************************************/
bool i2c::write_byte (uint8_t data)
{	
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	ac 01       	movw	r20, r24
	TWDR = data;
    1090:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = ((1 << TWINT) | (1 << TWEN));
    1094:	ec eb       	ldi	r30, 0xBC	; 188
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	94 e8       	ldi	r25, 0x84	; 132
    109a:	90 83       	st	Z, r25
	

	// wait for TWINT to go low, which signals write condition sent
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
    109c:	90 81       	ld	r25, Z
    109e:	99 23       	and	r25, r25
    10a0:	b4 f4       	brge	.+44     	; 0x10ce <_ZN3i2c10write_byteEh+0x44>
    10a2:	1c c0       	rjmp	.+56     	; 0x10dc <_ZN3i2c10write_byteEh+0x52>
    10a4:	21 50       	subi	r18, 0x01	; 1
    10a6:	31 09       	sbc	r19, r1
	{
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
    10a8:	b1 f4       	brne	.+44     	; 0x10d6 <_ZN3i2c10write_byteEh+0x4c>
    10aa:	ea 01       	movw	r28, r20
		{
			// timeout occurred, error
			DBG(this->p_serial, "i2c::write_byte FAILED - timed out\r\n");
    10ac:	85 e2       	ldi	r24, 0x25	; 37
    10ae:	ea e3       	ldi	r30, 0x3A	; 58
    10b0:	f3 e0       	ldi	r31, 0x03	; 3
    10b2:	a7 ec       	ldi	r26, 0xC7	; 199
    10b4:	b5 e0       	ldi	r27, 0x05	; 5
    10b6:	01 90       	ld	r0, Z+
    10b8:	0d 92       	st	X+, r0
    10ba:	8a 95       	dec	r24
    10bc:	e1 f7       	brne	.-8      	; 0x10b6 <_ZN3i2c10write_byteEh+0x2c>
    10be:	67 ec       	ldi	r22, 0xC7	; 199
    10c0:	75 e0       	ldi	r23, 0x05	; 5
    10c2:	88 81       	ld	r24, Y
    10c4:	99 81       	ldd	r25, Y+1	; 0x01
    10c6:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
			return true;
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	13 c0       	rjmp	.+38     	; 0x10f4 <_ZN3i2c10write_byteEh+0x6a>
	TWDR = data;
	TWCR = ((1 << TWINT) | (1 << TWEN));
	

	// wait for TWINT to go low, which signals write condition sent
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
    10ce:	21 e0       	ldi	r18, 0x01	; 1
    10d0:	34 e0       	ldi	r19, 0x04	; 4
    10d2:	ec eb       	ldi	r30, 0xBC	; 188
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	90 81       	ld	r25, Z
    10d8:	99 23       	and	r25, r25
    10da:	24 f7       	brge	.-56     	; 0x10a4 <_ZN3i2c10write_byteEh+0x1a>
			return true;
		}
	}
	
	// check the ACK status of the write
	switch (TWSR & STAT_MSK)
    10dc:	80 91 b9 00 	lds	r24, 0x00B9
    10e0:	88 7f       	andi	r24, 0xF8	; 248
    10e2:	88 32       	cpi	r24, 0x28	; 40
    10e4:	31 f0       	breq	.+12     	; 0x10f2 <_ZN3i2c10write_byteEh+0x68>
    10e6:	80 34       	cpi	r24, 0x40	; 64
    10e8:	21 f0       	breq	.+8      	; 0x10f2 <_ZN3i2c10write_byteEh+0x68>
    10ea:	88 31       	cpi	r24, 0x18	; 24
    10ec:	11 f0       	breq	.+4      	; 0x10f2 <_ZN3i2c10write_byteEh+0x68>
			// An ACK was received
			return true;
		
		default:
			// a Nack of Some kind received
			return false;	
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	01 c0       	rjmp	.+2      	; 0x10f4 <_ZN3i2c10write_byteEh+0x6a>
	{
		case (STAT_WRITE_ACK):
		case (STAT_TRANS_ACK):
		case (STAT_READ_ACK):
			// An ACK was received
			return true;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
			// a Nack of Some kind received
			return false;	
	}
	
	return false;
}
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	08 95       	ret

000010fa <_ZN3i2c4pingEh>:
 * 
 * Parameters:	addr - the address to be checked
 * Return:		bool - state of if an ACK was received
 ****************************************************************************/
bool i2c::ping (uint8_t addr)
{
    10fa:	1f 93       	push	r17
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	ec 01       	movw	r28, r24
    1102:	16 2f       	mov	r17, r22
	bool sign_of_life;
	start();
    1104:	0e 94 af 07 	call	0xf5e	; 0xf5e <_ZN3i2c5startEv>
	sign_of_life = write_byte(addr);
    1108:	61 2f       	mov	r22, r17
    110a:	ce 01       	movw	r24, r28
    110c:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN3i2c10write_byteEh>
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::stop (void)
{
	TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    1110:	94 e9       	ldi	r25, 0x94	; 148
    1112:	90 93 bc 00 	sts	0x00BC, r25
	start();
	sign_of_life = write_byte(addr);
	stop();
	
	return sign_of_life;
}
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	1f 91       	pop	r17
    111c:	08 95       	ret

0000111e <_ZN3i2c9read_byteEb>:
 * Parameters:	ack - true if an ack is expected after the byte,
 *					  false if a nack is expected after they byte
 * Return:		uint8_t - the byte of data received, or 0xFF if error occurs
 ****************************************************************************/
uint8_t i2c::read_byte (bool ack)
{
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	ac 01       	movw	r20, r24
	//uint8_t expected_response;
	
	if (ack) // an ack is expected, so we are expecting more data after this
    1124:	66 23       	and	r22, r22
    1126:	21 f0       	breq	.+8      	; 0x1130 <_ZN3i2c9read_byteEb+0x12>
	{
		TWCR = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    1128:	84 ec       	ldi	r24, 0xC4	; 196
    112a:	80 93 bc 00 	sts	0x00BC, r24
    112e:	03 c0       	rjmp	.+6      	; 0x1136 <_ZN3i2c9read_byteEb+0x18>
		//expected_response = STAT_TRANS_ACK; // changed from STAT_REC_ACK
	}
	else
	{
		TWCR = ((1 << TWINT) | (1 << TWEN));
    1130:	84 e8       	ldi	r24, 0x84	; 132
    1132:	80 93 bc 00 	sts	0x00BC, r24
		//expected_response = STAT_REC_NACK;
	}
	
	// wait for TWINT to go low, which signals read complete
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
    1136:	90 91 bc 00 	lds	r25, 0x00BC
    113a:	99 23       	and	r25, r25
    113c:	b4 f4       	brge	.+44     	; 0x116a <_ZN3i2c9read_byteEb+0x4c>
    113e:	1c c0       	rjmp	.+56     	; 0x1178 <_ZN3i2c9read_byteEb+0x5a>
    1140:	21 50       	subi	r18, 0x01	; 1
    1142:	31 09       	sbc	r19, r1
	{
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
    1144:	b1 f4       	brne	.+44     	; 0x1172 <_ZN3i2c9read_byteEb+0x54>
    1146:	ea 01       	movw	r28, r20
		{
			// timeout occurred, error
			DBG(this->p_serial, "i2c::read_byte FAILED - timed out\r\n");
    1148:	84 e2       	ldi	r24, 0x24	; 36
    114a:	ef e5       	ldi	r30, 0x5F	; 95
    114c:	f3 e0       	ldi	r31, 0x03	; 3
    114e:	a7 ec       	ldi	r26, 0xC7	; 199
    1150:	b5 e0       	ldi	r27, 0x05	; 5
    1152:	01 90       	ld	r0, Z+
    1154:	0d 92       	st	X+, r0
    1156:	8a 95       	dec	r24
    1158:	e1 f7       	brne	.-8      	; 0x1152 <_ZN3i2c9read_byteEb+0x34>
    115a:	67 ec       	ldi	r22, 0xC7	; 199
    115c:	75 e0       	ldi	r23, 0x05	; 5
    115e:	88 81       	ld	r24, Y
    1160:	99 81       	ldd	r25, Y+1	; 0x01
    1162:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
			return 0xFF;
    1166:	8f ef       	ldi	r24, 0xFF	; 255
    1168:	09 c0       	rjmp	.+18     	; 0x117c <_ZN3i2c9read_byteEb+0x5e>
		TWCR = ((1 << TWINT) | (1 << TWEN));
		//expected_response = STAT_REC_NACK;
	}
	
	// wait for TWINT to go low, which signals read complete
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
    116a:	21 e0       	ldi	r18, 0x01	; 1
    116c:	34 e0       	ldi	r19, 0x04	; 4
    116e:	ec eb       	ldi	r30, 0xBC	; 188
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	90 81       	ld	r25, Z
    1174:	99 23       	and	r25, r25
    1176:	24 f7       	brge	.-56     	; 0x1140 <_ZN3i2c9read_byteEb+0x22>
			DBG(this->p_serial, "i2c::read_byte FAILED - timed out\r\n");
			return 0xFF;
		}
	}
	// everything ok, return the data, which is stored in TWDR
	return TWDR;
    1178:	80 91 bb 00 	lds	r24, 0x00BB
}
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <_ZN3i2c5writeEhhh>:
 *				reg	 - the register to be written to
 *				data - the data being written
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::write (uint8_t addr, uint8_t reg, uint8_t data)
{
    1182:	ff 92       	push	r15
    1184:	0f 93       	push	r16
    1186:	1f 93       	push	r17
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	ec 01       	movw	r28, r24
    118e:	16 2f       	mov	r17, r22
    1190:	04 2f       	mov	r16, r20
    1192:	f2 2e       	mov	r15, r18
	start();
    1194:	0e 94 af 07 	call	0xf5e	; 0xf5e <_ZN3i2c5startEv>
	if (!write_byte(addr) || !write_byte(reg) || !write_byte(data))
    1198:	61 2f       	mov	r22, r17
    119a:	ce 01       	movw	r24, r28
    119c:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN3i2c10write_byteEh>
    11a0:	88 23       	and	r24, r24
    11a2:	61 f0       	breq	.+24     	; 0x11bc <_ZN3i2c5writeEhhh+0x3a>
    11a4:	60 2f       	mov	r22, r16
    11a6:	ce 01       	movw	r24, r28
    11a8:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN3i2c10write_byteEh>
    11ac:	88 23       	and	r24, r24
    11ae:	31 f0       	breq	.+12     	; 0x11bc <_ZN3i2c5writeEhhh+0x3a>
    11b0:	6f 2d       	mov	r22, r15
    11b2:	ce 01       	movw	r24, r28
    11b4:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN3i2c10write_byteEh>
    11b8:	81 11       	cpse	r24, r1
    11ba:	20 c0       	rjmp	.+64     	; 0x11fc <_ZN3i2c5writeEhhh+0x7a>
	{
		// an error occurred, one of these had a NACK
		DBG(this->p_serial,
    11bc:	1f 92       	push	r1
    11be:	ff 92       	push	r15
    11c0:	1f 92       	push	r1
    11c2:	0f 93       	push	r16
    11c4:	1f 92       	push	r1
    11c6:	1f 93       	push	r17
    11c8:	83 e8       	ldi	r24, 0x83	; 131
    11ca:	93 e0       	ldi	r25, 0x03	; 3
    11cc:	9f 93       	push	r25
    11ce:	8f 93       	push	r24
    11d0:	87 ec       	ldi	r24, 0xC7	; 199
    11d2:	95 e0       	ldi	r25, 0x05	; 5
    11d4:	9f 93       	push	r25
    11d6:	8f 93       	push	r24
    11d8:	0e 94 91 12 	call	0x2522	; 0x2522 <sprintf>
    11dc:	67 ec       	ldi	r22, 0xC7	; 199
    11de:	75 e0       	ldi	r23, 0x05	; 5
    11e0:	88 81       	ld	r24, Y
    11e2:	99 81       	ldd	r25, Y+1	; 0x01
    11e4:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
			"NACK on write <addr:0x%2X, reg:0x%2X, data:0x%2X>\r\n",
			addr, reg, data);
		return true;
    11e8:	8d b7       	in	r24, 0x3d	; 61
    11ea:	9e b7       	in	r25, 0x3e	; 62
    11ec:	0a 96       	adiw	r24, 0x0a	; 10
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	9e bf       	out	0x3e, r25	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	8d bf       	out	0x3d, r24	; 61
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <_ZN3i2c5writeEhhh+0x82>
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::stop (void)
{
	TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    11fc:	84 e9       	ldi	r24, 0x94	; 148
    11fe:	80 93 bc 00 	sts	0x00BC, r24
		return true;
	}
	stop();
	
	// all good, success!
	return false;
    1202:	80 e0       	ldi	r24, 0x00	; 0
}
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	08 95       	ret

00001210 <_ZN3i2c4readEhhPhh>:
 *				p_buff - the buffer to hold the data being read
 *				count  - the total number of bytes to read
 * Return:		bool   - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::read (uint8_t addr, uint8_t reg, uint8_t* p_buff, uint8_t count)
{
    1210:	cf 92       	push	r12
    1212:	df 92       	push	r13
    1214:	ef 92       	push	r14
    1216:	ff 92       	push	r15
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	7c 01       	movw	r14, r24
    1222:	c6 2f       	mov	r28, r22
    1224:	14 2f       	mov	r17, r20
    1226:	69 01       	movw	r12, r18
		start();
    1228:	0e 94 af 07 	call	0xf5e	; 0xf5e <_ZN3i2c5startEv>
		if (!write_byte(addr) || !write_byte(reg))
    122c:	6c 2f       	mov	r22, r28
    122e:	c7 01       	movw	r24, r14
    1230:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN3i2c10write_byteEh>
    1234:	88 23       	and	r24, r24
    1236:	39 f0       	breq	.+14     	; 0x1246 <_ZN3i2c4readEhhPhh+0x36>
    1238:	61 2f       	mov	r22, r17
    123a:	c7 01       	movw	r24, r14
    123c:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN3i2c10write_byteEh>
    1240:	d8 2f       	mov	r29, r24
    1242:	81 11       	cpse	r24, r1
    1244:	1f c0       	rjmp	.+62     	; 0x1284 <_ZN3i2c4readEhhPhh+0x74>
		{
			// an error occurred, one of these had a NACK
			DBG(this->p_serial, "Write NACK on read <addr:0x%2X, reg:0x%2X>\r\n",
    1246:	1f 92       	push	r1
    1248:	1f 93       	push	r17
    124a:	1f 92       	push	r1
    124c:	cf 93       	push	r28
    124e:	87 ef       	ldi	r24, 0xF7	; 247
    1250:	93 e0       	ldi	r25, 0x03	; 3
    1252:	9f 93       	push	r25
    1254:	8f 93       	push	r24
    1256:	87 ec       	ldi	r24, 0xC7	; 199
    1258:	95 e0       	ldi	r25, 0x05	; 5
    125a:	9f 93       	push	r25
    125c:	8f 93       	push	r24
    125e:	0e 94 91 12 	call	0x2522	; 0x2522 <sprintf>
    1262:	67 ec       	ldi	r22, 0xC7	; 199
    1264:	75 e0       	ldi	r23, 0x05	; 5
    1266:	f7 01       	movw	r30, r14
    1268:	80 81       	ld	r24, Z
    126a:	91 81       	ldd	r25, Z+1	; 0x01
    126c:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
				addr, reg);
			return true;
    1270:	8d b7       	in	r24, 0x3d	; 61
    1272:	9e b7       	in	r25, 0x3e	; 62
    1274:	08 96       	adiw	r24, 0x08	; 8
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	9e bf       	out	0x3e, r25	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	8d bf       	out	0x3d, r24	; 61
    1280:	d1 e0       	ldi	r29, 0x01	; 1
    1282:	44 c0       	rjmp	.+136    	; 0x130c <_ZN3i2c4readEhhPhh+0xfc>
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::stop (void)
{
	TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    1284:	84 e9       	ldi	r24, 0x94	; 148
    1286:	80 93 bc 00 	sts	0x00BC, r24
			DBG(this->p_serial, "Write NACK on read <addr:0x%2X, reg:0x%2X>\r\n",
				addr, reg);
			return true;
		}
		stop();
		restart();	// change?
    128a:	c7 01       	movw	r24, r14
    128c:	0e 94 fa 07 	call	0xff4	; 0xff4 <_ZN3i2c7restartEv>
		// read the info
		if (!write_byte(addr | READ_BIT))
    1290:	c1 60       	ori	r28, 0x01	; 1
    1292:	6c 2f       	mov	r22, r28
    1294:	c7 01       	movw	r24, r14
    1296:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN3i2c10write_byteEh>
    129a:	88 23       	and	r24, r24
    129c:	19 f0       	breq	.+6      	; 0x12a4 <_ZN3i2c4readEhhPhh+0x94>
				addr | READ_BIT);
			return 0xFF;
		}
		
		// Read the data
		for (uint8_t ndx = 1; ndx < count; ndx++)
    129e:	02 30       	cpi	r16, 0x02	; 2
    12a0:	d8 f4       	brcc	.+54     	; 0x12d8 <_ZN3i2c4readEhhPhh+0xc8>
    12a2:	2a c0       	rjmp	.+84     	; 0x12f8 <_ZN3i2c4readEhhPhh+0xe8>
		restart();	// change?
		// read the info
		if (!write_byte(addr | READ_BIT))
		{
			// an error occurred, a NACK was received
			DBG(this->p_serial, "NACK on read <addr:0x%2X>\r\n",
    12a4:	1f 92       	push	r1
    12a6:	cf 93       	push	r28
    12a8:	84 e2       	ldi	r24, 0x24	; 36
    12aa:	94 e0       	ldi	r25, 0x04	; 4
    12ac:	9f 93       	push	r25
    12ae:	8f 93       	push	r24
    12b0:	87 ec       	ldi	r24, 0xC7	; 199
    12b2:	95 e0       	ldi	r25, 0x05	; 5
    12b4:	9f 93       	push	r25
    12b6:	8f 93       	push	r24
    12b8:	0e 94 91 12 	call	0x2522	; 0x2522 <sprintf>
    12bc:	67 ec       	ldi	r22, 0xC7	; 199
    12be:	75 e0       	ldi	r23, 0x05	; 5
    12c0:	f7 01       	movw	r30, r14
    12c2:	80 81       	ld	r24, Z
    12c4:	91 81       	ldd	r25, Z+1	; 0x01
    12c6:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
				addr | READ_BIT);
			return 0xFF;
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	1a c0       	rjmp	.+52     	; 0x130c <_ZN3i2c4readEhhPhh+0xfc>
    12d8:	e6 01       	movw	r28, r12
    12da:	02 50       	subi	r16, 0x02	; 2
    12dc:	10 e0       	ldi	r17, 0x00	; 0
    12de:	0f 5f       	subi	r16, 0xFF	; 255
    12e0:	1f 4f       	sbci	r17, 0xFF	; 255
    12e2:	c0 0e       	add	r12, r16
    12e4:	d1 1e       	adc	r13, r17
    12e6:	86 01       	movw	r16, r12
		
		// Read the data
		for (uint8_t ndx = 1; ndx < count; ndx++)
		{
			// still have more to read, so expect an ACK
			*p_buff++ = read_byte(true);
    12e8:	61 e0       	ldi	r22, 0x01	; 1
    12ea:	c7 01       	movw	r24, r14
    12ec:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN3i2c9read_byteEb>
    12f0:	89 93       	st	Y+, r24
				addr | READ_BIT);
			return 0xFF;
		}
		
		// Read the data
		for (uint8_t ndx = 1; ndx < count; ndx++)
    12f2:	c0 17       	cp	r28, r16
    12f4:	d1 07       	cpc	r29, r17
    12f6:	c1 f7       	brne	.-16     	; 0x12e8 <_ZN3i2c4readEhhPhh+0xd8>
		{
			// still have more to read, so expect an ACK
			*p_buff++ = read_byte(true);
		}
		// Read last bit of data, so expect a NACK
		*p_buff++ = read_byte(false);
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	c7 01       	movw	r24, r14
    12fc:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN3i2c9read_byteEb>
    1300:	f6 01       	movw	r30, r12
    1302:	80 83       	st	Z, r24
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::stop (void)
{
	TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    1304:	84 e9       	ldi	r24, 0x94	; 148
    1306:	80 93 bc 00 	sts	0x00BC, r24
		}
		// Read last bit of data, so expect a NACK
		*p_buff++ = read_byte(false);
		stop();
		
		return false;
    130a:	d0 e0       	ldi	r29, 0x00	; 0
    130c:	8d 2f       	mov	r24, r29
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	ff 90       	pop	r15
    1318:	ef 90       	pop	r14
    131a:	df 90       	pop	r13
    131c:	cf 90       	pop	r12
    131e:	08 95       	ret

00001320 <_ZN3LCD11lcd_commandEh>:
 * Description:	This method sends a command to the LCD
 * 
 * Parameters:	data - the command to be executed
 ****************************************************************************/
void LCD::lcd_command(uint8_t data) {
	PORTC &= ~(1 << A0);
    1320:	42 98       	cbi	0x08, 2	; 8
 * Description:	This method writes data to a SPI device.
 * 
 * Parameters:	data - data to write using the SPI protocol
 ****************************************************************************/
inline void LCD::spiwrite(uint8_t data) {
	PORTB &= ~(1 << SS);
    1322:	2a 98       	cbi	0x05, 2	; 5
	SPDR = data;
    1324:	6e bd       	out	0x2e, r22	; 46
	while (!(SPSR & (1<<SPIF)));
    1326:	0d b4       	in	r0, 0x2d	; 45
    1328:	07 fe       	sbrs	r0, 7
    132a:	fd cf       	rjmp	.-6      	; 0x1326 <_ZN3LCD11lcd_commandEh+0x6>
	PORTB |= (1 << SS);
    132c:	2a 9a       	sbi	0x05, 2	; 5
    132e:	08 95       	ret

00001330 <_ZN3LCD8lcd_initEv>:

/*****************************************************************************
 * Method:		lcd_init
 * Description:	This method initializes the LCD for proper functionality
 ****************************************************************************/
void LCD::lcd_init(void){
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	ec 01       	movw	r28, r24
	// toggle RST low to reset; SS low so LCD will listen
	PORTB &= ~(1 << SS);
    1336:	2a 98       	cbi	0x05, 2	; 5
	PORTC &= ~(1 << RST);
    1338:	43 98       	cbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    133a:	2f ef       	ldi	r18, 0xFF	; 255
    133c:	89 e6       	ldi	r24, 0x69	; 105
    133e:	98 e1       	ldi	r25, 0x18	; 24
    1340:	21 50       	subi	r18, 0x01	; 1
    1342:	80 40       	sbci	r24, 0x00	; 0
    1344:	90 40       	sbci	r25, 0x00	; 0
    1346:	e1 f7       	brne	.-8      	; 0x1340 <_ZN3LCD8lcd_initEv+0x10>
    1348:	00 c0       	rjmp	.+0      	; 0x134a <_ZN3LCD8lcd_initEv+0x1a>
    134a:	00 00       	nop
	_delay_ms(500);
	
	PORTC |= (1 << RST);
    134c:	43 9a       	sbi	0x08, 3	; 8
	PORTB |= (1 << SS);
    134e:	2a 9a       	sbi	0x05, 2	; 5

	// ADC select
	lcd_command(CMD_SET_ADC_NORMAL);
    1350:	60 ea       	ldi	r22, 0xA0	; 160
    1352:	ce 01       	movw	r24, r28
    1354:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN3LCD11lcd_commandEh>
	// SHL select
	lcd_command(CMD_SET_COM_NORMAL);
    1358:	60 ec       	ldi	r22, 0xC0	; 192
    135a:	ce 01       	movw	r24, r28
    135c:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN3LCD11lcd_commandEh>
	// LCD bias select
	lcd_command(CMD_SET_BIAS_7);
    1360:	63 ea       	ldi	r22, 0xA3	; 163
    1362:	ce 01       	movw	r24, r28
    1364:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN3LCD11lcd_commandEh>
	// Initial display line
	lcd_command(CMD_SET_DISP_START_LINE);
    1368:	60 e4       	ldi	r22, 0x40	; 64
    136a:	ce 01       	movw	r24, r28
    136c:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN3LCD11lcd_commandEh>

	// turn on voltage converter (VC=1, VR=0, VF=0)
	lcd_command(CMD_SET_POWER_CONTROL | 0x4);
    1370:	6c e2       	ldi	r22, 0x2C	; 44
    1372:	ce 01       	movw	r24, r28
    1374:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN3LCD11lcd_commandEh>
    1378:	2f ef       	ldi	r18, 0xFF	; 255
    137a:	80 e7       	ldi	r24, 0x70	; 112
    137c:	92 e0       	ldi	r25, 0x02	; 2
    137e:	21 50       	subi	r18, 0x01	; 1
    1380:	80 40       	sbci	r24, 0x00	; 0
    1382:	90 40       	sbci	r25, 0x00	; 0
    1384:	e1 f7       	brne	.-8      	; 0x137e <_ZN3LCD8lcd_initEv+0x4e>
    1386:	00 c0       	rjmp	.+0      	; 0x1388 <_ZN3LCD8lcd_initEv+0x58>
    1388:	00 00       	nop
	// wait for 50% rising
	_delay_ms(50);

	// turn on voltage regulator (VC=1, VR=1, VF=0)
	lcd_command(CMD_SET_POWER_CONTROL | 0x6);
    138a:	6e e2       	ldi	r22, 0x2E	; 46
    138c:	ce 01       	movw	r24, r28
    138e:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN3LCD11lcd_commandEh>
    1392:	2f e7       	ldi	r18, 0x7F	; 127
    1394:	89 ea       	ldi	r24, 0xA9	; 169
    1396:	93 e0       	ldi	r25, 0x03	; 3
    1398:	21 50       	subi	r18, 0x01	; 1
    139a:	80 40       	sbci	r24, 0x00	; 0
    139c:	90 40       	sbci	r25, 0x00	; 0
    139e:	e1 f7       	brne	.-8      	; 0x1398 <_ZN3LCD8lcd_initEv+0x68>
    13a0:	00 c0       	rjmp	.+0      	; 0x13a2 <_ZN3LCD8lcd_initEv+0x72>
    13a2:	00 00       	nop
	// wait >=50ms
	_delay_ms(75);

	// turn on voltage follower (VC=1, VR=1, VF=1)
	lcd_command(CMD_SET_POWER_CONTROL | 0x7);
    13a4:	6f e2       	ldi	r22, 0x2F	; 47
    13a6:	ce 01       	movw	r24, r28
    13a8:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN3LCD11lcd_commandEh>
    13ac:	8f e3       	ldi	r24, 0x3F	; 63
    13ae:	9c e9       	ldi	r25, 0x9C	; 156
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <_ZN3LCD8lcd_initEv+0x80>
    13b4:	00 c0       	rjmp	.+0      	; 0x13b6 <_ZN3LCD8lcd_initEv+0x86>
    13b6:	00 00       	nop
	// wait
	_delay_ms(10);

	// set lcd operating voltage (regulator resistor, ref voltage resistor)
	lcd_command(CMD_SET_RESISTOR_RATIO | 0x4);
    13b8:	64 e2       	ldi	r22, 0x24	; 36
    13ba:	ce 01       	movw	r24, r28
    13bc:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN3LCD11lcd_commandEh>
}
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	08 95       	ret

000013c6 <_ZN3LCD18lcd_set_brightnessEh>:
 * Method:		lcd_set_brightness
 * Description:	This method sets the brightness of the LCD
 * 
 * Parameters:	val - the new bightness value of the LCD
 ****************************************************************************/
void LCD::lcd_set_brightness(uint8_t val) {
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	cf 93       	push	r28
    13cc:	8c 01       	movw	r16, r24
    13ce:	c6 2f       	mov	r28, r22
	lcd_command(CMD_SET_VOLUME_FIRST);
    13d0:	61 e8       	ldi	r22, 0x81	; 129
    13d2:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN3LCD11lcd_commandEh>
	lcd_command(CMD_SET_VOLUME_SECOND | (val & 0x3f));
    13d6:	6c 2f       	mov	r22, r28
    13d8:	6f 73       	andi	r22, 0x3F	; 63
    13da:	c8 01       	movw	r24, r16
    13dc:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN3LCD11lcd_commandEh>
}
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	08 95       	ret

000013e8 <_ZN3LCD8lcd_dataEh>:
 * Description:	This method sends data to the LCD
 * 
 * Parameters:	data - the data being sent to the LCD
 ****************************************************************************/
void LCD::lcd_data(uint8_t data) {
	PORTC |= (1 << A0);
    13e8:	42 9a       	sbi	0x08, 2	; 8
 * Description:	This method writes data to a SPI device.
 * 
 * Parameters:	data - data to write using the SPI protocol
 ****************************************************************************/
inline void LCD::spiwrite(uint8_t data) {
	PORTB &= ~(1 << SS);
    13ea:	2a 98       	cbi	0x05, 2	; 5
	SPDR = data;
    13ec:	6e bd       	out	0x2e, r22	; 46
	while (!(SPSR & (1<<SPIF)));
    13ee:	0d b4       	in	r0, 0x2d	; 45
    13f0:	07 fe       	sbrs	r0, 7
    13f2:	fd cf       	rjmp	.-6      	; 0x13ee <_ZN3LCD8lcd_dataEh+0x6>
	PORTB |= (1 << SS);
    13f4:	2a 9a       	sbi	0x05, 2	; 5
    13f6:	08 95       	ret

000013f8 <_ZN3LCD12write_bufferEv>:

/*****************************************************************************
 * Method:		write_buffer
 * Description:	This method writes the buffer to the LCD
 ****************************************************************************/
void LCD::write_buffer(/*uint8_t *buffer*/) {
    13f8:	af 92       	push	r10
    13fa:	bf 92       	push	r11
    13fc:	cf 92       	push	r12
    13fe:	df 92       	push	r13
    1400:	ef 92       	push	r14
    1402:	ff 92       	push	r15
    1404:	0f 93       	push	r16
    1406:	1f 93       	push	r17
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	8c 01       	movw	r16, r24
    140e:	6c 01       	movw	r12, r24
    1410:	ec 01       	movw	r28, r24
    1412:	28 96       	adiw	r28, 0x08	; 8
    1414:	5c 01       	movw	r10, r24
    1416:	88 ef       	ldi	r24, 0xF8	; 248
    1418:	a8 1a       	sub	r10, r24
    141a:	8b ef       	ldi	r24, 0xFB	; 251
    141c:	b8 0a       	sbc	r11, r24
	uint8_t data, page;

	for(page = 0; page < 8; page++) {

		lcd_command(CMD_SET_PAGE | pagemap[page]);
    141e:	f6 01       	movw	r30, r12
    1420:	61 91       	ld	r22, Z+
    1422:	6f 01       	movw	r12, r30
    1424:	60 6b       	ori	r22, 0xB0	; 176
    1426:	c8 01       	movw	r24, r16
    1428:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN3LCD11lcd_commandEh>
		lcd_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	c8 01       	movw	r24, r16
    1430:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN3LCD11lcd_commandEh>
		lcd_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
    1434:	60 e1       	ldi	r22, 0x10	; 16
    1436:	c8 01       	movw	r24, r16
    1438:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN3LCD11lcd_commandEh>
		lcd_command(CMD_RMW);
    143c:	60 ee       	ldi	r22, 0xE0	; 224
    143e:	c8 01       	movw	r24, r16
    1440:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN3LCD11lcd_commandEh>
		lcd_data(0xff);
    1444:	6f ef       	ldi	r22, 0xFF	; 255
    1446:	c8 01       	movw	r24, r16
    1448:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN3LCD8lcd_dataEh>
    144c:	7e 01       	movw	r14, r28
    144e:	f0 e8       	ldi	r31, 0x80	; 128
    1450:	ef 0e       	add	r14, r31
    1452:	f1 1c       	adc	r15, r1
		
		for(data = 0; data < 128; data++) {
			lcd_data(buff[(128*page)+data]);
    1454:	69 91       	ld	r22, Y+
    1456:	c8 01       	movw	r24, r16
    1458:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN3LCD8lcd_dataEh>
		lcd_command(CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
		lcd_command(CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
		lcd_command(CMD_RMW);
		lcd_data(0xff);
		
		for(data = 0; data < 128; data++) {
    145c:	ce 15       	cp	r28, r14
    145e:	df 05       	cpc	r29, r15
    1460:	c9 f7       	brne	.-14     	; 0x1454 <_ZN3LCD12write_bufferEv+0x5c>
    1462:	e7 01       	movw	r28, r14
 * Description:	This method writes the buffer to the LCD
 ****************************************************************************/
void LCD::write_buffer(/*uint8_t *buffer*/) {
	uint8_t data, page;

	for(page = 0; page < 8; page++) {
    1464:	ae 14       	cp	r10, r14
    1466:	bf 04       	cpc	r11, r15
    1468:	d1 f6       	brne	.-76     	; 0x141e <_ZN3LCD12write_bufferEv+0x26>
		
		for(data = 0; data < 128; data++) {
			lcd_data(buff[(128*page)+data]);
		}
	}
}
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	ff 90       	pop	r15
    1474:	ef 90       	pop	r14
    1476:	df 90       	pop	r13
    1478:	cf 90       	pop	r12
    147a:	bf 90       	pop	r11
    147c:	af 90       	pop	r10
    147e:	08 95       	ret

00001480 <_ZN3LCD9setup_lcdEv>:

/*****************************************************************************
 * Method:		setup_lcd
 * Description:	This method sets up the LCD to display output
 ****************************************************************************/
void LCD::setup_lcd(void){
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	ec 01       	movw	r28, r24
	lcd_init();
    1486:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN3LCD8lcd_initEv>

	lcd_command(CMD_DISPLAY_ON);
    148a:	6f ea       	ldi	r22, 0xAF	; 175
    148c:	ce 01       	movw	r24, r28
    148e:	0e 94 90 09 	call	0x1320	; 0x1320 <_ZN3LCD11lcd_commandEh>

	lcd_set_brightness(0x18);
    1492:	68 e1       	ldi	r22, 0x18	; 24
    1494:	ce 01       	movw	r24, r28
    1496:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <_ZN3LCD18lcd_set_brightnessEh>

	write_buffer();
    149a:	ce 01       	movw	r24, r28
    149c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <_ZN3LCD12write_bufferEv>
}
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	08 95       	ret

000014a6 <_ZN3LCD12clear_bufferEv>:
/*****************************************************************************
 * Method:		clear_buffer
 * Description:	This method clears the buffer
 ****************************************************************************/
void LCD::clear_buffer(void) {
  memset(buff, 0, 1024);
    14a6:	08 96       	adiw	r24, 0x08	; 8
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	34 e0       	ldi	r19, 0x04	; 4
    14ac:	fc 01       	movw	r30, r24
    14ae:	a9 01       	movw	r20, r18
    14b0:	11 92       	st	Z+, r1
    14b2:	41 50       	subi	r20, 0x01	; 1
    14b4:	50 40       	sbci	r21, 0x00	; 0
    14b6:	e1 f7       	brne	.-8      	; 0x14b0 <_ZN3LCD12clear_bufferEv+0xa>
    14b8:	08 95       	ret

000014ba <_ZN3LCDC1Ev>:
/*****************************************************************************
 * Method:		LCD
 * Description:	This constructor sets up the LCD and the SPI protocol 
 *				on the ATmega328P			
 ****************************************************************************/
LCD::LCD (void)
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	ec 01       	movw	r28, r24
{

	DDRB |= (1 << MOSI) | (1 << SCK) | (1 << SS);
    14c0:	94 b1       	in	r25, 0x04	; 4
    14c2:	9c 62       	ori	r25, 0x2C	; 44
    14c4:	94 b9       	out	0x04, r25	; 4
	DDRC |= (1 << A0) | (1 << RST);
    14c6:	97 b1       	in	r25, 0x07	; 7
    14c8:	9c 60       	ori	r25, 0x0C	; 12
    14ca:	97 b9       	out	0x07, r25	; 7

	clear_buffer();
    14cc:	ce 01       	movw	r24, r28
    14ce:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <_ZN3LCD12clear_bufferEv>
 * Method:		spi_init
 * Description:	This method initializes the SPI Protocol using the appropriate
 *				registers
 ****************************************************************************/
void LCD::spi_init(void){
	SPCR = (1 << SPE) | (1 << MSTR);
    14d2:	80 e5       	ldi	r24, 0x50	; 80
    14d4:	8c bd       	out	0x2c, r24	; 44
	PORTB = (1 << SS);						// make sure SS is high
    14d6:	84 e0       	ldi	r24, 0x04	; 4
    14d8:	85 b9       	out	0x05, r24	; 5
	DDRC |= (1 << A0) | (1 << RST);

	clear_buffer();

	spi_init();
	setup_lcd();
    14da:	ce 01       	movw	r24, r28
    14dc:	0e 94 40 0a 	call	0x1480	; 0x1480 <_ZN3LCD9setup_lcdEv>

	EICRA = 0x03;
    14e0:	83 e0       	ldi	r24, 0x03	; 3
    14e2:	80 93 69 00 	sts	0x0069, r24
	EIMSK = 0x01;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	8d bb       	out	0x1d, r24	; 29
	EIFR = 0x01;
    14ea:	8c bb       	out	0x1c, r24	; 28
}
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	08 95       	ret

000014f2 <main>:
uint8_t windy;
int16_t uv_ndx;


int main(void)
{
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	cb 56       	subi	r28, 0x6B	; 107
    14fc:	d4 40       	sbci	r29, 0x04	; 4
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
	/* create serial object */
	serial ser_dev = serial(9600, 16000000);
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	34 e2       	ldi	r19, 0x24	; 36
    150c:	44 ef       	ldi	r20, 0xF4	; 244
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	60 e8       	ldi	r22, 0x80	; 128
    1512:	75 e2       	ldi	r23, 0x25	; 37
    1514:	ce 01       	movw	r24, r28
    1516:	82 5b       	subi	r24, 0xB2	; 178
    1518:	9b 4f       	sbci	r25, 0xFB	; 251
    151a:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_ZN6serialC1Ejm>
	
	DBG(&ser_dev, "Creating and initializing all sensors...\r\n");
    151e:	8b e2       	ldi	r24, 0x2B	; 43
    1520:	e0 e4       	ldi	r30, 0x40	; 64
    1522:	f4 e0       	ldi	r31, 0x04	; 4
    1524:	a7 ec       	ldi	r26, 0xC7	; 199
    1526:	b5 e0       	ldi	r27, 0x05	; 5
    1528:	01 90       	ld	r0, Z+
    152a:	0d 92       	st	X+, r0
    152c:	8a 95       	dec	r24
    152e:	e1 f7       	brne	.-8      	; 0x1528 <main+0x36>
    1530:	67 ec       	ldi	r22, 0xC7	; 199
    1532:	75 e0       	ldi	r23, 0x05	; 5
    1534:	ce 01       	movw	r24, r28
    1536:	82 5b       	subi	r24, 0xB2	; 178
    1538:	9b 4f       	sbci	r25, 0xFB	; 251
    153a:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
	
	// create a i2c object 
	i2c my_i2c = i2c(&ser_dev);
    153e:	be 01       	movw	r22, r28
    1540:	62 5b       	subi	r22, 0xB2	; 178
    1542:	7b 4f       	sbci	r23, 0xFB	; 251
    1544:	ce 01       	movw	r24, r28
    1546:	86 59       	subi	r24, 0x96	; 150
    1548:	9b 4f       	sbci	r25, 0xFB	; 251
    154a:	0e 94 93 07 	call	0xf26	; 0xf26 <_ZN3i2cC1EP6serial>
	
	// create a BME280 object
	BME280 my_BME280 = BME280(&my_i2c, &ser_dev, 278);
    154e:	06 e1       	ldi	r16, 0x16	; 22
    1550:	11 e0       	ldi	r17, 0x01	; 1
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	ae 01       	movw	r20, r28
    1558:	42 5b       	subi	r20, 0xB2	; 178
    155a:	5b 4f       	sbci	r21, 0xFB	; 251
    155c:	be 01       	movw	r22, r28
    155e:	66 59       	subi	r22, 0x96	; 150
    1560:	7b 4f       	sbci	r23, 0xFB	; 251
    1562:	ce 01       	movw	r24, r28
    1564:	87 5f       	subi	r24, 0xF7	; 247
    1566:	9b 4f       	sbci	r25, 0xFB	; 251
    1568:	0e 94 2e 06 	call	0xc5c	; 0xc5c <_ZN6BME280C1EP3i2cP6seriall>
	
	// create a water temperature sensor - surface
	oneWire my_oneWire_surface_temp = oneWire(&ser_dev, 3, ID_SURFACE_TEMP);
    156c:	22 e0       	ldi	r18, 0x02	; 2
    156e:	43 e0       	ldi	r20, 0x03	; 3
    1570:	be 01       	movw	r22, r28
    1572:	62 5b       	subi	r22, 0xB2	; 178
    1574:	7b 4f       	sbci	r23, 0xFB	; 251
    1576:	ce 01       	movw	r24, r28
    1578:	80 5a       	subi	r24, 0xA0	; 160
    157a:	9b 4f       	sbci	r25, 0xFB	; 251
    157c:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN7oneWireC1EP6serialhh>
	
	// create a water temperature sensor - surface
	oneWire my_oneWire_underwater_temp = oneWire(&ser_dev, 3, ID_UNDERWATER_TEMP);
    1580:	23 e0       	ldi	r18, 0x03	; 3
    1582:	43 e0       	ldi	r20, 0x03	; 3
    1584:	be 01       	movw	r22, r28
    1586:	62 5b       	subi	r22, 0xB2	; 178
    1588:	7b 4f       	sbci	r23, 0xFB	; 251
    158a:	ce 01       	movw	r24, r28
    158c:	84 5a       	subi	r24, 0xA4	; 164
    158e:	9b 4f       	sbci	r25, 0xFB	; 251
    1590:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN7oneWireC1EP6serialhh>
	
	// create a tilt-ball object
	TiltBall my_TiltBall = TiltBall(&ser_dev, 0);
    1594:	40 e0       	ldi	r20, 0x00	; 0
    1596:	be 01       	movw	r22, r28
    1598:	62 5b       	subi	r22, 0xB2	; 178
    159a:	7b 4f       	sbci	r23, 0xFB	; 251
    159c:	ce 01       	movw	r24, r28
    159e:	89 59       	subi	r24, 0x99	; 153
    15a0:	9b 4f       	sbci	r25, 0xFB	; 251
    15a2:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <_ZN8TiltBallC1EP6serialh>
	
	// create a UVIndex sensor
	UVIndex my_UVIndex = UVIndex(&ser_dev, 7);
    15a6:	47 e0       	ldi	r20, 0x07	; 7
    15a8:	be 01       	movw	r22, r28
    15aa:	62 5b       	subi	r22, 0xB2	; 178
    15ac:	7b 4f       	sbci	r23, 0xFB	; 251
    15ae:	ce 01       	movw	r24, r28
    15b0:	8c 59       	subi	r24, 0x9C	; 156
    15b2:	9b 4f       	sbci	r25, 0xFB	; 251
    15b4:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN7UVIndexC1EP6serialh>
	
	// create a PIR sensor for lane 1
	PIR my_pir_ln1 = PIR(&ser_dev, LN_1_PIN);
    15b8:	47 e0       	ldi	r20, 0x07	; 7
    15ba:	be 01       	movw	r22, r28
    15bc:	62 5b       	subi	r22, 0xB2	; 178
    15be:	7b 4f       	sbci	r23, 0xFB	; 251
    15c0:	ce 01       	movw	r24, r28
    15c2:	88 5a       	subi	r24, 0xA8	; 168
    15c4:	9b 4f       	sbci	r25, 0xFB	; 251
    15c6:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <_ZN3PIRC1EP6serialh>
	
	// create a PIR sensor for lane 2
	PIR my_pir_ln2 = PIR(&ser_dev, LN_2_PIN);
    15ca:	44 e0       	ldi	r20, 0x04	; 4
    15cc:	be 01       	movw	r22, r28
    15ce:	62 5b       	subi	r22, 0xB2	; 178
    15d0:	7b 4f       	sbci	r23, 0xFB	; 251
    15d2:	ce 01       	movw	r24, r28
    15d4:	8c 5a       	subi	r24, 0xAC	; 172
    15d6:	9b 4f       	sbci	r25, 0xFB	; 251
    15d8:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <_ZN3PIRC1EP6serialh>
	
	// create LCD object
	LCD my_lcd = LCD();
    15dc:	ce 01       	movw	r24, r28
    15de:	01 96       	adiw	r24, 0x01	; 1
    15e0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_ZN3LCDC1Ev>
	
	DBG(&ser_dev, "All Sensors created!\r\n");
    15e4:	87 e1       	ldi	r24, 0x17	; 23
    15e6:	eb e6       	ldi	r30, 0x6B	; 107
    15e8:	f4 e0       	ldi	r31, 0x04	; 4
    15ea:	a7 ec       	ldi	r26, 0xC7	; 199
    15ec:	b5 e0       	ldi	r27, 0x05	; 5
    15ee:	01 90       	ld	r0, Z+
    15f0:	0d 92       	st	X+, r0
    15f2:	8a 95       	dec	r24
    15f4:	e1 f7       	brne	.-8      	; 0x15ee <main+0xfc>
    15f6:	67 ec       	ldi	r22, 0xC7	; 199
    15f8:	75 e0       	ldi	r23, 0x05	; 5
    15fa:	ce 01       	movw	r24, r28
    15fc:	82 5b       	subi	r24, 0xB2	; 178
    15fe:	9b 4f       	sbci	r25, 0xFB	; 251
    1600:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
	
    while (1) 
    {
		
		my_BME280.BME280Task();
    1604:	ce 01       	movw	r24, r28
    1606:	87 5f       	subi	r24, 0xF7	; 247
    1608:	9b 4f       	sbci	r25, 0xFB	; 251
    160a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_ZN6BME28010BME280TaskEv>
		
		my_oneWire_surface_temp.oneWireTask();
    160e:	ce 01       	movw	r24, r28
    1610:	80 5a       	subi	r24, 0xA0	; 160
    1612:	9b 4f       	sbci	r25, 0xFB	; 251
    1614:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <_ZN7oneWire11oneWireTaskEv>
		
		my_oneWire_underwater_temp.oneWireTask();
    1618:	ce 01       	movw	r24, r28
    161a:	84 5a       	subi	r24, 0xA4	; 164
    161c:	9b 4f       	sbci	r25, 0xFB	; 251
    161e:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <_ZN7oneWire11oneWireTaskEv>
		
		my_TiltBall.TiltBallTask();
    1622:	ce 01       	movw	r24, r28
    1624:	89 59       	subi	r24, 0x99	; 153
    1626:	9b 4f       	sbci	r25, 0xFB	; 251
    1628:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <_ZN8TiltBall12TiltBallTaskEv>
				
		my_UVIndex.UVIndexTask();
    162c:	ce 01       	movw	r24, r28
    162e:	8c 59       	subi	r24, 0x9C	; 156
    1630:	9b 4f       	sbci	r25, 0xFB	; 251
    1632:	0e 94 2d 10 	call	0x205a	; 0x205a <_ZN7UVIndex11UVIndexTaskEv>
		
		my_pir_ln1.PIRTask();
    1636:	ce 01       	movw	r24, r28
    1638:	88 5a       	subi	r24, 0xA8	; 168
    163a:	9b 4f       	sbci	r25, 0xFB	; 251
    163c:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_ZN3PIR7PIRTaskEv>
		
		my_pir_ln2.PIRTask();
    1640:	ce 01       	movw	r24, r28
    1642:	8c 5a       	subi	r24, 0xAC	; 172
    1644:	9b 4f       	sbci	r25, 0xFB	; 251
    1646:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_ZN3PIR7PIRTaskEv>
    164a:	2f ef       	ldi	r18, 0xFF	; 255
    164c:	83 ed       	ldi	r24, 0xD3	; 211
    164e:	90 e3       	ldi	r25, 0x30	; 48
    1650:	21 50       	subi	r18, 0x01	; 1
    1652:	80 40       	sbci	r24, 0x00	; 0
    1654:	90 40       	sbci	r25, 0x00	; 0
    1656:	e1 f7       	brne	.-8      	; 0x1650 <main+0x15e>
    1658:	00 c0       	rjmp	.+0      	; 0x165a <main+0x168>
    165a:	00 00       	nop
    165c:	d3 cf       	rjmp	.-90     	; 0x1604 <main+0x112>

0000165e <_ZN7oneWireC1EP6serialhh>:
 * 
 * Parameters:	ptr_serial 	- a reference to the serial debug object
 *				pin 		- the pin on the ATmega328P the sensor outputs to.
 *				id 			- the unique id of the sensor
 ****************************************************************************/
oneWire::oneWire(serial *ptr_serial, uint8_t pin, uint8_t id)
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	ec 01       	movw	r28, r24
{
	p_serial = ptr_serial;	// store local copy for debug
    1664:	79 83       	std	Y+1, r23	; 0x01
    1666:	68 83       	st	Y, r22
	data_line = pin;		// store local copy
    1668:	4a 83       	std	Y+2, r20	; 0x02
	dev_id = id;			// store local copy
    166a:	2b 83       	std	Y+3, r18	; 0x03
	
	// make the data an input
	INPUT(DATA_DDR, data_line);
    166c:	2a b1       	in	r18, 0x0a	; 10
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <_ZN7oneWireC1EP6serialhh+0x1a>
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	4a 95       	dec	r20
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <_ZN7oneWireC1EP6serialhh+0x16>
    167c:	80 95       	com	r24
    167e:	82 23       	and	r24, r18
    1680:	8a b9       	out	0x0a, r24	; 10

	DBG(this->p_serial, "oneWire Constructor ok! Device id: %d\r\n", dev_id);
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	1f 92       	push	r1
    1686:	8f 93       	push	r24
    1688:	82 e8       	ldi	r24, 0x82	; 130
    168a:	94 e0       	ldi	r25, 0x04	; 4
    168c:	9f 93       	push	r25
    168e:	8f 93       	push	r24
    1690:	87 ec       	ldi	r24, 0xC7	; 199
    1692:	95 e0       	ldi	r25, 0x05	; 5
    1694:	9f 93       	push	r25
    1696:	8f 93       	push	r24
    1698:	0e 94 91 12 	call	0x2522	; 0x2522 <sprintf>
    169c:	67 ec       	ldi	r22, 0xC7	; 199
    169e:	75 e0       	ldi	r23, 0x05	; 5
    16a0:	88 81       	ld	r24, Y
    16a2:	99 81       	ldd	r25, Y+1	; 0x01
    16a4:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
}
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	08 95       	ret

000016ba <_ZN7oneWire5resetEv>:
 * Description:	This method resets the oneWire device.
 *
 * Return:		bool - if the device is ready.
 ****************************************************************************/
bool oneWire::reset (void)
{
    16ba:	fc 01       	movw	r30, r24
	bool presence_pulse;
	uint8_t retries = 125;
	
	// make pin an input
	INPUT(DATA_DDR, data_line);
    16bc:	2a b1       	in	r18, 0x0a	; 10
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 80       	ldd	r0, Z+2	; 0x02
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <_ZN7oneWire5resetEv+0x10>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	0a 94       	dec	r0
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <_ZN7oneWire5resetEv+0xc>
    16ce:	80 95       	com	r24
    16d0:	82 23       	and	r24, r18
    16d2:	8a b9       	out	0x0a, r24	; 10
    16d4:	4c e7       	ldi	r20, 0x7C	; 124
    16d6:	03 c0       	rjmp	.+6      	; 0x16de <_ZN7oneWire5resetEv+0x24>
    16d8:	41 50       	subi	r20, 0x01	; 1
	
	// wait for wire to go high
	do 
	{
		if (--retries == 0)
    16da:	09 f4       	brne	.+2      	; 0x16de <_ZN7oneWire5resetEv+0x24>
    16dc:	4e c0       	rjmp	.+156    	; 0x177a <_ZN7oneWire5resetEv+0xc0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16de:	2a e0       	ldi	r18, 0x0A	; 10
    16e0:	2a 95       	dec	r18
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <_ZN7oneWire5resetEv+0x26>
    16e4:	00 c0       	rjmp	.+0      	; 0x16e6 <_ZN7oneWire5resetEv+0x2c>
		{
			return false;
		}
		_delay_us(2);
	} while (!(DATA_PIN & (1 << data_line)));
    16e6:	29 b1       	in	r18, 0x09	; 9
    16e8:	92 81       	ldd	r25, Z+2	; 0x02
    16ea:	69 2f       	mov	r22, r25
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <_ZN7oneWire5resetEv+0x3a>
    16f0:	35 95       	asr	r19
    16f2:	27 95       	ror	r18
    16f4:	9a 95       	dec	r25
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <_ZN7oneWire5resetEv+0x36>
	
	// make pin an input
	INPUT(DATA_DDR, data_line);
	
	// wait for wire to go high
	do 
    16f8:	20 ff       	sbrs	r18, 0
    16fa:	ee cf       	rjmp	.-36     	; 0x16d8 <_ZN7oneWire5resetEv+0x1e>
		}
		_delay_us(2);
	} while (!(DATA_PIN & (1 << data_line)));
	
	// set data_line low
	DATA_PORT &= ~(1 << data_line);
    16fc:	3b b1       	in	r19, 0x0b	; 11
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	ac 01       	movw	r20, r24
    1704:	02 c0       	rjmp	.+4      	; 0x170a <_ZN7oneWire5resetEv+0x50>
    1706:	44 0f       	add	r20, r20
    1708:	55 1f       	adc	r21, r21
    170a:	6a 95       	dec	r22
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <_ZN7oneWire5resetEv+0x4c>
    170e:	24 2f       	mov	r18, r20
    1710:	20 95       	com	r18
    1712:	23 23       	and	r18, r19
    1714:	2b b9       	out	0x0b, r18	; 11
	
	// set data_line as output
	OUTPUT(DATA_DDR, data_line);
    1716:	4a b1       	in	r20, 0x0a	; 10
    1718:	9c 01       	movw	r18, r24
    171a:	02 80       	ldd	r0, Z+2	; 0x02
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <_ZN7oneWire5resetEv+0x68>
    171e:	22 0f       	add	r18, r18
    1720:	33 1f       	adc	r19, r19
    1722:	0a 94       	dec	r0
    1724:	e2 f7       	brpl	.-8      	; 0x171e <_ZN7oneWire5resetEv+0x64>
    1726:	24 2b       	or	r18, r20
    1728:	2a b9       	out	0x0a, r18	; 10
    172a:	af e7       	ldi	r26, 0x7F	; 127
    172c:	b7 e0       	ldi	r27, 0x07	; 7
    172e:	11 97       	sbiw	r26, 0x01	; 1
    1730:	f1 f7       	brne	.-4      	; 0x172e <_ZN7oneWire5resetEv+0x74>
    1732:	00 c0       	rjmp	.+0      	; 0x1734 <_ZN7oneWire5resetEv+0x7a>
    1734:	00 00       	nop
	
	_delay_us(480);
		
	// set data_line as input
	INPUT(DATA_DDR, data_line);
    1736:	2a b1       	in	r18, 0x0a	; 10
    1738:	02 80       	ldd	r0, Z+2	; 0x02
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <_ZN7oneWire5resetEv+0x86>
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	0a 94       	dec	r0
    1742:	e2 f7       	brpl	.-8      	; 0x173c <_ZN7oneWire5resetEv+0x82>
    1744:	80 95       	com	r24
    1746:	82 23       	and	r24, r18
    1748:	8a b9       	out	0x0a, r24	; 10
    174a:	87 e1       	ldi	r24, 0x17	; 23
    174c:	91 e0       	ldi	r25, 0x01	; 1
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	f1 f7       	brne	.-4      	; 0x174e <_ZN7oneWire5resetEv+0x94>
    1752:	00 c0       	rjmp	.+0      	; 0x1754 <_ZN7oneWire5resetEv+0x9a>
    1754:	00 00       	nop
	
	_delay_us(70);
	
	presence_pulse = (bool)!((DATA_PIN & (1 << data_line)));
    1756:	89 b1       	in	r24, 0x09	; 9
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 80       	ldd	r0, Z+2	; 0x02
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <_ZN7oneWire5resetEv+0xa8>
    175e:	95 95       	asr	r25
    1760:	87 95       	ror	r24
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <_ZN7oneWire5resetEv+0xa4>
    1766:	a1 e0       	ldi	r26, 0x01	; 1
    1768:	8a 27       	eor	r24, r26
    176a:	81 70       	andi	r24, 0x01	; 1
    176c:	e7 e6       	ldi	r30, 0x67	; 103
    176e:	f6 e0       	ldi	r31, 0x06	; 6
    1770:	31 97       	sbiw	r30, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <_ZN7oneWire5resetEv+0xb6>
    1774:	00 c0       	rjmp	.+0      	; 0x1776 <_ZN7oneWire5resetEv+0xbc>
    1776:	00 00       	nop
	
	_delay_us(410);
	
	return presence_pulse;
    1778:	08 95       	ret
	// wait for wire to go high
	do 
	{
		if (--retries == 0)
		{
			return false;
    177a:	80 e0       	ldi	r24, 0x00	; 0
	presence_pulse = (bool)!((DATA_PIN & (1 << data_line)));
	
	_delay_us(410);
	
	return presence_pulse;
}
    177c:	08 95       	ret

0000177e <_ZN7oneWire7write_1Ev>:
/*****************************************************************************
 * Method:		write_1
 * Description:	This method writes a logial high to the oneWire device.
 ****************************************************************************/
void oneWire::write_1 (void)
{
    177e:	fc 01       	movw	r30, r24
	// set data_line low
	DATA_PORT &= ~(1 << data_line);
    1780:	9b b1       	in	r25, 0x0b	; 11
    1782:	21 e0       	ldi	r18, 0x01	; 1
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	a9 01       	movw	r20, r18
    1788:	02 80       	ldd	r0, Z+2	; 0x02
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <_ZN7oneWire7write_1Ev+0x12>
    178c:	44 0f       	add	r20, r20
    178e:	55 1f       	adc	r21, r21
    1790:	0a 94       	dec	r0
    1792:	e2 f7       	brpl	.-8      	; 0x178c <_ZN7oneWire7write_1Ev+0xe>
    1794:	84 2f       	mov	r24, r20
    1796:	80 95       	com	r24
    1798:	89 23       	and	r24, r25
    179a:	8b b9       	out	0x0b, r24	; 11
	
	// make data_line an output
	OUTPUT(DATA_DDR, data_line);
    179c:	4a b1       	in	r20, 0x0a	; 10
    179e:	c9 01       	movw	r24, r18
    17a0:	02 80       	ldd	r0, Z+2	; 0x02
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <_ZN7oneWire7write_1Ev+0x2a>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <_ZN7oneWire7write_1Ev+0x26>
    17ac:	84 2b       	or	r24, r20
    17ae:	8a b9       	out	0x0a, r24	; 10
    17b0:	85 e3       	ldi	r24, 0x35	; 53
    17b2:	8a 95       	dec	r24
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <_ZN7oneWire7write_1Ev+0x34>
    17b6:	00 00       	nop
	
	_delay_us(10);
	
	// make data_line an input
	INPUT(DATA_DDR, data_line);
    17b8:	9a b1       	in	r25, 0x0a	; 10
    17ba:	02 80       	ldd	r0, Z+2	; 0x02
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <_ZN7oneWire7write_1Ev+0x44>
    17be:	22 0f       	add	r18, r18
    17c0:	33 1f       	adc	r19, r19
    17c2:	0a 94       	dec	r0
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <_ZN7oneWire7write_1Ev+0x40>
    17c6:	20 95       	com	r18
    17c8:	29 23       	and	r18, r25
    17ca:	2a b9       	out	0x0a, r18	; 10
    17cc:	8b ed       	ldi	r24, 0xDB	; 219
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	f1 f7       	brne	.-4      	; 0x17d0 <_ZN7oneWire7write_1Ev+0x52>
    17d4:	00 c0       	rjmp	.+0      	; 0x17d6 <_ZN7oneWire7write_1Ev+0x58>
    17d6:	00 00       	nop
    17d8:	08 95       	ret

000017da <_ZN7oneWire7write_0Ev>:
/*****************************************************************************
 * Method:		write_0
 * Description:	This method writes a logial low to the oneWire device.
 ****************************************************************************/
void oneWire::write_0 (void)
{
    17da:	fc 01       	movw	r30, r24
	// set data_line low
	DATA_PORT &= ~(1 << data_line);
    17dc:	9b b1       	in	r25, 0x0b	; 11
    17de:	21 e0       	ldi	r18, 0x01	; 1
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	a9 01       	movw	r20, r18
    17e4:	02 80       	ldd	r0, Z+2	; 0x02
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <_ZN7oneWire7write_0Ev+0x12>
    17e8:	44 0f       	add	r20, r20
    17ea:	55 1f       	adc	r21, r21
    17ec:	0a 94       	dec	r0
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <_ZN7oneWire7write_0Ev+0xe>
    17f0:	84 2f       	mov	r24, r20
    17f2:	80 95       	com	r24
    17f4:	89 23       	and	r24, r25
    17f6:	8b b9       	out	0x0b, r24	; 11
	
	// make data_line an output
	OUTPUT(DATA_DDR, data_line);
    17f8:	4a b1       	in	r20, 0x0a	; 10
    17fa:	c9 01       	movw	r24, r18
    17fc:	02 80       	ldd	r0, Z+2	; 0x02
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <_ZN7oneWire7write_0Ev+0x2a>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <_ZN7oneWire7write_0Ev+0x26>
    1808:	84 2b       	or	r24, r20
    180a:	8a b9       	out	0x0a, r24	; 10
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	91 e0       	ldi	r25, 0x01	; 1
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	f1 f7       	brne	.-4      	; 0x1810 <_ZN7oneWire7write_0Ev+0x36>
    1814:	00 c0       	rjmp	.+0      	; 0x1816 <_ZN7oneWire7write_0Ev+0x3c>
    1816:	00 00       	nop
	
	_delay_us(65);
	
	// make data_line an input
	INPUT(DATA_DDR, data_line);
    1818:	9a b1       	in	r25, 0x0a	; 10
    181a:	02 80       	ldd	r0, Z+2	; 0x02
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <_ZN7oneWire7write_0Ev+0x48>
    181e:	22 0f       	add	r18, r18
    1820:	33 1f       	adc	r19, r19
    1822:	0a 94       	dec	r0
    1824:	e2 f7       	brpl	.-8      	; 0x181e <_ZN7oneWire7write_0Ev+0x44>
    1826:	20 95       	com	r18
    1828:	29 23       	and	r18, r25
    182a:	2a b9       	out	0x0a, r18	; 10
    182c:	9a e1       	ldi	r25, 0x1A	; 26
    182e:	9a 95       	dec	r25
    1830:	f1 f7       	brne	.-4      	; 0x182e <_ZN7oneWire7write_0Ev+0x54>
    1832:	00 c0       	rjmp	.+0      	; 0x1834 <_ZN7oneWire7write_0Ev+0x5a>
    1834:	08 95       	ret

00001836 <_ZN7oneWire10write_byteEh>:
 * Description:	This method writes one byte to the oneWire device.
 *
 * Parameters:	data - the data to write to the device
 ****************************************************************************/
void oneWire::write_byte (uint8_t data)
{
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	8c 01       	movw	r16, r24
    1840:	d6 2f       	mov	r29, r22
    1842:	c8 e0       	ldi	r28, 0x08	; 8
	for (uint8_t i = 0; i < 8; i++)
	{
		if (data & 0x01)
    1844:	d0 ff       	sbrs	r29, 0
    1846:	04 c0       	rjmp	.+8      	; 0x1850 <_ZN7oneWire10write_byteEh+0x1a>
		{
			write_1();
    1848:	c8 01       	movw	r24, r16
    184a:	0e 94 bf 0b 	call	0x177e	; 0x177e <_ZN7oneWire7write_1Ev>
    184e:	03 c0       	rjmp	.+6      	; 0x1856 <_ZN7oneWire10write_byteEh+0x20>
		}
		else
		{
			write_0();
    1850:	c8 01       	movw	r24, r16
    1852:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZN7oneWire7write_0Ev>
		}
		data >>= 1;
    1856:	d6 95       	lsr	r29
    1858:	c1 50       	subi	r28, 0x01	; 1
 *
 * Parameters:	data - the data to write to the device
 ****************************************************************************/
void oneWire::write_byte (uint8_t data)
{
	for (uint8_t i = 0; i < 8; i++)
    185a:	a1 f7       	brne	.-24     	; 0x1844 <_ZN7oneWire10write_byteEh+0xe>
		{
			write_0();
		}
		data >>= 1;
	}
}
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	08 95       	ret

00001866 <_ZN7oneWire9read_byteEv>:
/*****************************************************************************
 * Method:		read_byte
 * Description:	This method reads one byte from the oneWire device.
 ****************************************************************************/
uint8_t oneWire::read_byte (void)
{
    1866:	1f 93       	push	r17
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	fc 01       	movw	r30, r24
    186e:	a8 e0       	ldi	r26, 0x08	; 8
    1870:	b0 e0       	ldi	r27, 0x00	; 0
	uint8_t data_in;
	uint8_t data_read = 0;
	
	for (uint8_t bit_msk = 0x01; bit_msk; bit_msk <<= 1)
    1872:	11 e0       	ldi	r17, 0x01	; 1
 * Description:	This method reads one byte from the oneWire device.
 ****************************************************************************/
uint8_t oneWire::read_byte (void)
{
	uint8_t data_in;
	uint8_t data_read = 0;
    1874:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint8_t bit_msk = 0x01; bit_msk; bit_msk <<= 1)
	{
		// make data_line low
		DATA_PORT &= ~(1 << data_line);
    1876:	21 e0       	ldi	r18, 0x01	; 1
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	4b b1       	in	r20, 0x0b	; 11
    187c:	b9 01       	movw	r22, r18
    187e:	02 80       	ldd	r0, Z+2	; 0x02
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <_ZN7oneWire9read_byteEv+0x20>
    1882:	66 0f       	add	r22, r22
    1884:	77 1f       	adc	r23, r23
    1886:	0a 94       	dec	r0
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <_ZN7oneWire9read_byteEv+0x1c>
    188a:	96 2f       	mov	r25, r22
    188c:	90 95       	com	r25
    188e:	94 23       	and	r25, r20
    1890:	9b b9       	out	0x0b, r25	; 11
		// make data_line output
		OUTPUT(DATA_DDR, data_line);
    1892:	9a b1       	in	r25, 0x0a	; 10
    1894:	a9 01       	movw	r20, r18
    1896:	02 80       	ldd	r0, Z+2	; 0x02
    1898:	02 c0       	rjmp	.+4      	; 0x189e <_ZN7oneWire9read_byteEv+0x38>
    189a:	44 0f       	add	r20, r20
    189c:	55 1f       	adc	r21, r21
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <_ZN7oneWire9read_byteEv+0x34>
    18a2:	49 2b       	or	r20, r25
    18a4:	4a b9       	out	0x0a, r20	; 10
    18a6:	90 e1       	ldi	r25, 0x10	; 16
    18a8:	9a 95       	dec	r25
    18aa:	f1 f7       	brne	.-4      	; 0x18a8 <_ZN7oneWire9read_byteEv+0x42>
		
		_delay_us(3);
		// make data_line input
		INPUT(DATA_DDR, data_line);
    18ac:	4a b1       	in	r20, 0x0a	; 10
    18ae:	b9 01       	movw	r22, r18
    18b0:	02 80       	ldd	r0, Z+2	; 0x02
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <_ZN7oneWire9read_byteEv+0x52>
    18b4:	66 0f       	add	r22, r22
    18b6:	77 1f       	adc	r23, r23
    18b8:	0a 94       	dec	r0
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <_ZN7oneWire9read_byteEv+0x4e>
    18bc:	96 2f       	mov	r25, r22
    18be:	90 95       	com	r25
    18c0:	94 23       	and	r25, r20
    18c2:	9a b9       	out	0x0a, r25	; 10
    18c4:	c5 e3       	ldi	r28, 0x35	; 53
    18c6:	ca 95       	dec	r28
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <_ZN7oneWire9read_byteEv+0x60>
    18ca:	00 00       	nop
		_delay_us(10);
		
		data_in = DATA_PIN & (1 << data_line);
    18cc:	99 b1       	in	r25, 0x09	; 9
    18ce:	a9 01       	movw	r20, r18
    18d0:	02 80       	ldd	r0, Z+2	; 0x02
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <_ZN7oneWire9read_byteEv+0x72>
    18d4:	44 0f       	add	r20, r20
    18d6:	55 1f       	adc	r21, r21
    18d8:	0a 94       	dec	r0
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <_ZN7oneWire9read_byteEv+0x6e>
    18dc:	49 23       	and	r20, r25
    18de:	c3 ed       	ldi	r28, 0xD3	; 211
    18e0:	d0 e0       	ldi	r29, 0x00	; 0
    18e2:	21 97       	sbiw	r28, 0x01	; 1
    18e4:	f1 f7       	brne	.-4      	; 0x18e2 <_ZN7oneWire9read_byteEv+0x7c>
    18e6:	00 c0       	rjmp	.+0      	; 0x18e8 <_ZN7oneWire9read_byteEv+0x82>
    18e8:	00 00       	nop
		_delay_us(53);
		
		if (data_in)
    18ea:	41 11       	cpse	r20, r1
		{
			data_read |= bit_msk;
    18ec:	81 2b       	or	r24, r17
uint8_t oneWire::read_byte (void)
{
	uint8_t data_in;
	uint8_t data_read = 0;
	
	for (uint8_t bit_msk = 0x01; bit_msk; bit_msk <<= 1)
    18ee:	11 0f       	add	r17, r17
    18f0:	11 97       	sbiw	r26, 0x01	; 1
    18f2:	19 f6       	brne	.-122    	; 0x187a <_ZN7oneWire9read_byteEv+0x14>
			data_read |= bit_msk;
		}
	}
	
	return data_read;
}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	08 95       	ret

000018fc <_ZN7oneWire11oneWireTaskEv>:
/*****************************************************************************
 * Method:		oneWireTask
 * Description:	This method runs the oneWire task
 ****************************************************************************/
void oneWire::oneWireTask (void)
{
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	ec 01       	movw	r28, r24
	
	uint8_t low_byte, high_byte;
	int16_t temp;
	int32_t temp_f;
	
	if ((runs % 5) == 0)
    1906:	20 91 c6 06 	lds	r18, 0x06C6
    190a:	9d ec       	ldi	r25, 0xCD	; 205
    190c:	29 9f       	mul	r18, r25
    190e:	91 2d       	mov	r25, r1
    1910:	11 24       	eor	r1, r1
    1912:	96 95       	lsr	r25
    1914:	96 95       	lsr	r25
    1916:	39 2f       	mov	r19, r25
    1918:	33 0f       	add	r19, r19
    191a:	33 0f       	add	r19, r19
    191c:	93 0f       	add	r25, r19
    191e:	29 13       	cpse	r18, r25
    1920:	9a c0       	rjmp	.+308    	; 0x1a56 <_ZN7oneWire11oneWireTaskEv+0x15a>
	{
		DBG(this->p_serial, "\r\noneWire Task Running\r\n");
    1922:	89 e1       	ldi	r24, 0x19	; 25
    1924:	ea ea       	ldi	r30, 0xAA	; 170
    1926:	f4 e0       	ldi	r31, 0x04	; 4
    1928:	a7 ec       	ldi	r26, 0xC7	; 199
    192a:	b5 e0       	ldi	r27, 0x05	; 5
    192c:	01 90       	ld	r0, Z+
    192e:	0d 92       	st	X+, r0
    1930:	8a 95       	dec	r24
    1932:	e1 f7       	brne	.-8      	; 0x192c <_ZN7oneWire11oneWireTaskEv+0x30>
    1934:	67 ec       	ldi	r22, 0xC7	; 199
    1936:	75 e0       	ldi	r23, 0x05	; 5
    1938:	88 81       	ld	r24, Y
    193a:	99 81       	ldd	r25, Y+1	; 0x01
    193c:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
		
		// perform temperature conversion
		reset();
    1940:	ce 01       	movw	r24, r28
    1942:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <_ZN7oneWire5resetEv>
		write_byte(0xCC);	// skip ROM
    1946:	6c ec       	ldi	r22, 0xCC	; 204
    1948:	ce 01       	movw	r24, r28
    194a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZN7oneWire10write_byteEh>
		write_byte(0x44);	// single temp conversion
    194e:	64 e4       	ldi	r22, 0x44	; 68
    1950:	ce 01       	movw	r24, r28
    1952:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZN7oneWire10write_byteEh>
		
		// read in scratch pad
		reset();
    1956:	ce 01       	movw	r24, r28
    1958:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <_ZN7oneWire5resetEv>
		write_byte(0xCC);	// skip ROM
    195c:	6c ec       	ldi	r22, 0xCC	; 204
    195e:	ce 01       	movw	r24, r28
    1960:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZN7oneWire10write_byteEh>
		write_byte(0xBE);	// read scratchpad
    1964:	6e eb       	ldi	r22, 0xBE	; 190
    1966:	ce 01       	movw	r24, r28
    1968:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZN7oneWire10write_byteEh>
		
		// read temperature
		low_byte = read_byte();
    196c:	ce 01       	movw	r24, r28
    196e:	0e 94 33 0c 	call	0x1866	; 0x1866 <_ZN7oneWire9read_byteEv>
    1972:	18 2f       	mov	r17, r24
		high_byte = read_byte();
    1974:	ce 01       	movw	r24, r28
    1976:	0e 94 33 0c 	call	0x1866	; 0x1866 <_ZN7oneWire9read_byteEv>
		temp = (high_byte << BYTE_SHIFT) | low_byte;
    197a:	21 2f       	mov	r18, r17
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	a9 01       	movw	r20, r18
    1980:	58 2b       	or	r21, r24
 * Description:	This method converts the raw temperature data to human 
 * 				readable values
 ****************************************************************************/
int16_t oneWire::convert_temp(int16_t raw)
{
	return (raw * 6) + (raw / 4);
    1982:	8a 01       	movw	r16, r20
    1984:	00 0f       	add	r16, r16
    1986:	11 1f       	adc	r17, r17
    1988:	98 01       	movw	r18, r16
    198a:	24 0f       	add	r18, r20
    198c:	35 1f       	adc	r19, r21
    198e:	22 0f       	add	r18, r18
    1990:	33 1f       	adc	r19, r19
    1992:	8a 01       	movw	r16, r20
    1994:	55 23       	and	r21, r21
    1996:	14 f4       	brge	.+4      	; 0x199c <_ZN7oneWire11oneWireTaskEv+0xa0>
    1998:	0d 5f       	subi	r16, 0xFD	; 253
    199a:	1f 4f       	sbci	r17, 0xFF	; 255
    199c:	15 95       	asr	r17
    199e:	07 95       	ror	r16
    19a0:	15 95       	asr	r17
    19a2:	07 95       	ror	r16
    19a4:	02 0f       	add	r16, r18
    19a6:	13 1f       	adc	r17, r19
		// read temperature
		low_byte = read_byte();
		high_byte = read_byte();
		temp = (high_byte << BYTE_SHIFT) | low_byte;
		temp = convert_temp(temp);
		temp_f = TEMP_C_TO_F((int32_t)temp);
    19a8:	c8 01       	movw	r24, r16
    19aa:	01 2e       	mov	r0, r17
    19ac:	00 0c       	add	r0, r0
    19ae:	aa 0b       	sbc	r26, r26
    19b0:	bb 0b       	sbc	r27, r27
    19b2:	ac 01       	movw	r20, r24
    19b4:	bd 01       	movw	r22, r26
    19b6:	44 0f       	add	r20, r20
    19b8:	55 1f       	adc	r21, r21
    19ba:	66 1f       	adc	r22, r22
    19bc:	77 1f       	adc	r23, r23
    19be:	44 0f       	add	r20, r20
    19c0:	55 1f       	adc	r21, r21
    19c2:	66 1f       	adc	r22, r22
    19c4:	77 1f       	adc	r23, r23
    19c6:	44 0f       	add	r20, r20
    19c8:	55 1f       	adc	r21, r21
    19ca:	66 1f       	adc	r22, r22
    19cc:	77 1f       	adc	r23, r23
    19ce:	84 0f       	add	r24, r20
    19d0:	95 1f       	adc	r25, r21
    19d2:	a6 1f       	adc	r26, r22
    19d4:	b7 1f       	adc	r27, r23
    19d6:	bc 01       	movw	r22, r24
    19d8:	cd 01       	movw	r24, r26
    19da:	60 58       	subi	r22, 0x80	; 128
    19dc:	71 4c       	sbci	r23, 0xC1	; 193
    19de:	8f 4f       	sbci	r24, 0xFF	; 255
    19e0:	9f 4f       	sbci	r25, 0xFF	; 255
    19e2:	25 e0       	ldi	r18, 0x05	; 5
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	50 e0       	ldi	r21, 0x00	; 0
    19ea:	0e 94 b7 10 	call	0x216e	; 0x216e <__divmodsi4>
		
		DBG(this->p_serial, "Temp sensor %d: %d.%02dC or %ld.%02ldF\r\n",
    19ee:	ca 01       	movw	r24, r20
    19f0:	b9 01       	movw	r22, r18
    19f2:	24 e6       	ldi	r18, 0x64	; 100
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e0       	ldi	r20, 0x00	; 0
    19f8:	50 e0       	ldi	r21, 0x00	; 0
    19fa:	0e 94 b7 10 	call	0x216e	; 0x216e <__divmodsi4>
    19fe:	9f 93       	push	r25
    1a00:	8f 93       	push	r24
    1a02:	7f 93       	push	r23
    1a04:	6f 93       	push	r22
    1a06:	5f 93       	push	r21
    1a08:	4f 93       	push	r20
    1a0a:	3f 93       	push	r19
    1a0c:	2f 93       	push	r18
    1a0e:	c8 01       	movw	r24, r16
    1a10:	64 e6       	ldi	r22, 0x64	; 100
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	0e 94 81 10 	call	0x2102	; 0x2102 <__divmodhi4>
    1a18:	9f 93       	push	r25
    1a1a:	8f 93       	push	r24
    1a1c:	7f 93       	push	r23
    1a1e:	6f 93       	push	r22
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	1f 92       	push	r1
    1a24:	8f 93       	push	r24
    1a26:	83 ec       	ldi	r24, 0xC3	; 195
    1a28:	94 e0       	ldi	r25, 0x04	; 4
    1a2a:	9f 93       	push	r25
    1a2c:	8f 93       	push	r24
    1a2e:	87 ec       	ldi	r24, 0xC7	; 199
    1a30:	95 e0       	ldi	r25, 0x05	; 5
    1a32:	9f 93       	push	r25
    1a34:	8f 93       	push	r24
    1a36:	0e 94 91 12 	call	0x2522	; 0x2522 <sprintf>
    1a3a:	67 ec       	ldi	r22, 0xC7	; 199
    1a3c:	75 e0       	ldi	r23, 0x05	; 5
    1a3e:	88 81       	ld	r24, Y
    1a40:	99 81       	ldd	r25, Y+1	; 0x01
    1a42:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
    1a46:	8d b7       	in	r24, 0x3d	; 61
    1a48:	9e b7       	in	r25, 0x3e	; 62
    1a4a:	42 96       	adiw	r24, 0x12	; 18
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	9e bf       	out	0x3e, r25	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	8d bf       	out	0x3d, r24	; 61
			dev_id, 
			(temp / 100), (temp % 100),
			(temp_f / 100), (temp_f % 100));
	}
	runs++;
    1a56:	80 91 c6 06 	lds	r24, 0x06C6
    1a5a:	8f 5f       	subi	r24, 0xFF	; 255
    1a5c:	80 93 c6 06 	sts	0x06C6, r24
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	1f 91       	pop	r17
    1a66:	0f 91       	pop	r16
    1a68:	08 95       	ret

00001a6a <_ZN3PIR15init_timer_ln_1Ev>:

void PIR::init_timer_ln_1 (void)
{
	// set up timer0 compA for lane 1
	// Compare output mode, non-PWM mode, clear on compare match
	TCCR0A |= ((1 << COM0A1) & ~(1 << COM0A0));
    1a6a:	84 b5       	in	r24, 0x24	; 36
    1a6c:	80 68       	ori	r24, 0x80	; 128
    1a6e:	84 bd       	out	0x24, r24	; 36
	
	// Force output compare A
	TCCR0B |= (1 << FOC0A);
    1a70:	85 b5       	in	r24, 0x25	; 37
    1a72:	80 68       	ori	r24, 0x80	; 128
    1a74:	85 bd       	out	0x25, r24	; 37
	
	// set prescaler to 1024
	TCCR0B |= (((1 << CS02) & ~(1 << CS01)) | (1 << CS00));
    1a76:	85 b5       	in	r24, 0x25	; 37
    1a78:	85 60       	ori	r24, 0x05	; 5
    1a7a:	85 bd       	out	0x25, r24	; 37
	
	// Clear previous timer overflow
	TIMSK0 |= (1 << OCF0A);
    1a7c:	ee e6       	ldi	r30, 0x6E	; 110
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	82 60       	ori	r24, 0x02	; 2
    1a84:	80 83       	st	Z, r24
	
	// enable compare match
	TIMSK0 |= (1 << OCIE0A);
    1a86:	80 81       	ld	r24, Z
    1a88:	82 60       	ori	r24, 0x02	; 2
    1a8a:	80 83       	st	Z, r24
	
	// set timer output compare match
	OCR0A = 0xFF;
    1a8c:	8f ef       	ldi	r24, 0xFF	; 255
    1a8e:	87 bd       	out	0x27, r24	; 39
    1a90:	08 95       	ret

00001a92 <_ZN3PIR15init_timer_ln_2Ev>:

void PIR::init_timer_ln_2 (void)
{
	// set up timer0 compB for lane 2
	// Compare output mode, non-PWM mode, clear on compare match
	TCCR0A |= ((1 << COM0B1) & !(1 << COM0B0));
    1a92:	84 b5       	in	r24, 0x24	; 36
    1a94:	84 bd       	out	0x24, r24	; 36
	
	// Force output compare B
	TCCR0B |= (1 << FOC0B);
    1a96:	85 b5       	in	r24, 0x25	; 37
    1a98:	80 64       	ori	r24, 0x40	; 64
    1a9a:	85 bd       	out	0x25, r24	; 37
	
	// set prescaler to 1024
	TCCR0B |= (((1 << CS02) & ~(1 << CS01)) | (1 << CS00));
    1a9c:	85 b5       	in	r24, 0x25	; 37
    1a9e:	85 60       	ori	r24, 0x05	; 5
    1aa0:	85 bd       	out	0x25, r24	; 37
	
	// Clear previous timer overflow
	TIMSK0 |= (1 << OCF0B);
    1aa2:	ee e6       	ldi	r30, 0x6E	; 110
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	84 60       	ori	r24, 0x04	; 4
    1aaa:	80 83       	st	Z, r24
	
	// enable compare match
	TIMSK0 |= (1 << OCIE0B);
    1aac:	80 81       	ld	r24, Z
    1aae:	84 60       	ori	r24, 0x04	; 4
    1ab0:	80 83       	st	Z, r24
	
	// set timer output compare match
	OCR0A = 0xFF;
    1ab2:	8f ef       	ldi	r24, 0xFF	; 255
    1ab4:	87 bd       	out	0x27, r24	; 39
    1ab6:	08 95       	ret

00001ab8 <_ZN3PIR7initPIREv>:
}

void PIR::initPIR (void)
{
	// Enable Pin Change Interrupts on Port D
	PCICR |= 1 << PCIE2;
    1ab8:	e8 e6       	ldi	r30, 0x68	; 104
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	20 81       	ld	r18, Z
    1abe:	24 60       	ori	r18, 0x04	; 4
    1ac0:	20 83       	st	Z, r18
	
	// Enables Specific Pin as Pin Change Interrupt
	PCMSK2 |= 1 << pin; // PCINTx
    1ac2:	ed e6       	ldi	r30, 0x6D	; 109
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	40 81       	ld	r20, Z
    1ac8:	21 e0       	ldi	r18, 0x01	; 1
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	dc 01       	movw	r26, r24
    1ace:	12 96       	adiw	r26, 0x02	; 2
    1ad0:	0c 90       	ld	r0, X
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <_ZN3PIR7initPIREv+0x20>
    1ad4:	22 0f       	add	r18, r18
    1ad6:	33 1f       	adc	r19, r19
    1ad8:	0a 94       	dec	r0
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <_ZN3PIR7initPIREv+0x1c>
    1adc:	24 2b       	or	r18, r20
    1ade:	20 83       	st	Z, r18
	
	// Clear any previous interrupts
	PCIFR |= 1 << PCIF2;
    1ae0:	da 9a       	sbi	0x1b, 2	; 27
	
	sei();
    1ae2:	78 94       	sei
    1ae4:	08 95       	ret

00001ae6 <_ZN3PIRC1EP6serialh>:
 * Description:	This constructor sets up the PIR sensor.
 * 
 * Parameters:	ptr_serial	- a reference to the serial debug object
 *				p 			- the pin on the ATmega328P the sensor outputs to
 ****************************************************************************/
PIR::PIR (serial *ptr_serial, uint8_t p)
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	ec 01       	movw	r28, r24
{
	// initialize the pin and serial debug object
	pin = p;
    1aec:	4a 83       	std	Y+2, r20	; 0x02
	p_serial = ptr_serial;
    1aee:	79 83       	std	Y+1, r23	; 0x01
    1af0:	68 83       	st	Y, r22


	// Make PIR an Input
	INPUT(PIR_DDR, pin);
    1af2:	2a b1       	in	r18, 0x0a	; 10
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <_ZN3PIRC1EP6serialh+0x18>
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	4a 95       	dec	r20
    1b00:	e2 f7       	brpl	.-8      	; 0x1afa <_ZN3PIRC1EP6serialh+0x14>
    1b02:	80 95       	com	r24
    1b04:	82 23       	and	r24, r18
    1b06:	8a b9       	out	0x0a, r24	; 10
	
	switch (pin)
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	84 30       	cpi	r24, 0x04	; 4
    1b0c:	41 f0       	breq	.+16     	; 0x1b1e <_ZN3PIRC1EP6serialh+0x38>
    1b0e:	87 30       	cpi	r24, 0x07	; 7
    1b10:	61 f4       	brne	.+24     	; 0x1b2a <_ZN3PIRC1EP6serialh+0x44>
	{
		case LN_1_PIN:
			lane = LN_1;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	8b 83       	std	Y+3, r24	; 0x03
			init_timer_ln_1();
    1b16:	ce 01       	movw	r24, r28
    1b18:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN3PIR15init_timer_ln_1Ev>
			break;
    1b1c:	07 c0       	rjmp	.+14     	; 0x1b2c <_ZN3PIRC1EP6serialh+0x46>
		case LN_2_PIN:
			lane = LN_2;
    1b1e:	82 e0       	ldi	r24, 0x02	; 2
    1b20:	8b 83       	std	Y+3, r24	; 0x03
			init_timer_ln_2();
    1b22:	ce 01       	movw	r24, r28
    1b24:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <_ZN3PIR15init_timer_ln_2Ev>
			break;
    1b28:	01 c0       	rjmp	.+2      	; 0x1b2c <_ZN3PIRC1EP6serialh+0x46>
		default:
			lane = 0;
    1b2a:	1b 82       	std	Y+3, r1	; 0x03
			break;
	}
	
	DBG(this->p_serial, "PIR for lane %d Calibrating...", lane);
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	1f 92       	push	r1
    1b30:	8f 93       	push	r24
    1b32:	8c ee       	ldi	r24, 0xEC	; 236
    1b34:	94 e0       	ldi	r25, 0x04	; 4
    1b36:	9f 93       	push	r25
    1b38:	8f 93       	push	r24
    1b3a:	87 ec       	ldi	r24, 0xC7	; 199
    1b3c:	95 e0       	ldi	r25, 0x05	; 5
    1b3e:	9f 93       	push	r25
    1b40:	8f 93       	push	r24
    1b42:	0e 94 91 12 	call	0x2522	; 0x2522 <sprintf>
    1b46:	67 ec       	ldi	r22, 0xC7	; 199
    1b48:	75 e0       	ldi	r23, 0x05	; 5
    1b4a:	88 81       	ld	r24, Y
    1b4c:	99 81       	ldd	r25, Y+1	; 0x01
    1b4e:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b52:	2f ef       	ldi	r18, 0xFF	; 255
    1b54:	33 eb       	ldi	r19, 0xB3	; 179
    1b56:	84 ec       	ldi	r24, 0xC4	; 196
    1b58:	94 e0       	ldi	r25, 0x04	; 4
    1b5a:	21 50       	subi	r18, 0x01	; 1
    1b5c:	30 40       	sbci	r19, 0x00	; 0
    1b5e:	80 40       	sbci	r24, 0x00	; 0
    1b60:	90 40       	sbci	r25, 0x00	; 0
    1b62:	d9 f7       	brne	.-10     	; 0x1b5a <_ZN3PIRC1EP6serialh+0x74>
    1b64:	00 c0       	rjmp	.+0      	; 0x1b66 <_ZN3PIRC1EP6serialh+0x80>
    1b66:	00 00       	nop
	_delay_ms(30000);

	initPIR();
    1b68:	ce 01       	movw	r24, r28
    1b6a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN3PIR7initPIREv>
	DBG(this->p_serial, "PIR Constructor OK!\r\n");
    1b6e:	86 e1       	ldi	r24, 0x16	; 22
    1b70:	eb e0       	ldi	r30, 0x0B	; 11
    1b72:	f5 e0       	ldi	r31, 0x05	; 5
    1b74:	a7 ec       	ldi	r26, 0xC7	; 199
    1b76:	b5 e0       	ldi	r27, 0x05	; 5
    1b78:	01 90       	ld	r0, Z+
    1b7a:	0d 92       	st	X+, r0
    1b7c:	8a 95       	dec	r24
    1b7e:	e1 f7       	brne	.-8      	; 0x1b78 <_ZN3PIRC1EP6serialh+0x92>
    1b80:	67 ec       	ldi	r22, 0xC7	; 199
    1b82:	75 e0       	ldi	r23, 0x05	; 5
    1b84:	88 81       	ld	r24, Y
    1b86:	99 81       	ldd	r25, Y+1	; 0x01
    1b88:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
}
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	08 95       	ret

00001b9e <_ZN3PIR8isActiveEv>:
 *
 * Return:		bool - state of if an active signal was received
 ****************************************************************************/
bool PIR::isActive (void) 
{
	return lane_states & lane;
    1b9e:	20 91 c6 05 	lds	r18, 0x05C6
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	83 81       	ldd	r24, Z+3	; 0x03
    1ba6:	92 2f       	mov	r25, r18
    1ba8:	98 23       	and	r25, r24
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <_ZN3PIR8isActiveEv+0x12>
    1bae:	80 e0       	ldi	r24, 0x00	; 0
}
    1bb0:	08 95       	ret

00001bb2 <_ZN3PIR7PIRTaskEv>:
/*****************************************************************************
 * Method:		PIRTask
 * Description:	This method runs the PIR task.
 ****************************************************************************/
void PIR::PIRTask (void)
{
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	ec 01       	movw	r28, r24
	static uint8_t runs = 0;

	// Runs once every 5 run cycles
	if ((runs % 1) == 0)
	{
		DBG(this->p_serial, "\r\nPIR Task Running\r\n");
    1bb8:	85 e1       	ldi	r24, 0x15	; 21
    1bba:	e1 e2       	ldi	r30, 0x21	; 33
    1bbc:	f5 e0       	ldi	r31, 0x05	; 5
    1bbe:	a7 ec       	ldi	r26, 0xC7	; 199
    1bc0:	b5 e0       	ldi	r27, 0x05	; 5
    1bc2:	01 90       	ld	r0, Z+
    1bc4:	0d 92       	st	X+, r0
    1bc6:	8a 95       	dec	r24
    1bc8:	e1 f7       	brne	.-8      	; 0x1bc2 <_ZN3PIR7PIRTaskEv+0x10>
    1bca:	67 ec       	ldi	r22, 0xC7	; 199
    1bcc:	75 e0       	ldi	r23, 0x05	; 5
    1bce:	88 81       	ld	r24, Y
    1bd0:	99 81       	ldd	r25, Y+1	; 0x01
    1bd2:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>

		DBG(this->p_serial, "Sensor is ");
    1bd6:	8b e0       	ldi	r24, 0x0B	; 11
    1bd8:	e6 e3       	ldi	r30, 0x36	; 54
    1bda:	f5 e0       	ldi	r31, 0x05	; 5
    1bdc:	a7 ec       	ldi	r26, 0xC7	; 199
    1bde:	b5 e0       	ldi	r27, 0x05	; 5
    1be0:	01 90       	ld	r0, Z+
    1be2:	0d 92       	st	X+, r0
    1be4:	8a 95       	dec	r24
    1be6:	e1 f7       	brne	.-8      	; 0x1be0 <_ZN3PIR7PIRTaskEv+0x2e>
    1be8:	67 ec       	ldi	r22, 0xC7	; 199
    1bea:	75 e0       	ldi	r23, 0x05	; 5
    1bec:	88 81       	ld	r24, Y
    1bee:	99 81       	ldd	r25, Y+1	; 0x01
    1bf0:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>

		// check for sensor active
		if (!isActive())
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <_ZN3PIR8isActiveEv>
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	0f c0       	rjmp	.+30     	; 0x1c1c <_ZN3PIR7PIRTaskEv+0x6a>
		{
			DBG(this->p_serial, "NOT ");
    1bfe:	85 e0       	ldi	r24, 0x05	; 5
    1c00:	e1 e4       	ldi	r30, 0x41	; 65
    1c02:	f5 e0       	ldi	r31, 0x05	; 5
    1c04:	a7 ec       	ldi	r26, 0xC7	; 199
    1c06:	b5 e0       	ldi	r27, 0x05	; 5
    1c08:	01 90       	ld	r0, Z+
    1c0a:	0d 92       	st	X+, r0
    1c0c:	8a 95       	dec	r24
    1c0e:	e1 f7       	brne	.-8      	; 0x1c08 <_ZN3PIR7PIRTaskEv+0x56>
    1c10:	67 ec       	ldi	r22, 0xC7	; 199
    1c12:	75 e0       	ldi	r23, 0x05	; 5
    1c14:	88 81       	ld	r24, Y
    1c16:	99 81       	ldd	r25, Y+1	; 0x01
    1c18:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
		}
		DBG(this->p_serial, "active.\r\n");		
    1c1c:	8a e0       	ldi	r24, 0x0A	; 10
    1c1e:	e6 e4       	ldi	r30, 0x46	; 70
    1c20:	f5 e0       	ldi	r31, 0x05	; 5
    1c22:	a7 ec       	ldi	r26, 0xC7	; 199
    1c24:	b5 e0       	ldi	r27, 0x05	; 5
    1c26:	01 90       	ld	r0, Z+
    1c28:	0d 92       	st	X+, r0
    1c2a:	8a 95       	dec	r24
    1c2c:	e1 f7       	brne	.-8      	; 0x1c26 <_ZN3PIR7PIRTaskEv+0x74>
    1c2e:	67 ec       	ldi	r22, 0xC7	; 199
    1c30:	75 e0       	ldi	r23, 0x05	; 5
    1c32:	88 81       	ld	r24, Y
    1c34:	99 81       	ldd	r25, Y+1	; 0x01
    1c36:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
	}

	runs++;
    1c3a:	80 91 c7 06 	lds	r24, 0x06C7
    1c3e:	8f 5f       	subi	r24, 0xFF	; 255
    1c40:	80 93 c7 06 	sts	0x06C7, r24
}
    1c44:	df 91       	pop	r29
    1c46:	cf 91       	pop	r28
    1c48:	08 95       	ret

00001c4a <__vector_5>:

ISR (PCINT2_vect)
{
    1c4a:	1f 92       	push	r1
    1c4c:	0f 92       	push	r0
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	0f 92       	push	r0
    1c52:	11 24       	eor	r1, r1
    1c54:	8f 93       	push	r24
    1c56:	9f 93       	push	r25
    1c58:	ef 93       	push	r30
    1c5a:	ff 93       	push	r31
	changedBits;
    1c5c:	80 91 c4 05 	lds	r24, 0x05C4
	cli();
    1c60:	f8 94       	cli

	changedBits = PIR_PIN ^ portd_hist;
    1c62:	89 b1       	in	r24, 0x09	; 9
    1c64:	90 91 c3 05 	lds	r25, 0x05C3
    1c68:	89 27       	eor	r24, r25
    1c6a:	80 93 c4 05 	sts	0x05C4, r24
	portd_hist = PIR_PIN;
    1c6e:	89 b1       	in	r24, 0x09	; 9
    1c70:	80 93 c3 05 	sts	0x05C3, r24

	if (changedBits & (1 << LN_1_PIN))
    1c74:	80 91 c4 05 	lds	r24, 0x05C4
    1c78:	88 23       	and	r24, r24
    1c7a:	64 f4       	brge	.+24     	; 0x1c94 <__vector_5+0x4a>
	{
		// Lane 1 changed state
		// reset timer counter
		ln_1_tmr_cnt = 0;
    1c7c:	10 92 c2 05 	sts	0x05C2, r1
		// set timer flag for lane 1
		ln_tmr_flg |= LN_1;
    1c80:	80 91 c5 05 	lds	r24, 0x05C5
    1c84:	81 60       	ori	r24, 0x01	; 1
    1c86:	80 93 c5 05 	sts	0x05C5, r24
		
		// clear timer
		TIMSK0 |= (1 << OCF0A);
    1c8a:	ee e6       	ldi	r30, 0x6E	; 110
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	82 60       	ori	r24, 0x02	; 2
    1c92:	80 83       	st	Z, r24
	}
	
	if (changedBits & (1 << LN_2_PIN))
    1c94:	80 91 c4 05 	lds	r24, 0x05C4
    1c98:	84 ff       	sbrs	r24, 4
    1c9a:	0c c0       	rjmp	.+24     	; 0x1cb4 <__vector_5+0x6a>
	{
		// Lane 2 changed state
		// reset timer counter
		ln_2_tmr_cnt = 0;
    1c9c:	10 92 c1 05 	sts	0x05C1, r1
		// set timer flag for lane 2
		ln_tmr_flg |= LN_2;
    1ca0:	80 91 c5 05 	lds	r24, 0x05C5
    1ca4:	82 60       	ori	r24, 0x02	; 2
    1ca6:	80 93 c5 05 	sts	0x05C5, r24
		
		// clear timer
		TIMSK0 |= (1 << OCF0B);
    1caa:	ee e6       	ldi	r30, 0x6E	; 110
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	84 60       	ori	r24, 0x04	; 4
    1cb2:	80 83       	st	Z, r24
	}

	sei();
    1cb4:	78 94       	sei
}
    1cb6:	ff 91       	pop	r31
    1cb8:	ef 91       	pop	r30
    1cba:	9f 91       	pop	r25
    1cbc:	8f 91       	pop	r24
    1cbe:	0f 90       	pop	r0
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	0f 90       	pop	r0
    1cc4:	1f 90       	pop	r1
    1cc6:	18 95       	reti

00001cc8 <__vector_14>:

ISR (TIMER0_COMPA_vect)
{	
    1cc8:	1f 92       	push	r1
    1cca:	0f 92       	push	r0
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	0f 92       	push	r0
    1cd0:	11 24       	eor	r1, r1
    1cd2:	8f 93       	push	r24
    1cd4:	9f 93       	push	r25
	// check if supposed to monitor for state hold
	if (ln_tmr_flg & LN_1)
    1cd6:	80 91 c5 05 	lds	r24, 0x05C5
    1cda:	80 ff       	sbrs	r24, 0
    1cdc:	29 c0       	rjmp	.+82     	; 0x1d30 <__vector_14+0x68>
	{
		if (lane_states & LN_1)
    1cde:	80 91 c6 05 	lds	r24, 0x05C6
    1ce2:	80 ff       	sbrs	r24, 0
    1ce4:	13 c0       	rjmp	.+38     	; 0x1d0c <__vector_14+0x44>
		{
			// lane 1 was full
			if (ln_1_tmr_cnt++ >= MIN_LN_EMPTY)
    1ce6:	80 91 c2 05 	lds	r24, 0x05C2
    1cea:	91 e0       	ldi	r25, 0x01	; 1
    1cec:	98 0f       	add	r25, r24
    1cee:	90 93 c2 05 	sts	0x05C2, r25
    1cf2:	8b 39       	cpi	r24, 0x9B	; 155
    1cf4:	e8 f0       	brcs	.+58     	; 0x1d30 <__vector_14+0x68>
			{
				// lane 1 now considered empty
				lane_states &= ~LN_1;
    1cf6:	80 91 c6 05 	lds	r24, 0x05C6
    1cfa:	8e 7f       	andi	r24, 0xFE	; 254
    1cfc:	80 93 c6 05 	sts	0x05C6, r24
				// clear the flag so stop monitoring
				ln_tmr_flg &= ~LN_1;
    1d00:	80 91 c5 05 	lds	r24, 0x05C5
    1d04:	8e 7f       	andi	r24, 0xFE	; 254
    1d06:	80 93 c5 05 	sts	0x05C5, r24
    1d0a:	12 c0       	rjmp	.+36     	; 0x1d30 <__vector_14+0x68>
			}
		}
		else
		{
			// lane 1 was empty
			if (ln_1_tmr_cnt++ >= MIN_LN_FULL)
    1d0c:	80 91 c2 05 	lds	r24, 0x05C2
    1d10:	91 e0       	ldi	r25, 0x01	; 1
    1d12:	98 0f       	add	r25, r24
    1d14:	90 93 c2 05 	sts	0x05C2, r25
    1d18:	84 36       	cpi	r24, 0x64	; 100
    1d1a:	50 f0       	brcs	.+20     	; 0x1d30 <__vector_14+0x68>
			{
				// lane 1 now considered full
				lane_states |= LN_1;
    1d1c:	80 91 c6 05 	lds	r24, 0x05C6
    1d20:	81 60       	ori	r24, 0x01	; 1
    1d22:	80 93 c6 05 	sts	0x05C6, r24
				// clear the flag so stop monitoring
				ln_tmr_flg &= ~LN_1;
    1d26:	80 91 c5 05 	lds	r24, 0x05C5
    1d2a:	8e 7f       	andi	r24, 0xFE	; 254
    1d2c:	80 93 c5 05 	sts	0x05C5, r24
			}
		}
	}
}
    1d30:	9f 91       	pop	r25
    1d32:	8f 91       	pop	r24
    1d34:	0f 90       	pop	r0
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	0f 90       	pop	r0
    1d3a:	1f 90       	pop	r1
    1d3c:	18 95       	reti

00001d3e <__vector_15>:

ISR (TIMER0_COMPB_vect)
{
    1d3e:	1f 92       	push	r1
    1d40:	0f 92       	push	r0
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	0f 92       	push	r0
    1d46:	11 24       	eor	r1, r1
    1d48:	8f 93       	push	r24
    1d4a:	9f 93       	push	r25
	// check if supposed to monitor for state hold
	if (ln_tmr_flg & LN_2)
    1d4c:	80 91 c5 05 	lds	r24, 0x05C5
    1d50:	81 ff       	sbrs	r24, 1
    1d52:	29 c0       	rjmp	.+82     	; 0x1da6 <__vector_15+0x68>
	{
		if (lane_states & LN_2)
    1d54:	80 91 c6 05 	lds	r24, 0x05C6
    1d58:	81 ff       	sbrs	r24, 1
    1d5a:	13 c0       	rjmp	.+38     	; 0x1d82 <__vector_15+0x44>
		{
			// lane 2 was full
			if (ln_2_tmr_cnt++ >= MIN_LN_EMPTY)
    1d5c:	80 91 c1 05 	lds	r24, 0x05C1
    1d60:	91 e0       	ldi	r25, 0x01	; 1
    1d62:	98 0f       	add	r25, r24
    1d64:	90 93 c1 05 	sts	0x05C1, r25
    1d68:	8b 39       	cpi	r24, 0x9B	; 155
    1d6a:	e8 f0       	brcs	.+58     	; 0x1da6 <__vector_15+0x68>
			{
				// lane 2 now considered empty
				lane_states &= ~LN_2;
    1d6c:	80 91 c6 05 	lds	r24, 0x05C6
    1d70:	8d 7f       	andi	r24, 0xFD	; 253
    1d72:	80 93 c6 05 	sts	0x05C6, r24
				// clear the flag so stop monitoring
				ln_tmr_flg &= ~LN_2;
    1d76:	80 91 c5 05 	lds	r24, 0x05C5
    1d7a:	8d 7f       	andi	r24, 0xFD	; 253
    1d7c:	80 93 c5 05 	sts	0x05C5, r24
    1d80:	12 c0       	rjmp	.+36     	; 0x1da6 <__vector_15+0x68>
			}
		}
		else
		{
			// lane 2 was empty
			if (ln_2_tmr_cnt++ >= MIN_LN_FULL)
    1d82:	80 91 c1 05 	lds	r24, 0x05C1
    1d86:	91 e0       	ldi	r25, 0x01	; 1
    1d88:	98 0f       	add	r25, r24
    1d8a:	90 93 c1 05 	sts	0x05C1, r25
    1d8e:	84 36       	cpi	r24, 0x64	; 100
    1d90:	50 f0       	brcs	.+20     	; 0x1da6 <__vector_15+0x68>
			{
				// lane 2 now considered full
				lane_states |= LN_2;
    1d92:	80 91 c6 05 	lds	r24, 0x05C6
    1d96:	82 60       	ori	r24, 0x02	; 2
    1d98:	80 93 c6 05 	sts	0x05C6, r24
				// clear the flag so stop monitoring
				ln_tmr_flg &= ~LN_2;
    1d9c:	80 91 c5 05 	lds	r24, 0x05C5
    1da0:	8d 7f       	andi	r24, 0xFD	; 253
    1da2:	80 93 c5 05 	sts	0x05C5, r24
			}
		}
	}
    1da6:	9f 91       	pop	r25
    1da8:	8f 91       	pop	r24
    1daa:	0f 90       	pop	r0
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	0f 90       	pop	r0
    1db0:	1f 90       	pop	r1
    1db2:	18 95       	reti

00001db4 <_ZN6serial4initEv>:
 * 
 * Return:		bool - the status of the operation (true  = success,
 *													false = failure)
 ****************************************************************************/
void serial::init (void)
{
    1db4:	fc 01       	movw	r30, r24
	/* calculate ubrr for desired baud rate */
	uint32_t ubrr = ((clk_speed / 16UL) / baud_rate) - 1;
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	a4 81       	ldd	r26, Z+4	; 0x04
    1dbc:	b5 81       	ldd	r27, Z+5	; 0x05
    1dbe:	bc 01       	movw	r22, r24
    1dc0:	cd 01       	movw	r24, r26
    1dc2:	68 94       	set
    1dc4:	13 f8       	bld	r1, 3
    1dc6:	96 95       	lsr	r25
    1dc8:	87 95       	ror	r24
    1dca:	77 95       	ror	r23
    1dcc:	67 95       	ror	r22
    1dce:	16 94       	lsr	r1
    1dd0:	d1 f7       	brne	.-12     	; 0x1dc6 <_ZN6serial4initEv+0x12>
    1dd2:	20 81       	ld	r18, Z
    1dd4:	31 81       	ldd	r19, Z+1	; 0x01
    1dd6:	40 e0       	ldi	r20, 0x00	; 0
    1dd8:	50 e0       	ldi	r21, 0x00	; 0
    1dda:	0e 94 95 10 	call	0x212a	; 0x212a <__udivmodsi4>
    1dde:	ba 01       	movw	r22, r20
    1de0:	a9 01       	movw	r20, r18
    1de2:	41 50       	subi	r20, 0x01	; 1
    1de4:	51 09       	sbc	r21, r1
    1de6:	61 09       	sbc	r22, r1
    1de8:	71 09       	sbc	r23, r1
	UBRR0H = (uint8_t)(ubrr >> 8);
    1dea:	bb 27       	eor	r27, r27
    1dec:	a7 2f       	mov	r26, r23
    1dee:	96 2f       	mov	r25, r22
    1df0:	85 2f       	mov	r24, r21
    1df2:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (uint8_t)ubrr;
    1df6:	40 93 c4 00 	sts	0x00C4, r20
	
	/* Enable receiver and transmitter */
	UCSR0B = ((1 << RXEN0) | (1 << TXEN0));
    1dfa:	88 e1       	ldi	r24, 0x18	; 24
    1dfc:	80 93 c1 00 	sts	0x00C1, r24
	
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = ((1 << USBS0) | (3 << UCSZ00));
    1e00:	8e e0       	ldi	r24, 0x0E	; 14
    1e02:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0A &= ~(1 << U2X0);
    1e06:	e0 ec       	ldi	r30, 0xC0	; 192
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	8d 7f       	andi	r24, 0xFD	; 253
    1e0e:	80 83       	st	Z, r24
    1e10:	08 95       	ret

00001e12 <_ZN6serialC1Ejm>:
 * Parameters:	baud - the baud rate to establish
 *				clk  - the clock speed of the device
 ****************************************************************************/
serial::serial (uint16_t baud, uint32_t clk)
{
	baud_rate = baud;		// store a local copy of baud rate
    1e12:	fc 01       	movw	r30, r24
    1e14:	71 83       	std	Z+1, r23	; 0x01
    1e16:	60 83       	st	Z, r22
	clk_speed = clk;		// store a local copy of clock speed of device
    1e18:	22 83       	std	Z+2, r18	; 0x02
    1e1a:	33 83       	std	Z+3, r19	; 0x03
    1e1c:	44 83       	std	Z+4, r20	; 0x04
    1e1e:	55 83       	std	Z+5, r21	; 0x05
	
	init();
    1e20:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <_ZN6serial4initEv>
    1e24:	08 95       	ret

00001e26 <_ZN6serial4sendEh>:
bool serial::send (uint8_t data)
{
	uint16_t cnt = 0;
	
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1 << UDRE0)))// && cnt < SERIAL_TIMEOUT)
    1e26:	e0 ec       	ldi	r30, 0xC0	; 192
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	85 ff       	sbrs	r24, 5
    1e2e:	fd cf       	rjmp	.-6      	; 0x1e2a <_ZN6serial4sendEh+0x4>
		return false;
	}
	*/
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
    1e30:	60 93 c6 00 	sts	0x00C6, r22
	
	return true;
}
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	08 95       	ret

00001e38 <_ZN6serial4sendEPc>:
 * 
 * Parameters:	str - the string of data to be sent, maximum 255 bytes
 * Return:		uint8_t - the total number of characters successfully sent
 ****************************************************************************/
uint8_t serial::send (char *str)
{
    1e38:	ef 92       	push	r14
    1e3a:	ff 92       	push	r15
    1e3c:	0f 93       	push	r16
    1e3e:	1f 93       	push	r17
    1e40:	cf 93       	push	r28
    1e42:	fb 01       	movw	r30, r22
	uint8_t sent = 0;
	
	while (*str && sent < SERIAL_MAX_SEND)
    1e44:	60 81       	ld	r22, Z
    1e46:	66 23       	and	r22, r22
    1e48:	99 f0       	breq	.+38     	; 0x1e70 <_ZN6serial4sendEPc+0x38>
    1e4a:	8f 01       	movw	r16, r30
    1e4c:	7c 01       	movw	r14, r24
    1e4e:	0f 5f       	subi	r16, 0xFF	; 255
    1e50:	1f 4f       	sbci	r17, 0xFF	; 255
    1e52:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if (send(*str++))
    1e54:	c7 01       	movw	r24, r14
    1e56:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <_ZN6serial4sendEh>
    1e5a:	88 23       	and	r24, r24
    1e5c:	51 f0       	breq	.+20     	; 0x1e72 <_ZN6serial4sendEPc+0x3a>
		{
			sent++;
    1e5e:	cf 5f       	subi	r28, 0xFF	; 255
 ****************************************************************************/
uint8_t serial::send (char *str)
{
	uint8_t sent = 0;
	
	while (*str && sent < SERIAL_MAX_SEND)
    1e60:	f8 01       	movw	r30, r16
    1e62:	61 91       	ld	r22, Z+
    1e64:	8f 01       	movw	r16, r30
    1e66:	66 23       	and	r22, r22
    1e68:	21 f0       	breq	.+8      	; 0x1e72 <_ZN6serial4sendEPc+0x3a>
    1e6a:	cf 3f       	cpi	r28, 0xFF	; 255
    1e6c:	99 f7       	brne	.-26     	; 0x1e54 <_ZN6serial4sendEPc+0x1c>
    1e6e:	01 c0       	rjmp	.+2      	; 0x1e72 <_ZN6serial4sendEPc+0x3a>
 * Parameters:	str - the string of data to be sent, maximum 255 bytes
 * Return:		uint8_t - the total number of characters successfully sent
 ****************************************************************************/
uint8_t serial::send (char *str)
{
	uint8_t sent = 0;
    1e70:	c0 e0       	ldi	r28, 0x00	; 0
			break;
		}
	}
	
	return sent;
}
    1e72:	8c 2f       	mov	r24, r28
    1e74:	cf 91       	pop	r28
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	ff 90       	pop	r15
    1e7c:	ef 90       	pop	r14
    1e7e:	08 95       	ret

00001e80 <_ZN8TiltBallC1EP6serialh>:
 * Description:	This constructor sets up the tiltBall sensor on the ATmega328P
 *
 * Parameters:	ptr_Serial	- pointer to serial object for debugging
 *				p			- the pin on which the tiltBall is connected
 ****************************************************************************/
TiltBall::TiltBall (serial *ptr_serial, uint8_t p)
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	ec 01       	movw	r28, r24
{
	pin = p;					// store local copy of tilt ball pin
    1e86:	4a 83       	std	Y+2, r20	; 0x02
	p_serial = ptr_serial;		// store local copy of serial for debug
    1e88:	79 83       	std	Y+1, r23	; 0x01
    1e8a:	68 83       	st	Y, r22
	INPUT(TILT_DDR, pin);		// Make tilt ball an input
    1e8c:	84 b1       	in	r24, 0x04	; 4
    1e8e:	21 e0       	ldi	r18, 0x01	; 1
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <_ZN8TiltBallC1EP6serialh+0x18>
    1e94:	22 0f       	add	r18, r18
    1e96:	33 1f       	adc	r19, r19
    1e98:	4a 95       	dec	r20
    1e9a:	e2 f7       	brpl	.-8      	; 0x1e94 <_ZN8TiltBallC1EP6serialh+0x14>
    1e9c:	20 95       	com	r18
    1e9e:	28 23       	and	r18, r24
    1ea0:	24 b9       	out	0x04, r18	; 4
	
	DBG(this->p_serial, "TiltBall Constructor OK!\r\n");
    1ea2:	8b e1       	ldi	r24, 0x1B	; 27
    1ea4:	e0 e5       	ldi	r30, 0x50	; 80
    1ea6:	f5 e0       	ldi	r31, 0x05	; 5
    1ea8:	a7 ec       	ldi	r26, 0xC7	; 199
    1eaa:	b5 e0       	ldi	r27, 0x05	; 5
    1eac:	01 90       	ld	r0, Z+
    1eae:	0d 92       	st	X+, r0
    1eb0:	8a 95       	dec	r24
    1eb2:	e1 f7       	brne	.-8      	; 0x1eac <_ZN8TiltBallC1EP6serialh+0x2c>
    1eb4:	67 ec       	ldi	r22, 0xC7	; 199
    1eb6:	75 e0       	ldi	r23, 0x05	; 5
    1eb8:	88 81       	ld	r24, Y
    1eba:	99 81       	ldd	r25, Y+1	; 0x01
    1ebc:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
}
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	08 95       	ret

00001ec6 <_ZN8TiltBall8isTiltedEv>:
 * Return:		bool - whether or not the sensor is in a tilted state
 *						(true = tilted, false = not tilted)
 ****************************************************************************/
bool TiltBall::isTilted (void)
{
	return TILT_PIN & (1 << pin);
    1ec6:	23 b1       	in	r18, 0x03	; 3
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	a9 01       	movw	r20, r18
    1ecc:	fc 01       	movw	r30, r24
    1ece:	02 80       	ldd	r0, Z+2	; 0x02
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <_ZN8TiltBall8isTiltedEv+0x10>
    1ed2:	55 95       	asr	r21
    1ed4:	47 95       	ror	r20
    1ed6:	0a 94       	dec	r0
    1ed8:	e2 f7       	brpl	.-8      	; 0x1ed2 <_ZN8TiltBall8isTiltedEv+0xc>
    1eda:	ca 01       	movw	r24, r20
}
    1edc:	81 70       	andi	r24, 0x01	; 1
    1ede:	08 95       	ret

00001ee0 <_ZN8TiltBall12TiltBallTaskEv>:
 * Method:		TiltBallTask
 * Description:	This method executes the sensor read operation for the 
 *				TiltBall sensor.
 ****************************************************************************/
void TiltBall::TiltBallTask (void)
{
    1ee0:	cf 93       	push	r28
    1ee2:	df 93       	push	r29
    1ee4:	ec 01       	movw	r28, r24
	static uint8_t runs = 0;
	
	if ((runs % 5) == 0) 
    1ee6:	80 91 c8 06 	lds	r24, 0x06C8
    1eea:	9d ec       	ldi	r25, 0xCD	; 205
    1eec:	89 9f       	mul	r24, r25
    1eee:	91 2d       	mov	r25, r1
    1ef0:	11 24       	eor	r1, r1
    1ef2:	96 95       	lsr	r25
    1ef4:	96 95       	lsr	r25
    1ef6:	29 2f       	mov	r18, r25
    1ef8:	22 0f       	add	r18, r18
    1efa:	22 0f       	add	r18, r18
    1efc:	92 0f       	add	r25, r18
    1efe:	89 13       	cpse	r24, r25
    1f00:	41 c0       	rjmp	.+130    	; 0x1f84 <_ZN8TiltBall12TiltBallTaskEv+0xa4>
	{
		DBG(this->p_serial, "\r\nTiltBall Task Running\r\n");
    1f02:	8a e1       	ldi	r24, 0x1A	; 26
    1f04:	eb e6       	ldi	r30, 0x6B	; 107
    1f06:	f5 e0       	ldi	r31, 0x05	; 5
    1f08:	a7 ec       	ldi	r26, 0xC7	; 199
    1f0a:	b5 e0       	ldi	r27, 0x05	; 5
    1f0c:	01 90       	ld	r0, Z+
    1f0e:	0d 92       	st	X+, r0
    1f10:	8a 95       	dec	r24
    1f12:	e1 f7       	brne	.-8      	; 0x1f0c <_ZN8TiltBall12TiltBallTaskEv+0x2c>
    1f14:	67 ec       	ldi	r22, 0xC7	; 199
    1f16:	75 e0       	ldi	r23, 0x05	; 5
    1f18:	88 81       	ld	r24, Y
    1f1a:	99 81       	ldd	r25, Y+1	; 0x01
    1f1c:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
		
		DBG(this->p_serial, "Sensor is ");
    1f20:	8b e0       	ldi	r24, 0x0B	; 11
    1f22:	e6 e3       	ldi	r30, 0x36	; 54
    1f24:	f5 e0       	ldi	r31, 0x05	; 5
    1f26:	a7 ec       	ldi	r26, 0xC7	; 199
    1f28:	b5 e0       	ldi	r27, 0x05	; 5
    1f2a:	01 90       	ld	r0, Z+
    1f2c:	0d 92       	st	X+, r0
    1f2e:	8a 95       	dec	r24
    1f30:	e1 f7       	brne	.-8      	; 0x1f2a <_ZN8TiltBall12TiltBallTaskEv+0x4a>
    1f32:	67 ec       	ldi	r22, 0xC7	; 199
    1f34:	75 e0       	ldi	r23, 0x05	; 5
    1f36:	88 81       	ld	r24, Y
    1f38:	99 81       	ldd	r25, Y+1	; 0x01
    1f3a:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
		if (!isTilted())
    1f3e:	ce 01       	movw	r24, r28
    1f40:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <_ZN8TiltBall8isTiltedEv>
    1f44:	81 11       	cpse	r24, r1
    1f46:	0f c0       	rjmp	.+30     	; 0x1f66 <_ZN8TiltBall12TiltBallTaskEv+0x86>
		{
			DBG(this->p_serial, "NOT ");
    1f48:	85 e0       	ldi	r24, 0x05	; 5
    1f4a:	e1 e4       	ldi	r30, 0x41	; 65
    1f4c:	f5 e0       	ldi	r31, 0x05	; 5
    1f4e:	a7 ec       	ldi	r26, 0xC7	; 199
    1f50:	b5 e0       	ldi	r27, 0x05	; 5
    1f52:	01 90       	ld	r0, Z+
    1f54:	0d 92       	st	X+, r0
    1f56:	8a 95       	dec	r24
    1f58:	e1 f7       	brne	.-8      	; 0x1f52 <_ZN8TiltBall12TiltBallTaskEv+0x72>
    1f5a:	67 ec       	ldi	r22, 0xC7	; 199
    1f5c:	75 e0       	ldi	r23, 0x05	; 5
    1f5e:	88 81       	ld	r24, Y
    1f60:	99 81       	ldd	r25, Y+1	; 0x01
    1f62:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
		}
		DBG(this->p_serial, "tilted.\r\n");
    1f66:	8a e0       	ldi	r24, 0x0A	; 10
    1f68:	e5 e8       	ldi	r30, 0x85	; 133
    1f6a:	f5 e0       	ldi	r31, 0x05	; 5
    1f6c:	a7 ec       	ldi	r26, 0xC7	; 199
    1f6e:	b5 e0       	ldi	r27, 0x05	; 5
    1f70:	01 90       	ld	r0, Z+
    1f72:	0d 92       	st	X+, r0
    1f74:	8a 95       	dec	r24
    1f76:	e1 f7       	brne	.-8      	; 0x1f70 <_ZN8TiltBall12TiltBallTaskEv+0x90>
    1f78:	67 ec       	ldi	r22, 0xC7	; 199
    1f7a:	75 e0       	ldi	r23, 0x05	; 5
    1f7c:	88 81       	ld	r24, Y
    1f7e:	99 81       	ldd	r25, Y+1	; 0x01
    1f80:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
	}
	
	runs++;
    1f84:	80 91 c8 06 	lds	r24, 0x06C8
    1f88:	8f 5f       	subi	r24, 0xFF	; 255
    1f8a:	80 93 c8 06 	sts	0x06C8, r24
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	08 95       	ret

00001f94 <_ZN7UVIndex4initEv>:
 *				Converter (ADC) to use a prescaler of 128 with no auto trigger
 *				and a gain of 1X
 ****************************************************************************/
void UVIndex::init (void)
{
	ADCSRA = 0x87;	//Turn On ADC and set prescaler (CLK/128)
    1f94:	87 e8       	ldi	r24, 0x87	; 135
    1f96:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0x00;	//Set gain & turn off auto trigger
    1f9a:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x00;   //Set ADC channel ADC0 with 1X gain
    1f9e:	10 92 7c 00 	sts	0x007C, r1
    1fa2:	08 95       	ret

00001fa4 <_ZN7UVIndexC1EP6serialh>:
 * Parameters:	ptr_serial	- pointer to serial object for debugging
 *				pin			- the pin to be associated with the enable pin
 ****************************************************************************/
UVIndex::UVIndex (serial *ptr_serial, uint8_t pin)
{
	p_serial = ptr_serial;
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	71 83       	std	Z+1, r23	; 0x01
    1fa8:	60 83       	st	Z, r22
	enable_pin = pin;
    1faa:	42 83       	std	Z+2, r20	; 0x02
	
	init();	
    1fac:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <_ZN7UVIndex4initEv>
    1fb0:	08 95       	ret

00001fb2 <_ZN7UVIndex6enableEv>:
 *				sensor
 ****************************************************************************/
void UVIndex::enable (void)
{
	// set enable pin high
	UV_EN_PORT |= (1 << enable_pin);
    1fb2:	6b b1       	in	r22, 0x0b	; 11
    1fb4:	21 e0       	ldi	r18, 0x01	; 1
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	a9 01       	movw	r20, r18
    1fba:	fc 01       	movw	r30, r24
    1fbc:	02 80       	ldd	r0, Z+2	; 0x02
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <_ZN7UVIndex6enableEv+0x12>
    1fc0:	44 0f       	add	r20, r20
    1fc2:	55 1f       	adc	r21, r21
    1fc4:	0a 94       	dec	r0
    1fc6:	e2 f7       	brpl	.-8      	; 0x1fc0 <_ZN7UVIndex6enableEv+0xe>
    1fc8:	46 2b       	or	r20, r22
    1fca:	4b b9       	out	0x0b, r20	; 11
	OUTPUT(UV_EN_DDR, enable_pin);
    1fcc:	4a b1       	in	r20, 0x0a	; 10
    1fce:	02 80       	ldd	r0, Z+2	; 0x02
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <_ZN7UVIndex6enableEv+0x24>
    1fd2:	22 0f       	add	r18, r18
    1fd4:	33 1f       	adc	r19, r19
    1fd6:	0a 94       	dec	r0
    1fd8:	e2 f7       	brpl	.-8      	; 0x1fd2 <_ZN7UVIndex6enableEv+0x20>
    1fda:	24 2b       	or	r18, r20
    1fdc:	2a b9       	out	0x0a, r18	; 10
    1fde:	08 95       	ret

00001fe0 <_ZN7UVIndex7disableEv>:
 * Method:		disable
 * Description:	This method sets the enable pin to low to disable the UVIndex
 *				sensor
 ****************************************************************************/
void UVIndex::disable (void)
{
    1fe0:	fc 01       	movw	r30, r24
	// set enable pin low
	UV_EN_PORT &= ~(1 << enable_pin);
    1fe2:	4b b1       	in	r20, 0x0b	; 11
    1fe4:	21 e0       	ldi	r18, 0x01	; 1
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	b9 01       	movw	r22, r18
    1fea:	02 80       	ldd	r0, Z+2	; 0x02
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <_ZN7UVIndex7disableEv+0x12>
    1fee:	66 0f       	add	r22, r22
    1ff0:	77 1f       	adc	r23, r23
    1ff2:	0a 94       	dec	r0
    1ff4:	e2 f7       	brpl	.-8      	; 0x1fee <_ZN7UVIndex7disableEv+0xe>
    1ff6:	96 2f       	mov	r25, r22
    1ff8:	90 95       	com	r25
    1ffa:	94 23       	and	r25, r20
    1ffc:	9b b9       	out	0x0b, r25	; 11
	OUTPUT(UV_EN_DDR, enable_pin);
    1ffe:	8a b1       	in	r24, 0x0a	; 10
    2000:	02 80       	ldd	r0, Z+2	; 0x02
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <_ZN7UVIndex7disableEv+0x28>
    2004:	22 0f       	add	r18, r18
    2006:	33 1f       	adc	r19, r19
    2008:	0a 94       	dec	r0
    200a:	e2 f7       	brpl	.-8      	; 0x2004 <_ZN7UVIndex7disableEv+0x24>
    200c:	28 2b       	or	r18, r24
    200e:	2a b9       	out	0x0a, r18	; 10
    2010:	08 95       	ret

00002012 <_ZN7UVIndex4readEv>:
 *
 * Return:		int16_t - the digital value of the analog read of the UV Index
 *					where a value of 302 is equivalent to 3.02
 ****************************************************************************/
int16_t UVIndex::read (void)
{
    2012:	0f 93       	push	r16
    2014:	1f 93       	push	r17
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	ec 01       	movw	r28, r24
	int16_t value;
	
	enable();
    201c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <_ZN7UVIndex6enableEv>
    2020:	8f e9       	ldi	r24, 0x9F	; 159
    2022:	9f e0       	ldi	r25, 0x0F	; 15
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <_ZN7UVIndex4readEv+0x12>
    2028:	00 c0       	rjmp	.+0      	; 0x202a <_ZN7UVIndex4readEv+0x18>
    202a:	00 00       	nop
	
	// stabilization period
	_delay_ms(1);
	
	// start conversion
	ADCSRA = 0xC7;
    202c:	87 ec       	ldi	r24, 0xC7	; 199
    202e:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2032:	8f e0       	ldi	r24, 0x0F	; 15
    2034:	94 e0       	ldi	r25, 0x04	; 4
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	f1 f7       	brne	.-4      	; 0x2036 <_ZN7UVIndex4readEv+0x24>
    203a:	00 c0       	rjmp	.+0      	; 0x203c <_ZN7UVIndex4readEv+0x2a>
    203c:	00 00       	nop
	
	// wait for conversion to finish
	_delay_us(260);
	
	value = ADC & 0x3FF;
    203e:	00 91 78 00 	lds	r16, 0x0078
    2042:	10 91 79 00 	lds	r17, 0x0079
	
	disable();
    2046:	ce 01       	movw	r24, r28
    2048:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <_ZN7UVIndex7disableEv>
	
	return value;
}
    204c:	c8 01       	movw	r24, r16
    204e:	93 70       	andi	r25, 0x03	; 3
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	1f 91       	pop	r17
    2056:	0f 91       	pop	r16
    2058:	08 95       	ret

0000205a <_ZN7UVIndex11UVIndexTaskEv>:
 * Description:	This method is run once every loop of the main control and 
 *				triggers the sensor to take a reading and store the value so
 *				it can be used by other objects.
 ****************************************************************************/
void UVIndex::UVIndexTask (void)
{
    205a:	0f 93       	push	r16
    205c:	1f 93       	push	r17
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
    2062:	ec 01       	movw	r28, r24
	static uint8_t runs  = 0;
	
	if ((runs % 5) == 0)
    2064:	20 91 c9 06 	lds	r18, 0x06C9
    2068:	9d ec       	ldi	r25, 0xCD	; 205
    206a:	29 9f       	mul	r18, r25
    206c:	91 2d       	mov	r25, r1
    206e:	11 24       	eor	r1, r1
    2070:	96 95       	lsr	r25
    2072:	96 95       	lsr	r25
    2074:	89 2f       	mov	r24, r25
    2076:	88 0f       	add	r24, r24
    2078:	88 0f       	add	r24, r24
    207a:	98 0f       	add	r25, r24
    207c:	29 13       	cpse	r18, r25
    207e:	27 c0       	rjmp	.+78     	; 0x20ce <_ZN7UVIndex11UVIndexTaskEv+0x74>
	{
		DBG(this->p_serial, "\r\nUVIndex Task Running\r\n")
    2080:	07 ec       	ldi	r16, 0xC7	; 199
    2082:	15 e0       	ldi	r17, 0x05	; 5
    2084:	89 e1       	ldi	r24, 0x19	; 25
    2086:	ef e8       	ldi	r30, 0x8F	; 143
    2088:	f5 e0       	ldi	r31, 0x05	; 5
    208a:	d8 01       	movw	r26, r16
    208c:	01 90       	ld	r0, Z+
    208e:	0d 92       	st	X+, r0
    2090:	8a 95       	dec	r24
    2092:	e1 f7       	brne	.-8      	; 0x208c <_ZN7UVIndex11UVIndexTaskEv+0x32>
    2094:	b8 01       	movw	r22, r16
    2096:	88 81       	ld	r24, Y
    2098:	99 81       	ldd	r25, Y+1	; 0x01
    209a:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
		DBG(this->p_serial, "UV Index reading: %d\r\n", read());
    209e:	ce 01       	movw	r24, r28
    20a0:	0e 94 09 10 	call	0x2012	; 0x2012 <_ZN7UVIndex4readEv>
    20a4:	9f 93       	push	r25
    20a6:	8f 93       	push	r24
    20a8:	88 ea       	ldi	r24, 0xA8	; 168
    20aa:	95 e0       	ldi	r25, 0x05	; 5
    20ac:	9f 93       	push	r25
    20ae:	8f 93       	push	r24
    20b0:	1f 93       	push	r17
    20b2:	0f 93       	push	r16
    20b4:	0e 94 91 12 	call	0x2522	; 0x2522 <sprintf>
    20b8:	b8 01       	movw	r22, r16
    20ba:	88 81       	ld	r24, Y
    20bc:	99 81       	ldd	r25, Y+1	; 0x01
    20be:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN6serial4sendEPc>
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
	}
	
	runs++;
    20ce:	80 91 c9 06 	lds	r24, 0x06C9
    20d2:	8f 5f       	subi	r24, 0xFF	; 255
    20d4:	80 93 c9 06 	sts	0x06C9, r24
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	08 95       	ret

000020e2 <__mulsi3>:
    20e2:	db 01       	movw	r26, r22
    20e4:	8f 93       	push	r24
    20e6:	9f 93       	push	r25
    20e8:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__muluhisi3>
    20ec:	bf 91       	pop	r27
    20ee:	af 91       	pop	r26
    20f0:	a2 9f       	mul	r26, r18
    20f2:	80 0d       	add	r24, r0
    20f4:	91 1d       	adc	r25, r1
    20f6:	a3 9f       	mul	r26, r19
    20f8:	90 0d       	add	r25, r0
    20fa:	b2 9f       	mul	r27, r18
    20fc:	90 0d       	add	r25, r0
    20fe:	11 24       	eor	r1, r1
    2100:	08 95       	ret

00002102 <__divmodhi4>:
    2102:	97 fb       	bst	r25, 7
    2104:	07 2e       	mov	r0, r23
    2106:	16 f4       	brtc	.+4      	; 0x210c <__divmodhi4+0xa>
    2108:	00 94       	com	r0
    210a:	07 d0       	rcall	.+14     	; 0x211a <__divmodhi4_neg1>
    210c:	77 fd       	sbrc	r23, 7
    210e:	09 d0       	rcall	.+18     	; 0x2122 <__divmodhi4_neg2>
    2110:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__udivmodhi4>
    2114:	07 fc       	sbrc	r0, 7
    2116:	05 d0       	rcall	.+10     	; 0x2122 <__divmodhi4_neg2>
    2118:	3e f4       	brtc	.+14     	; 0x2128 <__divmodhi4_exit>

0000211a <__divmodhi4_neg1>:
    211a:	90 95       	com	r25
    211c:	81 95       	neg	r24
    211e:	9f 4f       	sbci	r25, 0xFF	; 255
    2120:	08 95       	ret

00002122 <__divmodhi4_neg2>:
    2122:	70 95       	com	r23
    2124:	61 95       	neg	r22
    2126:	7f 4f       	sbci	r23, 0xFF	; 255

00002128 <__divmodhi4_exit>:
    2128:	08 95       	ret

0000212a <__udivmodsi4>:
    212a:	a1 e2       	ldi	r26, 0x21	; 33
    212c:	1a 2e       	mov	r1, r26
    212e:	aa 1b       	sub	r26, r26
    2130:	bb 1b       	sub	r27, r27
    2132:	fd 01       	movw	r30, r26
    2134:	0d c0       	rjmp	.+26     	; 0x2150 <__udivmodsi4_ep>

00002136 <__udivmodsi4_loop>:
    2136:	aa 1f       	adc	r26, r26
    2138:	bb 1f       	adc	r27, r27
    213a:	ee 1f       	adc	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	a2 17       	cp	r26, r18
    2140:	b3 07       	cpc	r27, r19
    2142:	e4 07       	cpc	r30, r20
    2144:	f5 07       	cpc	r31, r21
    2146:	20 f0       	brcs	.+8      	; 0x2150 <__udivmodsi4_ep>
    2148:	a2 1b       	sub	r26, r18
    214a:	b3 0b       	sbc	r27, r19
    214c:	e4 0b       	sbc	r30, r20
    214e:	f5 0b       	sbc	r31, r21

00002150 <__udivmodsi4_ep>:
    2150:	66 1f       	adc	r22, r22
    2152:	77 1f       	adc	r23, r23
    2154:	88 1f       	adc	r24, r24
    2156:	99 1f       	adc	r25, r25
    2158:	1a 94       	dec	r1
    215a:	69 f7       	brne	.-38     	; 0x2136 <__udivmodsi4_loop>
    215c:	60 95       	com	r22
    215e:	70 95       	com	r23
    2160:	80 95       	com	r24
    2162:	90 95       	com	r25
    2164:	9b 01       	movw	r18, r22
    2166:	ac 01       	movw	r20, r24
    2168:	bd 01       	movw	r22, r26
    216a:	cf 01       	movw	r24, r30
    216c:	08 95       	ret

0000216e <__divmodsi4>:
    216e:	05 2e       	mov	r0, r21
    2170:	97 fb       	bst	r25, 7
    2172:	1e f4       	brtc	.+6      	; 0x217a <__divmodsi4+0xc>
    2174:	00 94       	com	r0
    2176:	0e 94 ce 10 	call	0x219c	; 0x219c <__negsi2>
    217a:	57 fd       	sbrc	r21, 7
    217c:	07 d0       	rcall	.+14     	; 0x218c <__divmodsi4_neg2>
    217e:	0e 94 95 10 	call	0x212a	; 0x212a <__udivmodsi4>
    2182:	07 fc       	sbrc	r0, 7
    2184:	03 d0       	rcall	.+6      	; 0x218c <__divmodsi4_neg2>
    2186:	4e f4       	brtc	.+18     	; 0x219a <__divmodsi4_exit>
    2188:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__negsi2>

0000218c <__divmodsi4_neg2>:
    218c:	50 95       	com	r21
    218e:	40 95       	com	r20
    2190:	30 95       	com	r19
    2192:	21 95       	neg	r18
    2194:	3f 4f       	sbci	r19, 0xFF	; 255
    2196:	4f 4f       	sbci	r20, 0xFF	; 255
    2198:	5f 4f       	sbci	r21, 0xFF	; 255

0000219a <__divmodsi4_exit>:
    219a:	08 95       	ret

0000219c <__negsi2>:
    219c:	90 95       	com	r25
    219e:	80 95       	com	r24
    21a0:	70 95       	com	r23
    21a2:	61 95       	neg	r22
    21a4:	7f 4f       	sbci	r23, 0xFF	; 255
    21a6:	8f 4f       	sbci	r24, 0xFF	; 255
    21a8:	9f 4f       	sbci	r25, 0xFF	; 255
    21aa:	08 95       	ret

000021ac <__muluhisi3>:
    21ac:	0e 94 82 12 	call	0x2504	; 0x2504 <__umulhisi3>
    21b0:	a5 9f       	mul	r26, r21
    21b2:	90 0d       	add	r25, r0
    21b4:	b4 9f       	mul	r27, r20
    21b6:	90 0d       	add	r25, r0
    21b8:	a4 9f       	mul	r26, r20
    21ba:	80 0d       	add	r24, r0
    21bc:	91 1d       	adc	r25, r1
    21be:	11 24       	eor	r1, r1
    21c0:	08 95       	ret

000021c2 <__mulshisi3>:
    21c2:	b7 ff       	sbrs	r27, 7
    21c4:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__muluhisi3>

000021c8 <__mulohisi3>:
    21c8:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__muluhisi3>
    21cc:	82 1b       	sub	r24, r18
    21ce:	93 0b       	sbc	r25, r19
    21d0:	08 95       	ret

000021d2 <__muldi3>:
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	1f 93       	push	r17
    21d8:	0f 93       	push	r16
    21da:	9a 9d       	mul	r25, r10
    21dc:	f0 2d       	mov	r31, r0
    21de:	21 9f       	mul	r18, r17
    21e0:	f0 0d       	add	r31, r0
    21e2:	8b 9d       	mul	r24, r11
    21e4:	f0 0d       	add	r31, r0
    21e6:	8a 9d       	mul	r24, r10
    21e8:	e0 2d       	mov	r30, r0
    21ea:	f1 0d       	add	r31, r1
    21ec:	03 9f       	mul	r16, r19
    21ee:	f0 0d       	add	r31, r0
    21f0:	02 9f       	mul	r16, r18
    21f2:	e0 0d       	add	r30, r0
    21f4:	f1 1d       	adc	r31, r1
    21f6:	4e 9d       	mul	r20, r14
    21f8:	e0 0d       	add	r30, r0
    21fa:	f1 1d       	adc	r31, r1
    21fc:	5e 9d       	mul	r21, r14
    21fe:	f0 0d       	add	r31, r0
    2200:	4f 9d       	mul	r20, r15
    2202:	f0 0d       	add	r31, r0
    2204:	7f 93       	push	r23
    2206:	6f 93       	push	r22
    2208:	bf 92       	push	r11
    220a:	af 92       	push	r10
    220c:	5f 93       	push	r21
    220e:	4f 93       	push	r20
    2210:	d5 01       	movw	r26, r10
    2212:	0e 94 82 12 	call	0x2504	; 0x2504 <__umulhisi3>
    2216:	8b 01       	movw	r16, r22
    2218:	ac 01       	movw	r20, r24
    221a:	d7 01       	movw	r26, r14
    221c:	0e 94 82 12 	call	0x2504	; 0x2504 <__umulhisi3>
    2220:	eb 01       	movw	r28, r22
    2222:	e8 0f       	add	r30, r24
    2224:	f9 1f       	adc	r31, r25
    2226:	d6 01       	movw	r26, r12
    2228:	0e 94 39 11 	call	0x2272	; 0x2272 <__muldi3_6>
    222c:	2f 91       	pop	r18
    222e:	3f 91       	pop	r19
    2230:	d6 01       	movw	r26, r12
    2232:	0e 94 82 12 	call	0x2504	; 0x2504 <__umulhisi3>
    2236:	c6 0f       	add	r28, r22
    2238:	d7 1f       	adc	r29, r23
    223a:	e8 1f       	adc	r30, r24
    223c:	f9 1f       	adc	r31, r25
    223e:	af 91       	pop	r26
    2240:	bf 91       	pop	r27
    2242:	0e 94 39 11 	call	0x2272	; 0x2272 <__muldi3_6>
    2246:	2f 91       	pop	r18
    2248:	3f 91       	pop	r19
    224a:	0e 94 82 12 	call	0x2504	; 0x2504 <__umulhisi3>
    224e:	c6 0f       	add	r28, r22
    2250:	d7 1f       	adc	r29, r23
    2252:	e8 1f       	adc	r30, r24
    2254:	f9 1f       	adc	r31, r25
    2256:	d6 01       	movw	r26, r12
    2258:	0e 94 82 12 	call	0x2504	; 0x2504 <__umulhisi3>
    225c:	e6 0f       	add	r30, r22
    225e:	f7 1f       	adc	r31, r23
    2260:	98 01       	movw	r18, r16
    2262:	be 01       	movw	r22, r28
    2264:	cf 01       	movw	r24, r30
    2266:	11 24       	eor	r1, r1
    2268:	0f 91       	pop	r16
    226a:	1f 91       	pop	r17
    226c:	cf 91       	pop	r28
    226e:	df 91       	pop	r29
    2270:	08 95       	ret

00002272 <__muldi3_6>:
    2272:	0e 94 82 12 	call	0x2504	; 0x2504 <__umulhisi3>
    2276:	46 0f       	add	r20, r22
    2278:	57 1f       	adc	r21, r23
    227a:	c8 1f       	adc	r28, r24
    227c:	d9 1f       	adc	r29, r25
    227e:	08 f4       	brcc	.+2      	; 0x2282 <__muldi3_6+0x10>
    2280:	31 96       	adiw	r30, 0x01	; 1
    2282:	08 95       	ret

00002284 <__moddi3>:
    2284:	68 94       	set
    2286:	01 c0       	rjmp	.+2      	; 0x228a <__divdi3_moddi3>

00002288 <__divdi3>:
    2288:	e8 94       	clt

0000228a <__divdi3_moddi3>:
    228a:	f9 2f       	mov	r31, r25
    228c:	f1 2b       	or	r31, r17
    228e:	12 f0       	brmi	.+4      	; 0x2294 <__divdi3_moddi3+0xa>
    2290:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <__udivdi3_umoddi3>
    2294:	a0 e0       	ldi	r26, 0x00	; 0
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e0 e5       	ldi	r30, 0x50	; 80
    229a:	f1 e1       	ldi	r31, 0x11	; 17
    229c:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__prologue_saves__+0xc>
    22a0:	09 2e       	mov	r0, r25
    22a2:	05 94       	asr	r0
    22a4:	22 f4       	brpl	.+8      	; 0x22ae <__divdi3_moddi3+0x24>
    22a6:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__negdi2>
    22aa:	11 23       	and	r17, r17
    22ac:	92 f4       	brpl	.+36     	; 0x22d2 <__divdi3_moddi3+0x48>
    22ae:	f0 e8       	ldi	r31, 0x80	; 128
    22b0:	0f 26       	eor	r0, r31
    22b2:	ff ef       	ldi	r31, 0xFF	; 255
    22b4:	e0 94       	com	r14
    22b6:	f0 94       	com	r15
    22b8:	00 95       	com	r16
    22ba:	10 95       	com	r17
    22bc:	b0 94       	com	r11
    22be:	c0 94       	com	r12
    22c0:	d0 94       	com	r13
    22c2:	a1 94       	neg	r10
    22c4:	bf 0a       	sbc	r11, r31
    22c6:	cf 0a       	sbc	r12, r31
    22c8:	df 0a       	sbc	r13, r31
    22ca:	ef 0a       	sbc	r14, r31
    22cc:	ff 0a       	sbc	r15, r31
    22ce:	0f 0b       	sbc	r16, r31
    22d0:	1f 0b       	sbc	r17, r31
    22d2:	0e 94 81 11 	call	0x2302	; 0x2302 <__udivmod64>
    22d6:	07 fc       	sbrc	r0, 7
    22d8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__negdi2>
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	ec e0       	ldi	r30, 0x0C	; 12
    22e2:	0c 94 04 12 	jmp	0x2408	; 0x2408 <__epilogue_restores__+0xc>

000022e6 <__umoddi3>:
    22e6:	68 94       	set
    22e8:	01 c0       	rjmp	.+2      	; 0x22ec <__udivdi3_umoddi3>

000022ea <__udivdi3>:
    22ea:	e8 94       	clt

000022ec <__udivdi3_umoddi3>:
    22ec:	8f 92       	push	r8
    22ee:	9f 92       	push	r9
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	0e 94 81 11 	call	0x2302	; 0x2302 <__udivmod64>
    22f8:	df 91       	pop	r29
    22fa:	cf 91       	pop	r28
    22fc:	9f 90       	pop	r9
    22fe:	8f 90       	pop	r8
    2300:	08 95       	ret

00002302 <__udivmod64>:
    2302:	88 24       	eor	r8, r8
    2304:	99 24       	eor	r9, r9
    2306:	f4 01       	movw	r30, r8
    2308:	e4 01       	movw	r28, r8
    230a:	b0 e4       	ldi	r27, 0x40	; 64
    230c:	9f 93       	push	r25
    230e:	aa 27       	eor	r26, r26
    2310:	9a 15       	cp	r25, r10
    2312:	8b 04       	cpc	r8, r11
    2314:	9c 04       	cpc	r9, r12
    2316:	ed 05       	cpc	r30, r13
    2318:	fe 05       	cpc	r31, r14
    231a:	cf 05       	cpc	r28, r15
    231c:	d0 07       	cpc	r29, r16
    231e:	a1 07       	cpc	r26, r17
    2320:	98 f4       	brcc	.+38     	; 0x2348 <__udivmod64+0x46>
    2322:	ad 2f       	mov	r26, r29
    2324:	dc 2f       	mov	r29, r28
    2326:	cf 2f       	mov	r28, r31
    2328:	fe 2f       	mov	r31, r30
    232a:	e9 2d       	mov	r30, r9
    232c:	98 2c       	mov	r9, r8
    232e:	89 2e       	mov	r8, r25
    2330:	98 2f       	mov	r25, r24
    2332:	87 2f       	mov	r24, r23
    2334:	76 2f       	mov	r23, r22
    2336:	65 2f       	mov	r22, r21
    2338:	54 2f       	mov	r21, r20
    233a:	43 2f       	mov	r20, r19
    233c:	32 2f       	mov	r19, r18
    233e:	22 27       	eor	r18, r18
    2340:	b8 50       	subi	r27, 0x08	; 8
    2342:	31 f7       	brne	.-52     	; 0x2310 <__udivmod64+0xe>
    2344:	bf 91       	pop	r27
    2346:	27 c0       	rjmp	.+78     	; 0x2396 <__udivmod64+0x94>
    2348:	1b 2e       	mov	r1, r27
    234a:	bf 91       	pop	r27
    234c:	bb 27       	eor	r27, r27
    234e:	22 0f       	add	r18, r18
    2350:	33 1f       	adc	r19, r19
    2352:	44 1f       	adc	r20, r20
    2354:	55 1f       	adc	r21, r21
    2356:	66 1f       	adc	r22, r22
    2358:	77 1f       	adc	r23, r23
    235a:	88 1f       	adc	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	88 1c       	adc	r8, r8
    2360:	99 1c       	adc	r9, r9
    2362:	ee 1f       	adc	r30, r30
    2364:	ff 1f       	adc	r31, r31
    2366:	cc 1f       	adc	r28, r28
    2368:	dd 1f       	adc	r29, r29
    236a:	aa 1f       	adc	r26, r26
    236c:	bb 1f       	adc	r27, r27
    236e:	8a 14       	cp	r8, r10
    2370:	9b 04       	cpc	r9, r11
    2372:	ec 05       	cpc	r30, r12
    2374:	fd 05       	cpc	r31, r13
    2376:	ce 05       	cpc	r28, r14
    2378:	df 05       	cpc	r29, r15
    237a:	a0 07       	cpc	r26, r16
    237c:	b1 07       	cpc	r27, r17
    237e:	48 f0       	brcs	.+18     	; 0x2392 <__udivmod64+0x90>
    2380:	8a 18       	sub	r8, r10
    2382:	9b 08       	sbc	r9, r11
    2384:	ec 09       	sbc	r30, r12
    2386:	fd 09       	sbc	r31, r13
    2388:	ce 09       	sbc	r28, r14
    238a:	df 09       	sbc	r29, r15
    238c:	a0 0b       	sbc	r26, r16
    238e:	b1 0b       	sbc	r27, r17
    2390:	21 60       	ori	r18, 0x01	; 1
    2392:	1a 94       	dec	r1
    2394:	e1 f6       	brne	.-72     	; 0x234e <__udivmod64+0x4c>
    2396:	2e f4       	brtc	.+10     	; 0x23a2 <__udivmod64+0xa0>
    2398:	94 01       	movw	r18, r8
    239a:	af 01       	movw	r20, r30
    239c:	be 01       	movw	r22, r28
    239e:	cd 01       	movw	r24, r26
    23a0:	00 0c       	add	r0, r0
    23a2:	08 95       	ret

000023a4 <__negdi2>:
    23a4:	60 95       	com	r22
    23a6:	70 95       	com	r23
    23a8:	80 95       	com	r24
    23aa:	90 95       	com	r25
    23ac:	30 95       	com	r19
    23ae:	40 95       	com	r20
    23b0:	50 95       	com	r21
    23b2:	21 95       	neg	r18
    23b4:	3f 4f       	sbci	r19, 0xFF	; 255
    23b6:	4f 4f       	sbci	r20, 0xFF	; 255
    23b8:	5f 4f       	sbci	r21, 0xFF	; 255
    23ba:	6f 4f       	sbci	r22, 0xFF	; 255
    23bc:	7f 4f       	sbci	r23, 0xFF	; 255
    23be:	8f 4f       	sbci	r24, 0xFF	; 255
    23c0:	9f 4f       	sbci	r25, 0xFF	; 255
    23c2:	08 95       	ret

000023c4 <__prologue_saves__>:
    23c4:	2f 92       	push	r2
    23c6:	3f 92       	push	r3
    23c8:	4f 92       	push	r4
    23ca:	5f 92       	push	r5
    23cc:	6f 92       	push	r6
    23ce:	7f 92       	push	r7
    23d0:	8f 92       	push	r8
    23d2:	9f 92       	push	r9
    23d4:	af 92       	push	r10
    23d6:	bf 92       	push	r11
    23d8:	cf 92       	push	r12
    23da:	df 92       	push	r13
    23dc:	ef 92       	push	r14
    23de:	ff 92       	push	r15
    23e0:	0f 93       	push	r16
    23e2:	1f 93       	push	r17
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	ca 1b       	sub	r28, r26
    23ee:	db 0b       	sbc	r29, r27
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	f8 94       	cli
    23f4:	de bf       	out	0x3e, r29	; 62
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	cd bf       	out	0x3d, r28	; 61
    23fa:	09 94       	ijmp

000023fc <__epilogue_restores__>:
    23fc:	2a 88       	ldd	r2, Y+18	; 0x12
    23fe:	39 88       	ldd	r3, Y+17	; 0x11
    2400:	48 88       	ldd	r4, Y+16	; 0x10
    2402:	5f 84       	ldd	r5, Y+15	; 0x0f
    2404:	6e 84       	ldd	r6, Y+14	; 0x0e
    2406:	7d 84       	ldd	r7, Y+13	; 0x0d
    2408:	8c 84       	ldd	r8, Y+12	; 0x0c
    240a:	9b 84       	ldd	r9, Y+11	; 0x0b
    240c:	aa 84       	ldd	r10, Y+10	; 0x0a
    240e:	b9 84       	ldd	r11, Y+9	; 0x09
    2410:	c8 84       	ldd	r12, Y+8	; 0x08
    2412:	df 80       	ldd	r13, Y+7	; 0x07
    2414:	ee 80       	ldd	r14, Y+6	; 0x06
    2416:	fd 80       	ldd	r15, Y+5	; 0x05
    2418:	0c 81       	ldd	r16, Y+4	; 0x04
    241a:	1b 81       	ldd	r17, Y+3	; 0x03
    241c:	aa 81       	ldd	r26, Y+2	; 0x02
    241e:	b9 81       	ldd	r27, Y+1	; 0x01
    2420:	ce 0f       	add	r28, r30
    2422:	d1 1d       	adc	r29, r1
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	f8 94       	cli
    2428:	de bf       	out	0x3e, r29	; 62
    242a:	0f be       	out	0x3f, r0	; 63
    242c:	cd bf       	out	0x3d, r28	; 61
    242e:	ed 01       	movw	r28, r26
    2430:	08 95       	ret

00002432 <__ashldi3>:
    2432:	0f 93       	push	r16
    2434:	08 30       	cpi	r16, 0x08	; 8
    2436:	90 f0       	brcs	.+36     	; 0x245c <__ashldi3+0x2a>
    2438:	98 2f       	mov	r25, r24
    243a:	87 2f       	mov	r24, r23
    243c:	76 2f       	mov	r23, r22
    243e:	65 2f       	mov	r22, r21
    2440:	54 2f       	mov	r21, r20
    2442:	43 2f       	mov	r20, r19
    2444:	32 2f       	mov	r19, r18
    2446:	22 27       	eor	r18, r18
    2448:	08 50       	subi	r16, 0x08	; 8
    244a:	f4 cf       	rjmp	.-24     	; 0x2434 <__ashldi3+0x2>
    244c:	22 0f       	add	r18, r18
    244e:	33 1f       	adc	r19, r19
    2450:	44 1f       	adc	r20, r20
    2452:	55 1f       	adc	r21, r21
    2454:	66 1f       	adc	r22, r22
    2456:	77 1f       	adc	r23, r23
    2458:	88 1f       	adc	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	0a 95       	dec	r16
    245e:	b2 f7       	brpl	.-20     	; 0x244c <__ashldi3+0x1a>
    2460:	0f 91       	pop	r16
    2462:	08 95       	ret

00002464 <__ashrdi3>:
    2464:	97 fb       	bst	r25, 7
    2466:	10 f8       	bld	r1, 0

00002468 <__lshrdi3>:
    2468:	16 94       	lsr	r1
    246a:	00 08       	sbc	r0, r0
    246c:	0f 93       	push	r16
    246e:	08 30       	cpi	r16, 0x08	; 8
    2470:	98 f0       	brcs	.+38     	; 0x2498 <__lshrdi3+0x30>
    2472:	08 50       	subi	r16, 0x08	; 8
    2474:	23 2f       	mov	r18, r19
    2476:	34 2f       	mov	r19, r20
    2478:	45 2f       	mov	r20, r21
    247a:	56 2f       	mov	r21, r22
    247c:	67 2f       	mov	r22, r23
    247e:	78 2f       	mov	r23, r24
    2480:	89 2f       	mov	r24, r25
    2482:	90 2d       	mov	r25, r0
    2484:	f4 cf       	rjmp	.-24     	; 0x246e <__lshrdi3+0x6>
    2486:	05 94       	asr	r0
    2488:	97 95       	ror	r25
    248a:	87 95       	ror	r24
    248c:	77 95       	ror	r23
    248e:	67 95       	ror	r22
    2490:	57 95       	ror	r21
    2492:	47 95       	ror	r20
    2494:	37 95       	ror	r19
    2496:	27 95       	ror	r18
    2498:	0a 95       	dec	r16
    249a:	aa f7       	brpl	.-22     	; 0x2486 <__lshrdi3+0x1e>
    249c:	0f 91       	pop	r16
    249e:	08 95       	ret

000024a0 <__adddi3>:
    24a0:	2a 0d       	add	r18, r10
    24a2:	3b 1d       	adc	r19, r11
    24a4:	4c 1d       	adc	r20, r12
    24a6:	5d 1d       	adc	r21, r13
    24a8:	6e 1d       	adc	r22, r14
    24aa:	7f 1d       	adc	r23, r15
    24ac:	80 1f       	adc	r24, r16
    24ae:	91 1f       	adc	r25, r17
    24b0:	08 95       	ret

000024b2 <__subdi3>:
    24b2:	2a 19       	sub	r18, r10
    24b4:	3b 09       	sbc	r19, r11
    24b6:	4c 09       	sbc	r20, r12
    24b8:	5d 09       	sbc	r21, r13
    24ba:	6e 09       	sbc	r22, r14
    24bc:	7f 09       	sbc	r23, r15
    24be:	80 0b       	sbc	r24, r16
    24c0:	91 0b       	sbc	r25, r17
    24c2:	08 95       	ret

000024c4 <__cmpdi2_s8>:
    24c4:	00 24       	eor	r0, r0
    24c6:	a7 fd       	sbrc	r26, 7
    24c8:	00 94       	com	r0
    24ca:	2a 17       	cp	r18, r26
    24cc:	30 05       	cpc	r19, r0
    24ce:	40 05       	cpc	r20, r0
    24d0:	50 05       	cpc	r21, r0
    24d2:	60 05       	cpc	r22, r0
    24d4:	70 05       	cpc	r23, r0
    24d6:	80 05       	cpc	r24, r0
    24d8:	90 05       	cpc	r25, r0
    24da:	08 95       	ret

000024dc <__udivmodhi4>:
    24dc:	aa 1b       	sub	r26, r26
    24de:	bb 1b       	sub	r27, r27
    24e0:	51 e1       	ldi	r21, 0x11	; 17
    24e2:	07 c0       	rjmp	.+14     	; 0x24f2 <__udivmodhi4_ep>

000024e4 <__udivmodhi4_loop>:
    24e4:	aa 1f       	adc	r26, r26
    24e6:	bb 1f       	adc	r27, r27
    24e8:	a6 17       	cp	r26, r22
    24ea:	b7 07       	cpc	r27, r23
    24ec:	10 f0       	brcs	.+4      	; 0x24f2 <__udivmodhi4_ep>
    24ee:	a6 1b       	sub	r26, r22
    24f0:	b7 0b       	sbc	r27, r23

000024f2 <__udivmodhi4_ep>:
    24f2:	88 1f       	adc	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	5a 95       	dec	r21
    24f8:	a9 f7       	brne	.-22     	; 0x24e4 <__udivmodhi4_loop>
    24fa:	80 95       	com	r24
    24fc:	90 95       	com	r25
    24fe:	bc 01       	movw	r22, r24
    2500:	cd 01       	movw	r24, r26
    2502:	08 95       	ret

00002504 <__umulhisi3>:
    2504:	a2 9f       	mul	r26, r18
    2506:	b0 01       	movw	r22, r0
    2508:	b3 9f       	mul	r27, r19
    250a:	c0 01       	movw	r24, r0
    250c:	a3 9f       	mul	r26, r19
    250e:	70 0d       	add	r23, r0
    2510:	81 1d       	adc	r24, r1
    2512:	11 24       	eor	r1, r1
    2514:	91 1d       	adc	r25, r1
    2516:	b2 9f       	mul	r27, r18
    2518:	70 0d       	add	r23, r0
    251a:	81 1d       	adc	r24, r1
    251c:	11 24       	eor	r1, r1
    251e:	91 1d       	adc	r25, r1
    2520:	08 95       	ret

00002522 <sprintf>:
    2522:	ae e0       	ldi	r26, 0x0E	; 14
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e7 e9       	ldi	r30, 0x97	; 151
    2528:	f2 e1       	ldi	r31, 0x12	; 18
    252a:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__prologue_saves__+0x1c>
    252e:	0d 89       	ldd	r16, Y+21	; 0x15
    2530:	1e 89       	ldd	r17, Y+22	; 0x16
    2532:	86 e0       	ldi	r24, 0x06	; 6
    2534:	8c 83       	std	Y+4, r24	; 0x04
    2536:	1a 83       	std	Y+2, r17	; 0x02
    2538:	09 83       	std	Y+1, r16	; 0x01
    253a:	8f ef       	ldi	r24, 0xFF	; 255
    253c:	9f e7       	ldi	r25, 0x7F	; 127
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
    2542:	ae 01       	movw	r20, r28
    2544:	47 5e       	subi	r20, 0xE7	; 231
    2546:	5f 4f       	sbci	r21, 0xFF	; 255
    2548:	6f 89       	ldd	r22, Y+23	; 0x17
    254a:	78 8d       	ldd	r23, Y+24	; 0x18
    254c:	ce 01       	movw	r24, r28
    254e:	01 96       	adiw	r24, 0x01	; 1
    2550:	0e 94 b4 12 	call	0x2568	; 0x2568 <vfprintf>
    2554:	2f 81       	ldd	r18, Y+7	; 0x07
    2556:	38 85       	ldd	r19, Y+8	; 0x08
    2558:	f8 01       	movw	r30, r16
    255a:	e2 0f       	add	r30, r18
    255c:	f3 1f       	adc	r31, r19
    255e:	10 82       	st	Z, r1
    2560:	2e 96       	adiw	r28, 0x0e	; 14
    2562:	e4 e0       	ldi	r30, 0x04	; 4
    2564:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__epilogue_restores__+0x1c>

00002568 <vfprintf>:
    2568:	ac e0       	ldi	r26, 0x0C	; 12
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	ea eb       	ldi	r30, 0xBA	; 186
    256e:	f2 e1       	ldi	r31, 0x12	; 18
    2570:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__>
    2574:	7c 01       	movw	r14, r24
    2576:	6b 01       	movw	r12, r22
    2578:	8a 01       	movw	r16, r20
    257a:	fc 01       	movw	r30, r24
    257c:	17 82       	std	Z+7, r1	; 0x07
    257e:	16 82       	std	Z+6, r1	; 0x06
    2580:	83 81       	ldd	r24, Z+3	; 0x03
    2582:	81 ff       	sbrs	r24, 1
    2584:	bd c1       	rjmp	.+890    	; 0x2900 <vfprintf+0x398>
    2586:	ce 01       	movw	r24, r28
    2588:	01 96       	adiw	r24, 0x01	; 1
    258a:	4c 01       	movw	r8, r24
    258c:	f7 01       	movw	r30, r14
    258e:	93 81       	ldd	r25, Z+3	; 0x03
    2590:	f6 01       	movw	r30, r12
    2592:	93 fd       	sbrc	r25, 3
    2594:	85 91       	lpm	r24, Z+
    2596:	93 ff       	sbrs	r25, 3
    2598:	81 91       	ld	r24, Z+
    259a:	6f 01       	movw	r12, r30
    259c:	88 23       	and	r24, r24
    259e:	09 f4       	brne	.+2      	; 0x25a2 <vfprintf+0x3a>
    25a0:	ab c1       	rjmp	.+854    	; 0x28f8 <vfprintf+0x390>
    25a2:	85 32       	cpi	r24, 0x25	; 37
    25a4:	39 f4       	brne	.+14     	; 0x25b4 <vfprintf+0x4c>
    25a6:	93 fd       	sbrc	r25, 3
    25a8:	85 91       	lpm	r24, Z+
    25aa:	93 ff       	sbrs	r25, 3
    25ac:	81 91       	ld	r24, Z+
    25ae:	6f 01       	movw	r12, r30
    25b0:	85 32       	cpi	r24, 0x25	; 37
    25b2:	29 f4       	brne	.+10     	; 0x25be <vfprintf+0x56>
    25b4:	b7 01       	movw	r22, r14
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	0e 94 9c 14 	call	0x2938	; 0x2938 <fputc>
    25bc:	e7 cf       	rjmp	.-50     	; 0x258c <vfprintf+0x24>
    25be:	51 2c       	mov	r5, r1
    25c0:	31 2c       	mov	r3, r1
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	20 32       	cpi	r18, 0x20	; 32
    25c6:	a0 f4       	brcc	.+40     	; 0x25f0 <vfprintf+0x88>
    25c8:	8b 32       	cpi	r24, 0x2B	; 43
    25ca:	69 f0       	breq	.+26     	; 0x25e6 <vfprintf+0x7e>
    25cc:	30 f4       	brcc	.+12     	; 0x25da <vfprintf+0x72>
    25ce:	80 32       	cpi	r24, 0x20	; 32
    25d0:	59 f0       	breq	.+22     	; 0x25e8 <vfprintf+0x80>
    25d2:	83 32       	cpi	r24, 0x23	; 35
    25d4:	69 f4       	brne	.+26     	; 0x25f0 <vfprintf+0x88>
    25d6:	20 61       	ori	r18, 0x10	; 16
    25d8:	2c c0       	rjmp	.+88     	; 0x2632 <vfprintf+0xca>
    25da:	8d 32       	cpi	r24, 0x2D	; 45
    25dc:	39 f0       	breq	.+14     	; 0x25ec <vfprintf+0x84>
    25de:	80 33       	cpi	r24, 0x30	; 48
    25e0:	39 f4       	brne	.+14     	; 0x25f0 <vfprintf+0x88>
    25e2:	21 60       	ori	r18, 0x01	; 1
    25e4:	26 c0       	rjmp	.+76     	; 0x2632 <vfprintf+0xca>
    25e6:	22 60       	ori	r18, 0x02	; 2
    25e8:	24 60       	ori	r18, 0x04	; 4
    25ea:	23 c0       	rjmp	.+70     	; 0x2632 <vfprintf+0xca>
    25ec:	28 60       	ori	r18, 0x08	; 8
    25ee:	21 c0       	rjmp	.+66     	; 0x2632 <vfprintf+0xca>
    25f0:	27 fd       	sbrc	r18, 7
    25f2:	27 c0       	rjmp	.+78     	; 0x2642 <vfprintf+0xda>
    25f4:	30 ed       	ldi	r19, 0xD0	; 208
    25f6:	38 0f       	add	r19, r24
    25f8:	3a 30       	cpi	r19, 0x0A	; 10
    25fa:	78 f4       	brcc	.+30     	; 0x261a <vfprintf+0xb2>
    25fc:	26 ff       	sbrs	r18, 6
    25fe:	06 c0       	rjmp	.+12     	; 0x260c <vfprintf+0xa4>
    2600:	fa e0       	ldi	r31, 0x0A	; 10
    2602:	5f 9e       	mul	r5, r31
    2604:	30 0d       	add	r19, r0
    2606:	11 24       	eor	r1, r1
    2608:	53 2e       	mov	r5, r19
    260a:	13 c0       	rjmp	.+38     	; 0x2632 <vfprintf+0xca>
    260c:	8a e0       	ldi	r24, 0x0A	; 10
    260e:	38 9e       	mul	r3, r24
    2610:	30 0d       	add	r19, r0
    2612:	11 24       	eor	r1, r1
    2614:	33 2e       	mov	r3, r19
    2616:	20 62       	ori	r18, 0x20	; 32
    2618:	0c c0       	rjmp	.+24     	; 0x2632 <vfprintf+0xca>
    261a:	8e 32       	cpi	r24, 0x2E	; 46
    261c:	21 f4       	brne	.+8      	; 0x2626 <vfprintf+0xbe>
    261e:	26 fd       	sbrc	r18, 6
    2620:	6b c1       	rjmp	.+726    	; 0x28f8 <vfprintf+0x390>
    2622:	20 64       	ori	r18, 0x40	; 64
    2624:	06 c0       	rjmp	.+12     	; 0x2632 <vfprintf+0xca>
    2626:	8c 36       	cpi	r24, 0x6C	; 108
    2628:	11 f4       	brne	.+4      	; 0x262e <vfprintf+0xc6>
    262a:	20 68       	ori	r18, 0x80	; 128
    262c:	02 c0       	rjmp	.+4      	; 0x2632 <vfprintf+0xca>
    262e:	88 36       	cpi	r24, 0x68	; 104
    2630:	41 f4       	brne	.+16     	; 0x2642 <vfprintf+0xda>
    2632:	f6 01       	movw	r30, r12
    2634:	93 fd       	sbrc	r25, 3
    2636:	85 91       	lpm	r24, Z+
    2638:	93 ff       	sbrs	r25, 3
    263a:	81 91       	ld	r24, Z+
    263c:	6f 01       	movw	r12, r30
    263e:	81 11       	cpse	r24, r1
    2640:	c1 cf       	rjmp	.-126    	; 0x25c4 <vfprintf+0x5c>
    2642:	98 2f       	mov	r25, r24
    2644:	9f 7d       	andi	r25, 0xDF	; 223
    2646:	95 54       	subi	r25, 0x45	; 69
    2648:	93 30       	cpi	r25, 0x03	; 3
    264a:	28 f4       	brcc	.+10     	; 0x2656 <vfprintf+0xee>
    264c:	0c 5f       	subi	r16, 0xFC	; 252
    264e:	1f 4f       	sbci	r17, 0xFF	; 255
    2650:	ff e3       	ldi	r31, 0x3F	; 63
    2652:	f9 83       	std	Y+1, r31	; 0x01
    2654:	0d c0       	rjmp	.+26     	; 0x2670 <vfprintf+0x108>
    2656:	83 36       	cpi	r24, 0x63	; 99
    2658:	31 f0       	breq	.+12     	; 0x2666 <vfprintf+0xfe>
    265a:	83 37       	cpi	r24, 0x73	; 115
    265c:	71 f0       	breq	.+28     	; 0x267a <vfprintf+0x112>
    265e:	83 35       	cpi	r24, 0x53	; 83
    2660:	09 f0       	breq	.+2      	; 0x2664 <vfprintf+0xfc>
    2662:	5b c0       	rjmp	.+182    	; 0x271a <vfprintf+0x1b2>
    2664:	22 c0       	rjmp	.+68     	; 0x26aa <vfprintf+0x142>
    2666:	f8 01       	movw	r30, r16
    2668:	80 81       	ld	r24, Z
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	0e 5f       	subi	r16, 0xFE	; 254
    266e:	1f 4f       	sbci	r17, 0xFF	; 255
    2670:	44 24       	eor	r4, r4
    2672:	43 94       	inc	r4
    2674:	51 2c       	mov	r5, r1
    2676:	54 01       	movw	r10, r8
    2678:	15 c0       	rjmp	.+42     	; 0x26a4 <vfprintf+0x13c>
    267a:	38 01       	movw	r6, r16
    267c:	f2 e0       	ldi	r31, 0x02	; 2
    267e:	6f 0e       	add	r6, r31
    2680:	71 1c       	adc	r7, r1
    2682:	f8 01       	movw	r30, r16
    2684:	a0 80       	ld	r10, Z
    2686:	b1 80       	ldd	r11, Z+1	; 0x01
    2688:	26 ff       	sbrs	r18, 6
    268a:	03 c0       	rjmp	.+6      	; 0x2692 <vfprintf+0x12a>
    268c:	65 2d       	mov	r22, r5
    268e:	70 e0       	ldi	r23, 0x00	; 0
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <vfprintf+0x12e>
    2692:	6f ef       	ldi	r22, 0xFF	; 255
    2694:	7f ef       	ldi	r23, 0xFF	; 255
    2696:	c5 01       	movw	r24, r10
    2698:	2c 87       	std	Y+12, r18	; 0x0c
    269a:	0e 94 91 14 	call	0x2922	; 0x2922 <strnlen>
    269e:	2c 01       	movw	r4, r24
    26a0:	83 01       	movw	r16, r6
    26a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    26a4:	2f 77       	andi	r18, 0x7F	; 127
    26a6:	22 2e       	mov	r2, r18
    26a8:	17 c0       	rjmp	.+46     	; 0x26d8 <vfprintf+0x170>
    26aa:	38 01       	movw	r6, r16
    26ac:	f2 e0       	ldi	r31, 0x02	; 2
    26ae:	6f 0e       	add	r6, r31
    26b0:	71 1c       	adc	r7, r1
    26b2:	f8 01       	movw	r30, r16
    26b4:	a0 80       	ld	r10, Z
    26b6:	b1 80       	ldd	r11, Z+1	; 0x01
    26b8:	26 ff       	sbrs	r18, 6
    26ba:	03 c0       	rjmp	.+6      	; 0x26c2 <vfprintf+0x15a>
    26bc:	65 2d       	mov	r22, r5
    26be:	70 e0       	ldi	r23, 0x00	; 0
    26c0:	02 c0       	rjmp	.+4      	; 0x26c6 <vfprintf+0x15e>
    26c2:	6f ef       	ldi	r22, 0xFF	; 255
    26c4:	7f ef       	ldi	r23, 0xFF	; 255
    26c6:	c5 01       	movw	r24, r10
    26c8:	2c 87       	std	Y+12, r18	; 0x0c
    26ca:	0e 94 86 14 	call	0x290c	; 0x290c <strnlen_P>
    26ce:	2c 01       	movw	r4, r24
    26d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    26d2:	20 68       	ori	r18, 0x80	; 128
    26d4:	22 2e       	mov	r2, r18
    26d6:	83 01       	movw	r16, r6
    26d8:	23 fc       	sbrc	r2, 3
    26da:	1b c0       	rjmp	.+54     	; 0x2712 <vfprintf+0x1aa>
    26dc:	83 2d       	mov	r24, r3
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	48 16       	cp	r4, r24
    26e2:	59 06       	cpc	r5, r25
    26e4:	b0 f4       	brcc	.+44     	; 0x2712 <vfprintf+0x1aa>
    26e6:	b7 01       	movw	r22, r14
    26e8:	80 e2       	ldi	r24, 0x20	; 32
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	0e 94 9c 14 	call	0x2938	; 0x2938 <fputc>
    26f0:	3a 94       	dec	r3
    26f2:	f4 cf       	rjmp	.-24     	; 0x26dc <vfprintf+0x174>
    26f4:	f5 01       	movw	r30, r10
    26f6:	27 fc       	sbrc	r2, 7
    26f8:	85 91       	lpm	r24, Z+
    26fa:	27 fe       	sbrs	r2, 7
    26fc:	81 91       	ld	r24, Z+
    26fe:	5f 01       	movw	r10, r30
    2700:	b7 01       	movw	r22, r14
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	0e 94 9c 14 	call	0x2938	; 0x2938 <fputc>
    2708:	31 10       	cpse	r3, r1
    270a:	3a 94       	dec	r3
    270c:	f1 e0       	ldi	r31, 0x01	; 1
    270e:	4f 1a       	sub	r4, r31
    2710:	51 08       	sbc	r5, r1
    2712:	41 14       	cp	r4, r1
    2714:	51 04       	cpc	r5, r1
    2716:	71 f7       	brne	.-36     	; 0x26f4 <vfprintf+0x18c>
    2718:	e5 c0       	rjmp	.+458    	; 0x28e4 <vfprintf+0x37c>
    271a:	84 36       	cpi	r24, 0x64	; 100
    271c:	11 f0       	breq	.+4      	; 0x2722 <vfprintf+0x1ba>
    271e:	89 36       	cpi	r24, 0x69	; 105
    2720:	39 f5       	brne	.+78     	; 0x2770 <vfprintf+0x208>
    2722:	f8 01       	movw	r30, r16
    2724:	27 ff       	sbrs	r18, 7
    2726:	07 c0       	rjmp	.+14     	; 0x2736 <vfprintf+0x1ce>
    2728:	60 81       	ld	r22, Z
    272a:	71 81       	ldd	r23, Z+1	; 0x01
    272c:	82 81       	ldd	r24, Z+2	; 0x02
    272e:	93 81       	ldd	r25, Z+3	; 0x03
    2730:	0c 5f       	subi	r16, 0xFC	; 252
    2732:	1f 4f       	sbci	r17, 0xFF	; 255
    2734:	08 c0       	rjmp	.+16     	; 0x2746 <vfprintf+0x1de>
    2736:	60 81       	ld	r22, Z
    2738:	71 81       	ldd	r23, Z+1	; 0x01
    273a:	07 2e       	mov	r0, r23
    273c:	00 0c       	add	r0, r0
    273e:	88 0b       	sbc	r24, r24
    2740:	99 0b       	sbc	r25, r25
    2742:	0e 5f       	subi	r16, 0xFE	; 254
    2744:	1f 4f       	sbci	r17, 0xFF	; 255
    2746:	2f 76       	andi	r18, 0x6F	; 111
    2748:	72 2e       	mov	r7, r18
    274a:	97 ff       	sbrs	r25, 7
    274c:	09 c0       	rjmp	.+18     	; 0x2760 <vfprintf+0x1f8>
    274e:	90 95       	com	r25
    2750:	80 95       	com	r24
    2752:	70 95       	com	r23
    2754:	61 95       	neg	r22
    2756:	7f 4f       	sbci	r23, 0xFF	; 255
    2758:	8f 4f       	sbci	r24, 0xFF	; 255
    275a:	9f 4f       	sbci	r25, 0xFF	; 255
    275c:	20 68       	ori	r18, 0x80	; 128
    275e:	72 2e       	mov	r7, r18
    2760:	2a e0       	ldi	r18, 0x0A	; 10
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	a4 01       	movw	r20, r8
    2766:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__ultoa_invert>
    276a:	a8 2e       	mov	r10, r24
    276c:	a8 18       	sub	r10, r8
    276e:	44 c0       	rjmp	.+136    	; 0x27f8 <vfprintf+0x290>
    2770:	85 37       	cpi	r24, 0x75	; 117
    2772:	29 f4       	brne	.+10     	; 0x277e <vfprintf+0x216>
    2774:	2f 7e       	andi	r18, 0xEF	; 239
    2776:	b2 2e       	mov	r11, r18
    2778:	2a e0       	ldi	r18, 0x0A	; 10
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	25 c0       	rjmp	.+74     	; 0x27c8 <vfprintf+0x260>
    277e:	f2 2f       	mov	r31, r18
    2780:	f9 7f       	andi	r31, 0xF9	; 249
    2782:	bf 2e       	mov	r11, r31
    2784:	8f 36       	cpi	r24, 0x6F	; 111
    2786:	c1 f0       	breq	.+48     	; 0x27b8 <vfprintf+0x250>
    2788:	18 f4       	brcc	.+6      	; 0x2790 <vfprintf+0x228>
    278a:	88 35       	cpi	r24, 0x58	; 88
    278c:	79 f0       	breq	.+30     	; 0x27ac <vfprintf+0x244>
    278e:	b4 c0       	rjmp	.+360    	; 0x28f8 <vfprintf+0x390>
    2790:	80 37       	cpi	r24, 0x70	; 112
    2792:	19 f0       	breq	.+6      	; 0x279a <vfprintf+0x232>
    2794:	88 37       	cpi	r24, 0x78	; 120
    2796:	21 f0       	breq	.+8      	; 0x27a0 <vfprintf+0x238>
    2798:	af c0       	rjmp	.+350    	; 0x28f8 <vfprintf+0x390>
    279a:	2f 2f       	mov	r18, r31
    279c:	20 61       	ori	r18, 0x10	; 16
    279e:	b2 2e       	mov	r11, r18
    27a0:	b4 fe       	sbrs	r11, 4
    27a2:	0d c0       	rjmp	.+26     	; 0x27be <vfprintf+0x256>
    27a4:	8b 2d       	mov	r24, r11
    27a6:	84 60       	ori	r24, 0x04	; 4
    27a8:	b8 2e       	mov	r11, r24
    27aa:	09 c0       	rjmp	.+18     	; 0x27be <vfprintf+0x256>
    27ac:	24 ff       	sbrs	r18, 4
    27ae:	0a c0       	rjmp	.+20     	; 0x27c4 <vfprintf+0x25c>
    27b0:	9f 2f       	mov	r25, r31
    27b2:	96 60       	ori	r25, 0x06	; 6
    27b4:	b9 2e       	mov	r11, r25
    27b6:	06 c0       	rjmp	.+12     	; 0x27c4 <vfprintf+0x25c>
    27b8:	28 e0       	ldi	r18, 0x08	; 8
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	05 c0       	rjmp	.+10     	; 0x27c8 <vfprintf+0x260>
    27be:	20 e1       	ldi	r18, 0x10	; 16
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <vfprintf+0x260>
    27c4:	20 e1       	ldi	r18, 0x10	; 16
    27c6:	32 e0       	ldi	r19, 0x02	; 2
    27c8:	f8 01       	movw	r30, r16
    27ca:	b7 fe       	sbrs	r11, 7
    27cc:	07 c0       	rjmp	.+14     	; 0x27dc <vfprintf+0x274>
    27ce:	60 81       	ld	r22, Z
    27d0:	71 81       	ldd	r23, Z+1	; 0x01
    27d2:	82 81       	ldd	r24, Z+2	; 0x02
    27d4:	93 81       	ldd	r25, Z+3	; 0x03
    27d6:	0c 5f       	subi	r16, 0xFC	; 252
    27d8:	1f 4f       	sbci	r17, 0xFF	; 255
    27da:	06 c0       	rjmp	.+12     	; 0x27e8 <vfprintf+0x280>
    27dc:	60 81       	ld	r22, Z
    27de:	71 81       	ldd	r23, Z+1	; 0x01
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	0e 5f       	subi	r16, 0xFE	; 254
    27e6:	1f 4f       	sbci	r17, 0xFF	; 255
    27e8:	a4 01       	movw	r20, r8
    27ea:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__ultoa_invert>
    27ee:	a8 2e       	mov	r10, r24
    27f0:	a8 18       	sub	r10, r8
    27f2:	fb 2d       	mov	r31, r11
    27f4:	ff 77       	andi	r31, 0x7F	; 127
    27f6:	7f 2e       	mov	r7, r31
    27f8:	76 fe       	sbrs	r7, 6
    27fa:	0b c0       	rjmp	.+22     	; 0x2812 <vfprintf+0x2aa>
    27fc:	37 2d       	mov	r19, r7
    27fe:	3e 7f       	andi	r19, 0xFE	; 254
    2800:	a5 14       	cp	r10, r5
    2802:	50 f4       	brcc	.+20     	; 0x2818 <vfprintf+0x2b0>
    2804:	74 fe       	sbrs	r7, 4
    2806:	0a c0       	rjmp	.+20     	; 0x281c <vfprintf+0x2b4>
    2808:	72 fc       	sbrc	r7, 2
    280a:	08 c0       	rjmp	.+16     	; 0x281c <vfprintf+0x2b4>
    280c:	37 2d       	mov	r19, r7
    280e:	3e 7e       	andi	r19, 0xEE	; 238
    2810:	05 c0       	rjmp	.+10     	; 0x281c <vfprintf+0x2b4>
    2812:	ba 2c       	mov	r11, r10
    2814:	37 2d       	mov	r19, r7
    2816:	03 c0       	rjmp	.+6      	; 0x281e <vfprintf+0x2b6>
    2818:	ba 2c       	mov	r11, r10
    281a:	01 c0       	rjmp	.+2      	; 0x281e <vfprintf+0x2b6>
    281c:	b5 2c       	mov	r11, r5
    281e:	34 ff       	sbrs	r19, 4
    2820:	0d c0       	rjmp	.+26     	; 0x283c <vfprintf+0x2d4>
    2822:	fe 01       	movw	r30, r28
    2824:	ea 0d       	add	r30, r10
    2826:	f1 1d       	adc	r31, r1
    2828:	80 81       	ld	r24, Z
    282a:	80 33       	cpi	r24, 0x30	; 48
    282c:	11 f4       	brne	.+4      	; 0x2832 <vfprintf+0x2ca>
    282e:	39 7e       	andi	r19, 0xE9	; 233
    2830:	09 c0       	rjmp	.+18     	; 0x2844 <vfprintf+0x2dc>
    2832:	32 ff       	sbrs	r19, 2
    2834:	06 c0       	rjmp	.+12     	; 0x2842 <vfprintf+0x2da>
    2836:	b3 94       	inc	r11
    2838:	b3 94       	inc	r11
    283a:	04 c0       	rjmp	.+8      	; 0x2844 <vfprintf+0x2dc>
    283c:	83 2f       	mov	r24, r19
    283e:	86 78       	andi	r24, 0x86	; 134
    2840:	09 f0       	breq	.+2      	; 0x2844 <vfprintf+0x2dc>
    2842:	b3 94       	inc	r11
    2844:	33 fd       	sbrc	r19, 3
    2846:	13 c0       	rjmp	.+38     	; 0x286e <vfprintf+0x306>
    2848:	30 ff       	sbrs	r19, 0
    284a:	06 c0       	rjmp	.+12     	; 0x2858 <vfprintf+0x2f0>
    284c:	5a 2c       	mov	r5, r10
    284e:	b3 14       	cp	r11, r3
    2850:	18 f4       	brcc	.+6      	; 0x2858 <vfprintf+0x2f0>
    2852:	53 0c       	add	r5, r3
    2854:	5b 18       	sub	r5, r11
    2856:	b3 2c       	mov	r11, r3
    2858:	b3 14       	cp	r11, r3
    285a:	68 f4       	brcc	.+26     	; 0x2876 <vfprintf+0x30e>
    285c:	b7 01       	movw	r22, r14
    285e:	80 e2       	ldi	r24, 0x20	; 32
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	3c 87       	std	Y+12, r19	; 0x0c
    2864:	0e 94 9c 14 	call	0x2938	; 0x2938 <fputc>
    2868:	b3 94       	inc	r11
    286a:	3c 85       	ldd	r19, Y+12	; 0x0c
    286c:	f5 cf       	rjmp	.-22     	; 0x2858 <vfprintf+0x2f0>
    286e:	b3 14       	cp	r11, r3
    2870:	10 f4       	brcc	.+4      	; 0x2876 <vfprintf+0x30e>
    2872:	3b 18       	sub	r3, r11
    2874:	01 c0       	rjmp	.+2      	; 0x2878 <vfprintf+0x310>
    2876:	31 2c       	mov	r3, r1
    2878:	34 ff       	sbrs	r19, 4
    287a:	12 c0       	rjmp	.+36     	; 0x28a0 <vfprintf+0x338>
    287c:	b7 01       	movw	r22, r14
    287e:	80 e3       	ldi	r24, 0x30	; 48
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	3c 87       	std	Y+12, r19	; 0x0c
    2884:	0e 94 9c 14 	call	0x2938	; 0x2938 <fputc>
    2888:	3c 85       	ldd	r19, Y+12	; 0x0c
    288a:	32 ff       	sbrs	r19, 2
    288c:	17 c0       	rjmp	.+46     	; 0x28bc <vfprintf+0x354>
    288e:	31 fd       	sbrc	r19, 1
    2890:	03 c0       	rjmp	.+6      	; 0x2898 <vfprintf+0x330>
    2892:	88 e7       	ldi	r24, 0x78	; 120
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	02 c0       	rjmp	.+4      	; 0x289c <vfprintf+0x334>
    2898:	88 e5       	ldi	r24, 0x58	; 88
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	b7 01       	movw	r22, r14
    289e:	0c c0       	rjmp	.+24     	; 0x28b8 <vfprintf+0x350>
    28a0:	83 2f       	mov	r24, r19
    28a2:	86 78       	andi	r24, 0x86	; 134
    28a4:	59 f0       	breq	.+22     	; 0x28bc <vfprintf+0x354>
    28a6:	31 ff       	sbrs	r19, 1
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <vfprintf+0x346>
    28aa:	8b e2       	ldi	r24, 0x2B	; 43
    28ac:	01 c0       	rjmp	.+2      	; 0x28b0 <vfprintf+0x348>
    28ae:	80 e2       	ldi	r24, 0x20	; 32
    28b0:	37 fd       	sbrc	r19, 7
    28b2:	8d e2       	ldi	r24, 0x2D	; 45
    28b4:	b7 01       	movw	r22, r14
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	0e 94 9c 14 	call	0x2938	; 0x2938 <fputc>
    28bc:	a5 14       	cp	r10, r5
    28be:	38 f4       	brcc	.+14     	; 0x28ce <vfprintf+0x366>
    28c0:	b7 01       	movw	r22, r14
    28c2:	80 e3       	ldi	r24, 0x30	; 48
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	0e 94 9c 14 	call	0x2938	; 0x2938 <fputc>
    28ca:	5a 94       	dec	r5
    28cc:	f7 cf       	rjmp	.-18     	; 0x28bc <vfprintf+0x354>
    28ce:	aa 94       	dec	r10
    28d0:	f4 01       	movw	r30, r8
    28d2:	ea 0d       	add	r30, r10
    28d4:	f1 1d       	adc	r31, r1
    28d6:	80 81       	ld	r24, Z
    28d8:	b7 01       	movw	r22, r14
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	0e 94 9c 14 	call	0x2938	; 0x2938 <fputc>
    28e0:	a1 10       	cpse	r10, r1
    28e2:	f5 cf       	rjmp	.-22     	; 0x28ce <vfprintf+0x366>
    28e4:	33 20       	and	r3, r3
    28e6:	09 f4       	brne	.+2      	; 0x28ea <vfprintf+0x382>
    28e8:	51 ce       	rjmp	.-862    	; 0x258c <vfprintf+0x24>
    28ea:	b7 01       	movw	r22, r14
    28ec:	80 e2       	ldi	r24, 0x20	; 32
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	0e 94 9c 14 	call	0x2938	; 0x2938 <fputc>
    28f4:	3a 94       	dec	r3
    28f6:	f6 cf       	rjmp	.-20     	; 0x28e4 <vfprintf+0x37c>
    28f8:	f7 01       	movw	r30, r14
    28fa:	86 81       	ldd	r24, Z+6	; 0x06
    28fc:	97 81       	ldd	r25, Z+7	; 0x07
    28fe:	02 c0       	rjmp	.+4      	; 0x2904 <vfprintf+0x39c>
    2900:	8f ef       	ldi	r24, 0xFF	; 255
    2902:	9f ef       	ldi	r25, 0xFF	; 255
    2904:	2c 96       	adiw	r28, 0x0c	; 12
    2906:	e2 e1       	ldi	r30, 0x12	; 18
    2908:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__>

0000290c <strnlen_P>:
    290c:	fc 01       	movw	r30, r24
    290e:	05 90       	lpm	r0, Z+
    2910:	61 50       	subi	r22, 0x01	; 1
    2912:	70 40       	sbci	r23, 0x00	; 0
    2914:	01 10       	cpse	r0, r1
    2916:	d8 f7       	brcc	.-10     	; 0x290e <strnlen_P+0x2>
    2918:	80 95       	com	r24
    291a:	90 95       	com	r25
    291c:	8e 0f       	add	r24, r30
    291e:	9f 1f       	adc	r25, r31
    2920:	08 95       	ret

00002922 <strnlen>:
    2922:	fc 01       	movw	r30, r24
    2924:	61 50       	subi	r22, 0x01	; 1
    2926:	70 40       	sbci	r23, 0x00	; 0
    2928:	01 90       	ld	r0, Z+
    292a:	01 10       	cpse	r0, r1
    292c:	d8 f7       	brcc	.-10     	; 0x2924 <strnlen+0x2>
    292e:	80 95       	com	r24
    2930:	90 95       	com	r25
    2932:	8e 0f       	add	r24, r30
    2934:	9f 1f       	adc	r25, r31
    2936:	08 95       	ret

00002938 <fputc>:
    2938:	0f 93       	push	r16
    293a:	1f 93       	push	r17
    293c:	cf 93       	push	r28
    293e:	df 93       	push	r29
    2940:	fb 01       	movw	r30, r22
    2942:	23 81       	ldd	r18, Z+3	; 0x03
    2944:	21 fd       	sbrc	r18, 1
    2946:	03 c0       	rjmp	.+6      	; 0x294e <fputc+0x16>
    2948:	8f ef       	ldi	r24, 0xFF	; 255
    294a:	9f ef       	ldi	r25, 0xFF	; 255
    294c:	28 c0       	rjmp	.+80     	; 0x299e <fputc+0x66>
    294e:	22 ff       	sbrs	r18, 2
    2950:	16 c0       	rjmp	.+44     	; 0x297e <fputc+0x46>
    2952:	46 81       	ldd	r20, Z+6	; 0x06
    2954:	57 81       	ldd	r21, Z+7	; 0x07
    2956:	24 81       	ldd	r18, Z+4	; 0x04
    2958:	35 81       	ldd	r19, Z+5	; 0x05
    295a:	42 17       	cp	r20, r18
    295c:	53 07       	cpc	r21, r19
    295e:	44 f4       	brge	.+16     	; 0x2970 <fputc+0x38>
    2960:	a0 81       	ld	r26, Z
    2962:	b1 81       	ldd	r27, Z+1	; 0x01
    2964:	9d 01       	movw	r18, r26
    2966:	2f 5f       	subi	r18, 0xFF	; 255
    2968:	3f 4f       	sbci	r19, 0xFF	; 255
    296a:	31 83       	std	Z+1, r19	; 0x01
    296c:	20 83       	st	Z, r18
    296e:	8c 93       	st	X, r24
    2970:	26 81       	ldd	r18, Z+6	; 0x06
    2972:	37 81       	ldd	r19, Z+7	; 0x07
    2974:	2f 5f       	subi	r18, 0xFF	; 255
    2976:	3f 4f       	sbci	r19, 0xFF	; 255
    2978:	37 83       	std	Z+7, r19	; 0x07
    297a:	26 83       	std	Z+6, r18	; 0x06
    297c:	10 c0       	rjmp	.+32     	; 0x299e <fputc+0x66>
    297e:	eb 01       	movw	r28, r22
    2980:	09 2f       	mov	r16, r25
    2982:	18 2f       	mov	r17, r24
    2984:	00 84       	ldd	r0, Z+8	; 0x08
    2986:	f1 85       	ldd	r31, Z+9	; 0x09
    2988:	e0 2d       	mov	r30, r0
    298a:	09 95       	icall
    298c:	89 2b       	or	r24, r25
    298e:	e1 f6       	brne	.-72     	; 0x2948 <fputc+0x10>
    2990:	8e 81       	ldd	r24, Y+6	; 0x06
    2992:	9f 81       	ldd	r25, Y+7	; 0x07
    2994:	01 96       	adiw	r24, 0x01	; 1
    2996:	9f 83       	std	Y+7, r25	; 0x07
    2998:	8e 83       	std	Y+6, r24	; 0x06
    299a:	81 2f       	mov	r24, r17
    299c:	90 2f       	mov	r25, r16
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	1f 91       	pop	r17
    29a4:	0f 91       	pop	r16
    29a6:	08 95       	ret

000029a8 <__ultoa_invert>:
    29a8:	fa 01       	movw	r30, r20
    29aa:	aa 27       	eor	r26, r26
    29ac:	28 30       	cpi	r18, 0x08	; 8
    29ae:	51 f1       	breq	.+84     	; 0x2a04 <__ultoa_invert+0x5c>
    29b0:	20 31       	cpi	r18, 0x10	; 16
    29b2:	81 f1       	breq	.+96     	; 0x2a14 <__ultoa_invert+0x6c>
    29b4:	e8 94       	clt
    29b6:	6f 93       	push	r22
    29b8:	6e 7f       	andi	r22, 0xFE	; 254
    29ba:	6e 5f       	subi	r22, 0xFE	; 254
    29bc:	7f 4f       	sbci	r23, 0xFF	; 255
    29be:	8f 4f       	sbci	r24, 0xFF	; 255
    29c0:	9f 4f       	sbci	r25, 0xFF	; 255
    29c2:	af 4f       	sbci	r26, 0xFF	; 255
    29c4:	b1 e0       	ldi	r27, 0x01	; 1
    29c6:	3e d0       	rcall	.+124    	; 0x2a44 <__ultoa_invert+0x9c>
    29c8:	b4 e0       	ldi	r27, 0x04	; 4
    29ca:	3c d0       	rcall	.+120    	; 0x2a44 <__ultoa_invert+0x9c>
    29cc:	67 0f       	add	r22, r23
    29ce:	78 1f       	adc	r23, r24
    29d0:	89 1f       	adc	r24, r25
    29d2:	9a 1f       	adc	r25, r26
    29d4:	a1 1d       	adc	r26, r1
    29d6:	68 0f       	add	r22, r24
    29d8:	79 1f       	adc	r23, r25
    29da:	8a 1f       	adc	r24, r26
    29dc:	91 1d       	adc	r25, r1
    29de:	a1 1d       	adc	r26, r1
    29e0:	6a 0f       	add	r22, r26
    29e2:	71 1d       	adc	r23, r1
    29e4:	81 1d       	adc	r24, r1
    29e6:	91 1d       	adc	r25, r1
    29e8:	a1 1d       	adc	r26, r1
    29ea:	20 d0       	rcall	.+64     	; 0x2a2c <__ultoa_invert+0x84>
    29ec:	09 f4       	brne	.+2      	; 0x29f0 <__ultoa_invert+0x48>
    29ee:	68 94       	set
    29f0:	3f 91       	pop	r19
    29f2:	2a e0       	ldi	r18, 0x0A	; 10
    29f4:	26 9f       	mul	r18, r22
    29f6:	11 24       	eor	r1, r1
    29f8:	30 19       	sub	r19, r0
    29fa:	30 5d       	subi	r19, 0xD0	; 208
    29fc:	31 93       	st	Z+, r19
    29fe:	de f6       	brtc	.-74     	; 0x29b6 <__ultoa_invert+0xe>
    2a00:	cf 01       	movw	r24, r30
    2a02:	08 95       	ret
    2a04:	46 2f       	mov	r20, r22
    2a06:	47 70       	andi	r20, 0x07	; 7
    2a08:	40 5d       	subi	r20, 0xD0	; 208
    2a0a:	41 93       	st	Z+, r20
    2a0c:	b3 e0       	ldi	r27, 0x03	; 3
    2a0e:	0f d0       	rcall	.+30     	; 0x2a2e <__ultoa_invert+0x86>
    2a10:	c9 f7       	brne	.-14     	; 0x2a04 <__ultoa_invert+0x5c>
    2a12:	f6 cf       	rjmp	.-20     	; 0x2a00 <__ultoa_invert+0x58>
    2a14:	46 2f       	mov	r20, r22
    2a16:	4f 70       	andi	r20, 0x0F	; 15
    2a18:	40 5d       	subi	r20, 0xD0	; 208
    2a1a:	4a 33       	cpi	r20, 0x3A	; 58
    2a1c:	18 f0       	brcs	.+6      	; 0x2a24 <__ultoa_invert+0x7c>
    2a1e:	49 5d       	subi	r20, 0xD9	; 217
    2a20:	31 fd       	sbrc	r19, 1
    2a22:	40 52       	subi	r20, 0x20	; 32
    2a24:	41 93       	st	Z+, r20
    2a26:	02 d0       	rcall	.+4      	; 0x2a2c <__ultoa_invert+0x84>
    2a28:	a9 f7       	brne	.-22     	; 0x2a14 <__ultoa_invert+0x6c>
    2a2a:	ea cf       	rjmp	.-44     	; 0x2a00 <__ultoa_invert+0x58>
    2a2c:	b4 e0       	ldi	r27, 0x04	; 4
    2a2e:	a6 95       	lsr	r26
    2a30:	97 95       	ror	r25
    2a32:	87 95       	ror	r24
    2a34:	77 95       	ror	r23
    2a36:	67 95       	ror	r22
    2a38:	ba 95       	dec	r27
    2a3a:	c9 f7       	brne	.-14     	; 0x2a2e <__ultoa_invert+0x86>
    2a3c:	00 97       	sbiw	r24, 0x00	; 0
    2a3e:	61 05       	cpc	r22, r1
    2a40:	71 05       	cpc	r23, r1
    2a42:	08 95       	ret
    2a44:	9b 01       	movw	r18, r22
    2a46:	ac 01       	movw	r20, r24
    2a48:	0a 2e       	mov	r0, r26
    2a4a:	06 94       	lsr	r0
    2a4c:	57 95       	ror	r21
    2a4e:	47 95       	ror	r20
    2a50:	37 95       	ror	r19
    2a52:	27 95       	ror	r18
    2a54:	ba 95       	dec	r27
    2a56:	c9 f7       	brne	.-14     	; 0x2a4a <__ultoa_invert+0xa2>
    2a58:	62 0f       	add	r22, r18
    2a5a:	73 1f       	adc	r23, r19
    2a5c:	84 1f       	adc	r24, r20
    2a5e:	95 1f       	adc	r25, r21
    2a60:	a0 1d       	adc	r26, r0
    2a62:	08 95       	ret

00002a64 <_exit>:
    2a64:	f8 94       	cli

00002a66 <__stop_program>:
    2a66:	ff cf       	rjmp	.-2      	; 0x2a66 <__stop_program>
