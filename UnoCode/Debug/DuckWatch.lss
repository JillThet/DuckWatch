
DuckWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000022c4  00002358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800124  00800124  0000237c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000237c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000466d  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ff  00000000  00000000  00006d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e31  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000073c  00000000  00000000  00009038  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ccb  00000000  00000000  00009774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023da  00000000  00000000  0000a43f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  0000c819  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <__vector_14>
      3c:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__vector_15>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ec       	ldi	r30, 0xC4	; 196
      7c:	f2 e2       	ldi	r31, 0x22	; 34
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 32       	cpi	r26, 0x24	; 36
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a4 e2       	ldi	r26, 0x24	; 36
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 34       	cpi	r26, 0x41	; 65
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 87 07 	call	0xf0e	; 0xf0e <main>
      9e:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN6BME2804initEv>:
 * 
 * Return:		bool - the status of the operation (false = success,
 *													true = failure)
 ****************************************************************************/
bool BME280::init (void)
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	ec 01       	movw	r28, r24
	 * 2. Set up ctrl_meas register to oversample pressure and temperature
	 *    by 1 and set mode to normal
	 * 3. Turn off IIR Filter and set inactive duration to 1s for normal
	 *	  mode
	 */
	return (p_i2c->write(BME280_ADDR, BME280_CTRL_HUM, BME280_H_OVSM_1)
      ac:	21 e0       	ldi	r18, 0x01	; 1
      ae:	42 ef       	ldi	r20, 0xF2	; 242
      b0:	6e ee       	ldi	r22, 0xEE	; 238
      b2:	88 81       	ld	r24, Y
      b4:	99 81       	ldd	r25, Y+1	; 0x01
      b6:	0e 94 09 07 	call	0xe12	; 0xe12 <_ZN3i2c5writeEhhh>
			|| p_i2c->write(BME280_ADDR, BME280_CTRL_MEAS, 
				BME280_P_OVSM_1 | BME280_T_OVSM_16 | BME280_NORMAL_MODE)
			|| p_i2c->write(BME280_ADDR, BME280_CONFIG, 
      ba:	81 11       	cpse	r24, r1
      bc:	10 c0       	rjmp	.+32     	; 0xde <_ZN6BME2804initEv+0x38>
	 * 3. Turn off IIR Filter and set inactive duration to 1s for normal
	 *	  mode
	 */
	return (p_i2c->write(BME280_ADDR, BME280_CTRL_HUM, BME280_H_OVSM_1)
			|| p_i2c->write(BME280_ADDR, BME280_CTRL_MEAS, 
				BME280_P_OVSM_1 | BME280_T_OVSM_16 | BME280_NORMAL_MODE)
      be:	27 e3       	ldi	r18, 0x37	; 55
      c0:	44 ef       	ldi	r20, 0xF4	; 244
      c2:	6e ee       	ldi	r22, 0xEE	; 238
      c4:	88 81       	ld	r24, Y
      c6:	99 81       	ldd	r25, Y+1	; 0x01
      c8:	0e 94 09 07 	call	0xe12	; 0xe12 <_ZN3i2c5writeEhhh>
	 *    by 1 and set mode to normal
	 * 3. Turn off IIR Filter and set inactive duration to 1s for normal
	 *	  mode
	 */
	return (p_i2c->write(BME280_ADDR, BME280_CTRL_HUM, BME280_H_OVSM_1)
			|| p_i2c->write(BME280_ADDR, BME280_CTRL_MEAS, 
      cc:	81 11       	cpse	r24, r1
      ce:	07 c0       	rjmp	.+14     	; 0xde <_ZN6BME2804initEv+0x38>
				BME280_P_OVSM_1 | BME280_T_OVSM_16 | BME280_NORMAL_MODE)
			|| p_i2c->write(BME280_ADDR, BME280_CONFIG, 
				BME280_TSB_F | BME280_FLTR_OFF | BME280_SPI_DIS));
      d0:	20 e0       	ldi	r18, 0x00	; 0
      d2:	45 ef       	ldi	r20, 0xF5	; 245
      d4:	6e ee       	ldi	r22, 0xEE	; 238
      d6:	88 81       	ld	r24, Y
      d8:	99 81       	ldd	r25, Y+1	; 0x01
      da:	0e 94 09 07 	call	0xe12	; 0xe12 <_ZN3i2c5writeEhhh>
}
      de:	df 91       	pop	r29
      e0:	cf 91       	pop	r28
      e2:	08 95       	ret

000000e4 <_ZN6BME28016convert_pressureEv>:
 * Return:		int32_t - the human-readable pressure reading accurate to
 *							2 decimal places in Pascals. A value of 5382 is
 *							equal to 53.82 Pa
 ****************************************************************************/
int32_t BME280::convert_pressure (void)
{
      e4:	2f 92       	push	r2
      e6:	3f 92       	push	r3
      e8:	4f 92       	push	r4
      ea:	5f 92       	push	r5
      ec:	6f 92       	push	r6
      ee:	7f 92       	push	r7
      f0:	8f 92       	push	r8
      f2:	9f 92       	push	r9
      f4:	af 92       	push	r10
      f6:	bf 92       	push	r11
      f8:	cf 92       	push	r12
      fa:	df 92       	push	r13
      fc:	ef 92       	push	r14
      fe:	ff 92       	push	r15
     100:	0f 93       	push	r16
     102:	1f 93       	push	r17
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
     108:	cd b7       	in	r28, 0x3d	; 61
     10a:	de b7       	in	r29, 0x3e	; 62
     10c:	a0 97       	sbiw	r28, 0x20	; 32
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	f8 94       	cli
     112:	de bf       	out	0x3e, r29	; 62
     114:	0f be       	out	0x3f, r0	; 63
     116:	cd bf       	out	0x3d, r28	; 61
     118:	98 a3       	std	Y+32, r25	; 0x20
     11a:	8f 8f       	std	Y+31, r24	; 0x1f
	int64_t var1, var2, p;
	
	raw_pres >>= 4;
     11c:	fc 01       	movw	r30, r24
     11e:	80 85       	ldd	r24, Z+8	; 0x08
     120:	91 85       	ldd	r25, Z+9	; 0x09
     122:	a2 85       	ldd	r26, Z+10	; 0x0a
     124:	b3 85       	ldd	r27, Z+11	; 0x0b
     126:	9c 01       	movw	r18, r24
     128:	ad 01       	movw	r20, r26
     12a:	68 94       	set
     12c:	13 f8       	bld	r1, 3
     12e:	55 95       	asr	r21
     130:	47 95       	ror	r20
     132:	37 95       	ror	r19
     134:	27 95       	ror	r18
     136:	16 94       	lsr	r1
     138:	d1 f7       	brne	.-12     	; 0x12e <_ZN6BME28016convert_pressureEv+0x4a>
     13a:	2d 87       	std	Y+13, r18	; 0x0d
     13c:	3e 87       	std	Y+14, r19	; 0x0e
     13e:	4f 87       	std	Y+15, r20	; 0x0f
     140:	58 8b       	std	Y+16, r21	; 0x10
     142:	20 87       	std	Z+8, r18	; 0x08
     144:	31 87       	std	Z+9, r19	; 0x09
     146:	42 87       	std	Z+10, r20	; 0x0a
     148:	53 87       	std	Z+11, r21	; 0x0b
	
	var1 =	((int64_t)cal.t_fine) - 128000;
     14a:	ef 5b       	subi	r30, 0xBF	; 191
     14c:	ff 4f       	sbci	r31, 0xFF	; 255
     14e:	80 81       	ld	r24, Z
     150:	91 81       	ldd	r25, Z+1	; 0x01
     152:	a2 81       	ldd	r26, Z+2	; 0x02
     154:	b3 81       	ldd	r27, Z+3	; 0x03
     156:	6c 01       	movw	r12, r24
     158:	7d 01       	movw	r14, r26
     15a:	ff 0c       	add	r15, r15
     15c:	cc 08       	sbc	r12, r12
     15e:	dc 2c       	mov	r13, r12
     160:	76 01       	movw	r14, r12
     162:	28 2f       	mov	r18, r24
     164:	39 2f       	mov	r19, r25
     166:	4a 2f       	mov	r20, r26
     168:	5b 2f       	mov	r21, r27
     16a:	6c 2d       	mov	r22, r12
     16c:	7c 2d       	mov	r23, r12
     16e:	8c 2d       	mov	r24, r12
     170:	9c 2d       	mov	r25, r12
     172:	34 5f       	subi	r19, 0xF4	; 244
     174:	41 40       	sbci	r20, 0x01	; 1
     176:	51 09       	sbc	r21, r1
     178:	61 09       	sbc	r22, r1
     17a:	71 09       	sbc	r23, r1
     17c:	81 09       	sbc	r24, r1
     17e:	91 09       	sbc	r25, r1
     180:	29 83       	std	Y+1, r18	; 0x01
     182:	3a 83       	std	Y+2, r19	; 0x02
     184:	4b 83       	std	Y+3, r20	; 0x03
     186:	5c 83       	std	Y+4, r21	; 0x04
     188:	6d 83       	std	Y+5, r22	; 0x05
     18a:	7e 83       	std	Y+6, r23	; 0x06
     18c:	8f 83       	std	Y+7, r24	; 0x07
     18e:	98 87       	std	Y+8, r25	; 0x08
	
	var2 =	var1 * var1 * (int64_t)cal.dig_P6;
     190:	a2 2e       	mov	r10, r18
     192:	b3 2e       	mov	r11, r19
     194:	c4 2e       	mov	r12, r20
     196:	d5 2e       	mov	r13, r21
     198:	e6 2e       	mov	r14, r22
     19a:	f7 2e       	mov	r15, r23
     19c:	08 2f       	mov	r16, r24
     19e:	19 2f       	mov	r17, r25
     1a0:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__muldi3>
     1a4:	29 87       	std	Y+9, r18	; 0x09
     1a6:	3a 87       	std	Y+10, r19	; 0x0a
     1a8:	4b 87       	std	Y+11, r20	; 0x0b
     1aa:	5c 87       	std	Y+12, r21	; 0x0c
     1ac:	6d 8b       	std	Y+21, r22	; 0x15
     1ae:	7e 8b       	std	Y+22, r23	; 0x16
     1b0:	8f 8b       	std	Y+23, r24	; 0x17
     1b2:	98 8f       	std	Y+24, r25	; 0x18
     1b4:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1b6:	f8 a1       	ldd	r31, Y+32	; 0x20
     1b8:	f0 a9       	ldd	r31, Z+48	; 0x30
     1ba:	fc 8f       	std	Y+28, r31	; 0x1c
     1bc:	af 8d       	ldd	r26, Y+31	; 0x1f
     1be:	b8 a1       	ldd	r27, Y+32	; 0x20
     1c0:	d1 96       	adiw	r26, 0x31	; 49
     1c2:	bc 91       	ld	r27, X
     1c4:	b9 8f       	std	Y+25, r27	; 0x19
	var2 =	var2 + ((var1*(int64_t)cal.dig_P5) << 17);
     1c6:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1c8:	f8 a1       	ldd	r31, Y+32	; 0x20
     1ca:	f6 a5       	ldd	r31, Z+46	; 0x2e
     1cc:	fd 8f       	std	Y+29, r31	; 0x1d
     1ce:	af 8d       	ldd	r26, Y+31	; 0x1f
     1d0:	b8 a1       	ldd	r27, Y+32	; 0x20
     1d2:	9f 96       	adiw	r26, 0x2f	; 47
     1d4:	bc 91       	ld	r27, X
     1d6:	ba 8f       	std	Y+26, r27	; 0x1a
	var2 =	var2 + (((int64_t)cal.dig_P4) << 35);
     1d8:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1da:	f8 a1       	ldd	r31, Y+32	; 0x20
     1dc:	f4 a5       	ldd	r31, Z+44	; 0x2c
     1de:	fe 8f       	std	Y+30, r31	; 0x1e
     1e0:	af 8d       	ldd	r26, Y+31	; 0x1f
     1e2:	b8 a1       	ldd	r27, Y+32	; 0x20
     1e4:	9d 96       	adiw	r26, 0x2d	; 45
     1e6:	bc 91       	ld	r27, X
     1e8:	bb 8f       	std	Y+27, r27	; 0x1b
	
	var1 =	((var1 * var1 * (int64_t)cal.dig_P3) >> 8) +
			((var1 * (int64_t)cal.dig_P2)<<12);
     1ea:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1ec:	f8 a1       	ldd	r31, Y+32	; 0x20
     1ee:	31 a5       	ldd	r19, Z+41	; 0x29
     1f0:	20 a5       	ldd	r18, Z+40	; 0x28
     1f2:	93 2f       	mov	r25, r19
     1f4:	99 0f       	add	r25, r25
     1f6:	99 0b       	sbc	r25, r25
     1f8:	49 2f       	mov	r20, r25
     1fa:	59 2f       	mov	r21, r25
     1fc:	69 2f       	mov	r22, r25
     1fe:	79 2f       	mov	r23, r25
     200:	89 2f       	mov	r24, r25
     202:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__muldi3>
     206:	0c e0       	ldi	r16, 0x0C	; 12
     208:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__ashldi3>
     20c:	22 2e       	mov	r2, r18
     20e:	33 2e       	mov	r3, r19
     210:	44 2e       	mov	r4, r20
     212:	55 2e       	mov	r5, r21
     214:	66 2e       	mov	r6, r22
     216:	77 2e       	mov	r7, r23
     218:	88 2e       	mov	r8, r24
     21a:	99 2e       	mov	r9, r25
	
	var2 =	var1 * var1 * (int64_t)cal.dig_P6;
	var2 =	var2 + ((var1*(int64_t)cal.dig_P5) << 17);
	var2 =	var2 + (((int64_t)cal.dig_P4) << 35);
	
	var1 =	((var1 * var1 * (int64_t)cal.dig_P3) >> 8) +
     21c:	af 8d       	ldd	r26, Y+31	; 0x1f
     21e:	b8 a1       	ldd	r27, Y+32	; 0x20
     220:	9b 96       	adiw	r26, 0x2b	; 43
     222:	bc 90       	ld	r11, X
     224:	9b 97       	sbiw	r26, 0x2b	; 43
     226:	9a 96       	adiw	r26, 0x2a	; 42
     228:	ac 90       	ld	r10, X
     22a:	1b 2d       	mov	r17, r11
     22c:	11 0f       	add	r17, r17
     22e:	11 0b       	sbc	r17, r17
     230:	c1 2e       	mov	r12, r17
     232:	d1 2e       	mov	r13, r17
     234:	e1 2e       	mov	r14, r17
     236:	f1 2e       	mov	r15, r17
     238:	01 2f       	mov	r16, r17
     23a:	29 85       	ldd	r18, Y+9	; 0x09
     23c:	3a 85       	ldd	r19, Y+10	; 0x0a
     23e:	4b 85       	ldd	r20, Y+11	; 0x0b
     240:	5c 85       	ldd	r21, Y+12	; 0x0c
     242:	6d 89       	ldd	r22, Y+21	; 0x15
     244:	7e 89       	ldd	r23, Y+22	; 0x16
     246:	8f 89       	ldd	r24, Y+23	; 0x17
     248:	98 8d       	ldd	r25, Y+24	; 0x18
     24a:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__muldi3>
     24e:	08 e0       	ldi	r16, 0x08	; 8
     250:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__ashrdi3>
			((var1 * (int64_t)cal.dig_P2)<<12);
     254:	a2 2c       	mov	r10, r2
     256:	b3 2c       	mov	r11, r3
     258:	c4 2c       	mov	r12, r4
     25a:	d5 2c       	mov	r13, r5
     25c:	e6 2c       	mov	r14, r6
     25e:	f7 2c       	mov	r15, r7
     260:	08 2d       	mov	r16, r8
     262:	19 2d       	mov	r17, r9
     264:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__adddi3>
	var1 =	(((((int64_t)1) << 47) + var1)) * ((int64_t)cal.dig_P1) >> 33;
     268:	70 58       	subi	r23, 0x80	; 128
     26a:	8f 4f       	sbci	r24, 0xFF	; 255
     26c:	9f 4f       	sbci	r25, 0xFF	; 255
     26e:	ef 8d       	ldd	r30, Y+31	; 0x1f
     270:	f8 a1       	ldd	r31, Y+32	; 0x20
     272:	26 a0       	ldd	r2, Z+38	; 0x26
     274:	37 a0       	ldd	r3, Z+39	; 0x27
     276:	a2 2c       	mov	r10, r2
     278:	b3 2c       	mov	r11, r3
     27a:	c1 2c       	mov	r12, r1
     27c:	d1 2c       	mov	r13, r1
     27e:	e1 2c       	mov	r14, r1
     280:	f1 2c       	mov	r15, r1
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	10 e0       	ldi	r17, 0x00	; 0
     286:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__muldi3>
     28a:	01 e2       	ldi	r16, 0x21	; 33
     28c:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__ashrdi3>
     290:	29 8b       	std	Y+17, r18	; 0x11
     292:	3a 8b       	std	Y+18, r19	; 0x12
     294:	4b 8b       	std	Y+19, r20	; 0x13
     296:	45 2e       	mov	r4, r21
     298:	56 2e       	mov	r5, r22
     29a:	7c 8b       	std	Y+20, r23	; 0x14
     29c:	38 2e       	mov	r3, r24
     29e:	29 2e       	mov	r2, r25
	 
	if (var1 == 0) {
     2a0:	65 2d       	mov	r22, r5
     2a2:	83 2d       	mov	r24, r3
     2a4:	92 2d       	mov	r25, r2
     2a6:	a0 e0       	ldi	r26, 0x00	; 0
     2a8:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__cmpdi2_s8>
     2ac:	09 f4       	brne	.+2      	; 0x2b0 <_ZN6BME28016convert_pressureEv+0x1cc>
     2ae:	8f c1       	rjmp	.+798    	; 0x5ce <_ZN6BME28016convert_pressureEv+0x4ea>
	
	raw_pres >>= 4;
	
	var1 =	((int64_t)cal.t_fine) - 128000;
	
	var2 =	var1 * var1 * (int64_t)cal.dig_P6;
     2b0:	ac 8c       	ldd	r10, Y+28	; 0x1c
     2b2:	19 8d       	ldd	r17, Y+25	; 0x19
     2b4:	11 0f       	add	r17, r17
     2b6:	11 0b       	sbc	r17, r17
     2b8:	b9 8c       	ldd	r11, Y+25	; 0x19
     2ba:	c1 2e       	mov	r12, r17
     2bc:	d1 2e       	mov	r13, r17
     2be:	e1 2e       	mov	r14, r17
     2c0:	f1 2e       	mov	r15, r17
     2c2:	01 2f       	mov	r16, r17
     2c4:	29 85       	ldd	r18, Y+9	; 0x09
     2c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     2c8:	4b 85       	ldd	r20, Y+11	; 0x0b
     2ca:	5c 85       	ldd	r21, Y+12	; 0x0c
     2cc:	6d 89       	ldd	r22, Y+21	; 0x15
     2ce:	7e 89       	ldd	r23, Y+22	; 0x16
     2d0:	8f 89       	ldd	r24, Y+23	; 0x17
     2d2:	98 8d       	ldd	r25, Y+24	; 0x18
     2d4:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__muldi3>
     2d8:	29 87       	std	Y+9, r18	; 0x09
     2da:	3a 87       	std	Y+10, r19	; 0x0a
     2dc:	4b 87       	std	Y+11, r20	; 0x0b
     2de:	75 2e       	mov	r7, r21
     2e0:	86 2e       	mov	r8, r22
     2e2:	97 2e       	mov	r9, r23
     2e4:	8c 87       	std	Y+12, r24	; 0x0c
     2e6:	69 2e       	mov	r6, r25
	var2 =	var2 + ((var1*(int64_t)cal.dig_P5) << 17);
     2e8:	2d 8d       	ldd	r18, Y+29	; 0x1d
     2ea:	9a 8d       	ldd	r25, Y+26	; 0x1a
     2ec:	99 0f       	add	r25, r25
     2ee:	99 0b       	sbc	r25, r25
     2f0:	a9 80       	ldd	r10, Y+1	; 0x01
     2f2:	ba 80       	ldd	r11, Y+2	; 0x02
     2f4:	cb 80       	ldd	r12, Y+3	; 0x03
     2f6:	dc 80       	ldd	r13, Y+4	; 0x04
     2f8:	ed 80       	ldd	r14, Y+5	; 0x05
     2fa:	fe 80       	ldd	r15, Y+6	; 0x06
     2fc:	0f 81       	ldd	r16, Y+7	; 0x07
     2fe:	18 85       	ldd	r17, Y+8	; 0x08
     300:	3a 8d       	ldd	r19, Y+26	; 0x1a
     302:	49 2f       	mov	r20, r25
     304:	59 2f       	mov	r21, r25
     306:	69 2f       	mov	r22, r25
     308:	79 2f       	mov	r23, r25
     30a:	89 2f       	mov	r24, r25
     30c:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__muldi3>
     310:	01 e1       	ldi	r16, 0x11	; 17
     312:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__ashldi3>
     316:	a9 84       	ldd	r10, Y+9	; 0x09
     318:	ba 84       	ldd	r11, Y+10	; 0x0a
     31a:	cb 84       	ldd	r12, Y+11	; 0x0b
     31c:	d7 2c       	mov	r13, r7
     31e:	e8 2c       	mov	r14, r8
     320:	f9 2c       	mov	r15, r9
     322:	0c 85       	ldd	r16, Y+12	; 0x0c
     324:	16 2d       	mov	r17, r6
     326:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__adddi3>
     32a:	a2 2e       	mov	r10, r18
     32c:	b3 2e       	mov	r11, r19
     32e:	c4 2e       	mov	r12, r20
     330:	d5 2e       	mov	r13, r21
     332:	e6 2e       	mov	r14, r22
     334:	f7 2e       	mov	r15, r23
     336:	e8 2f       	mov	r30, r24
     338:	19 2f       	mov	r17, r25
	 
	if (var1 == 0) {
		return 0;  // avoid exception caused by division by zero 
	}
	
	p = 1048576 - raw_pres;
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	a0 e1       	ldi	r26, 0x10	; 16
     340:	b0 e0       	ldi	r27, 0x00	; 0
     342:	2d 85       	ldd	r18, Y+13	; 0x0d
     344:	3e 85       	ldd	r19, Y+14	; 0x0e
     346:	4f 85       	ldd	r20, Y+15	; 0x0f
     348:	58 89       	ldd	r21, Y+16	; 0x10
     34a:	82 1b       	sub	r24, r18
     34c:	93 0b       	sbc	r25, r19
     34e:	a4 0b       	sbc	r26, r20
     350:	b5 0b       	sbc	r27, r21
     352:	3c 01       	movw	r6, r24
     354:	4d 01       	movw	r8, r26
     356:	99 0c       	add	r9, r9
     358:	66 08       	sbc	r6, r6
     35a:	76 2c       	mov	r7, r6
     35c:	43 01       	movw	r8, r6
	p = (((p << 31) - var2) * 3125) / var1;
     35e:	28 2f       	mov	r18, r24
     360:	39 2f       	mov	r19, r25
     362:	4a 2f       	mov	r20, r26
     364:	5b 2f       	mov	r21, r27
     366:	66 2d       	mov	r22, r6
     368:	76 2d       	mov	r23, r6
     36a:	86 2d       	mov	r24, r6
     36c:	96 2d       	mov	r25, r6
     36e:	0f e1       	ldi	r16, 0x1F	; 31
     370:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__ashldi3>
     374:	82 2e       	mov	r8, r18
     376:	93 2e       	mov	r9, r19
     378:	64 2e       	mov	r6, r20
     37a:	75 2e       	mov	r7, r21
     37c:	b6 2f       	mov	r27, r22
     37e:	a7 2f       	mov	r26, r23
     380:	8a 83       	std	Y+2, r24	; 0x02
     382:	f9 2f       	mov	r31, r25
	
	var1 =	((int64_t)cal.t_fine) - 128000;
	
	var2 =	var1 * var1 * (int64_t)cal.dig_P6;
	var2 =	var2 + ((var1*(int64_t)cal.dig_P5) << 17);
	var2 =	var2 + (((int64_t)cal.dig_P4) << 35);
     384:	2e 8d       	ldd	r18, Y+30	; 0x1e
     386:	9b 8d       	ldd	r25, Y+27	; 0x1b
     388:	99 0f       	add	r25, r25
     38a:	99 0b       	sbc	r25, r25
     38c:	3b 8d       	ldd	r19, Y+27	; 0x1b
     38e:	49 2f       	mov	r20, r25
     390:	59 2f       	mov	r21, r25
     392:	69 2f       	mov	r22, r25
     394:	79 2f       	mov	r23, r25
     396:	89 2f       	mov	r24, r25
     398:	03 e2       	ldi	r16, 0x23	; 35
     39a:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__ashldi3>
     39e:	0e 2f       	mov	r16, r30
     3a0:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__adddi3>
     3a4:	a2 2e       	mov	r10, r18
     3a6:	b3 2e       	mov	r11, r19
     3a8:	c4 2e       	mov	r12, r20
     3aa:	d5 2e       	mov	r13, r21
     3ac:	e6 2e       	mov	r14, r22
     3ae:	f7 2e       	mov	r15, r23
     3b0:	08 2f       	mov	r16, r24
     3b2:	19 2f       	mov	r17, r25
	if (var1 == 0) {
		return 0;  // avoid exception caused by division by zero 
	}
	
	p = 1048576 - raw_pres;
	p = (((p << 31) - var2) * 3125) / var1;
     3b4:	28 2d       	mov	r18, r8
     3b6:	39 2d       	mov	r19, r9
     3b8:	46 2d       	mov	r20, r6
     3ba:	57 2d       	mov	r21, r7
     3bc:	6b 2f       	mov	r22, r27
     3be:	7a 2f       	mov	r23, r26
     3c0:	8a 81       	ldd	r24, Y+2	; 0x02
     3c2:	9f 2f       	mov	r25, r31
     3c4:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__subdi3>
     3c8:	82 2e       	mov	r8, r18
     3ca:	93 2e       	mov	r9, r19
     3cc:	64 2e       	mov	r6, r20
     3ce:	75 2e       	mov	r7, r21
     3d0:	b6 2f       	mov	r27, r22
     3d2:	a7 2f       	mov	r26, r23
     3d4:	e8 2f       	mov	r30, r24
     3d6:	f9 2f       	mov	r31, r25
     3d8:	03 e0       	ldi	r16, 0x03	; 3
     3da:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__ashldi3>
     3de:	a8 2c       	mov	r10, r8
     3e0:	b9 2c       	mov	r11, r9
     3e2:	c6 2c       	mov	r12, r6
     3e4:	d7 2c       	mov	r13, r7
     3e6:	eb 2e       	mov	r14, r27
     3e8:	fa 2e       	mov	r15, r26
     3ea:	0e 2f       	mov	r16, r30
     3ec:	1f 2f       	mov	r17, r31
     3ee:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__subdi3>
     3f2:	a2 2e       	mov	r10, r18
     3f4:	b3 2e       	mov	r11, r19
     3f6:	c4 2e       	mov	r12, r20
     3f8:	d5 2e       	mov	r13, r21
     3fa:	e6 2e       	mov	r14, r22
     3fc:	f7 2e       	mov	r15, r23
     3fe:	89 83       	std	Y+1, r24	; 0x01
     400:	19 2f       	mov	r17, r25
     402:	03 e0       	ldi	r16, 0x03	; 3
     404:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__ashldi3>
     408:	09 81       	ldd	r16, Y+1	; 0x01
     40a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__subdi3>
     40e:	03 e0       	ldi	r16, 0x03	; 3
     410:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__ashldi3>
     414:	a8 2c       	mov	r10, r8
     416:	b9 2c       	mov	r11, r9
     418:	c6 2c       	mov	r12, r6
     41a:	d7 2c       	mov	r13, r7
     41c:	eb 2e       	mov	r14, r27
     41e:	fa 2e       	mov	r15, r26
     420:	0e 2f       	mov	r16, r30
     422:	1f 2f       	mov	r17, r31
     424:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__subdi3>
     428:	02 e0       	ldi	r16, 0x02	; 2
     42a:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__ashldi3>
     42e:	0e 2f       	mov	r16, r30
     430:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__subdi3>
     434:	01 e0       	ldi	r16, 0x01	; 1
     436:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__ashldi3>
     43a:	0e 2f       	mov	r16, r30
     43c:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__subdi3>
     440:	a9 88       	ldd	r10, Y+17	; 0x11
     442:	ba 88       	ldd	r11, Y+18	; 0x12
     444:	cb 88       	ldd	r12, Y+19	; 0x13
     446:	d4 2c       	mov	r13, r4
     448:	e5 2c       	mov	r14, r5
     44a:	fc 88       	ldd	r15, Y+20	; 0x14
     44c:	03 2d       	mov	r16, r3
     44e:	12 2d       	mov	r17, r2
     450:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__divdi3>
     454:	29 83       	std	Y+1, r18	; 0x01
     456:	3a 83       	std	Y+2, r19	; 0x02
     458:	4b 83       	std	Y+3, r20	; 0x03
     45a:	5c 83       	std	Y+4, r21	; 0x04
     45c:	6d 83       	std	Y+5, r22	; 0x05
     45e:	7e 83       	std	Y+6, r23	; 0x06
     460:	8f 83       	std	Y+7, r24	; 0x07
     462:	98 87       	std	Y+8, r25	; 0x08
	
	var1 = (((int64_t)cal.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
     464:	0d e0       	ldi	r16, 0x0D	; 13
     466:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__ashrdi3>
     46a:	82 2e       	mov	r8, r18
     46c:	93 2e       	mov	r9, r19
     46e:	74 2e       	mov	r7, r20
     470:	65 2e       	mov	r6, r21
     472:	56 2e       	mov	r5, r22
     474:	47 2e       	mov	r4, r23
     476:	38 2e       	mov	r3, r24
     478:	29 2e       	mov	r2, r25
     47a:	af 8d       	ldd	r26, Y+31	; 0x1f
     47c:	b8 a1       	ldd	r27, Y+32	; 0x20
     47e:	d7 96       	adiw	r26, 0x37	; 55
     480:	3c 91       	ld	r19, X
     482:	d7 97       	sbiw	r26, 0x37	; 55
     484:	d6 96       	adiw	r26, 0x36	; 54
     486:	2c 91       	ld	r18, X
     488:	93 2f       	mov	r25, r19
     48a:	99 0f       	add	r25, r25
     48c:	99 0b       	sbc	r25, r25
     48e:	a8 2c       	mov	r10, r8
     490:	b9 2c       	mov	r11, r9
     492:	c7 2c       	mov	r12, r7
     494:	d6 2c       	mov	r13, r6
     496:	e5 2c       	mov	r14, r5
     498:	f4 2c       	mov	r15, r4
     49a:	03 2d       	mov	r16, r3
     49c:	12 2d       	mov	r17, r2
     49e:	49 2f       	mov	r20, r25
     4a0:	59 2f       	mov	r21, r25
     4a2:	69 2f       	mov	r22, r25
     4a4:	79 2f       	mov	r23, r25
     4a6:	89 2f       	mov	r24, r25
     4a8:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__muldi3>
     4ac:	a2 2e       	mov	r10, r18
     4ae:	b3 2e       	mov	r11, r19
     4b0:	c4 2e       	mov	r12, r20
     4b2:	d5 2e       	mov	r13, r21
     4b4:	e6 2e       	mov	r14, r22
     4b6:	f7 2e       	mov	r15, r23
     4b8:	08 2f       	mov	r16, r24
     4ba:	19 2f       	mov	r17, r25
     4bc:	28 2d       	mov	r18, r8
     4be:	39 2d       	mov	r19, r9
     4c0:	47 2d       	mov	r20, r7
     4c2:	56 2d       	mov	r21, r6
     4c4:	65 2d       	mov	r22, r5
     4c6:	74 2d       	mov	r23, r4
     4c8:	83 2d       	mov	r24, r3
     4ca:	92 2d       	mov	r25, r2
     4cc:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__muldi3>
     4d0:	09 e1       	ldi	r16, 0x19	; 25
     4d2:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__ashrdi3>
     4d6:	a2 2e       	mov	r10, r18
     4d8:	b3 2e       	mov	r11, r19
     4da:	c4 2e       	mov	r12, r20
     4dc:	d5 2e       	mov	r13, r21
     4de:	e6 2e       	mov	r14, r22
     4e0:	f7 2e       	mov	r15, r23
     4e2:	08 2f       	mov	r16, r24
     4e4:	19 2f       	mov	r17, r25
	var2 = (((int64_t)cal.dig_P8) * p) >> 19; 
	
	p = ((p + var1 + var2) >> 8) + (((int64_t)cal.dig_P7) << 4);
     4e6:	29 81       	ldd	r18, Y+1	; 0x01
     4e8:	3a 81       	ldd	r19, Y+2	; 0x02
     4ea:	4b 81       	ldd	r20, Y+3	; 0x03
     4ec:	5c 81       	ldd	r21, Y+4	; 0x04
     4ee:	6d 81       	ldd	r22, Y+5	; 0x05
     4f0:	7e 81       	ldd	r23, Y+6	; 0x06
     4f2:	8f 81       	ldd	r24, Y+7	; 0x07
     4f4:	98 85       	ldd	r25, Y+8	; 0x08
     4f6:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__adddi3>
     4fa:	22 2e       	mov	r2, r18
     4fc:	33 2e       	mov	r3, r19
     4fe:	44 2e       	mov	r4, r20
     500:	55 2e       	mov	r5, r21
     502:	66 2e       	mov	r6, r22
     504:	77 2e       	mov	r7, r23
     506:	88 2e       	mov	r8, r24
     508:	99 2e       	mov	r9, r25
	
	p = 1048576 - raw_pres;
	p = (((p << 31) - var2) * 3125) / var1;
	
	var1 = (((int64_t)cal.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
	var2 = (((int64_t)cal.dig_P8) * p) >> 19; 
     50a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     50c:	f8 a1       	ldd	r31, Y+32	; 0x20
     50e:	35 a9       	ldd	r19, Z+53	; 0x35
     510:	24 a9       	ldd	r18, Z+52	; 0x34
     512:	93 2f       	mov	r25, r19
     514:	99 0f       	add	r25, r25
     516:	99 0b       	sbc	r25, r25
     518:	a9 80       	ldd	r10, Y+1	; 0x01
     51a:	ba 80       	ldd	r11, Y+2	; 0x02
     51c:	cb 80       	ldd	r12, Y+3	; 0x03
     51e:	dc 80       	ldd	r13, Y+4	; 0x04
     520:	ed 80       	ldd	r14, Y+5	; 0x05
     522:	fe 80       	ldd	r15, Y+6	; 0x06
     524:	0f 81       	ldd	r16, Y+7	; 0x07
     526:	18 85       	ldd	r17, Y+8	; 0x08
     528:	49 2f       	mov	r20, r25
     52a:	59 2f       	mov	r21, r25
     52c:	69 2f       	mov	r22, r25
     52e:	79 2f       	mov	r23, r25
     530:	89 2f       	mov	r24, r25
     532:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__muldi3>
     536:	03 e1       	ldi	r16, 0x13	; 19
     538:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__ashrdi3>
     53c:	a2 2e       	mov	r10, r18
     53e:	b3 2e       	mov	r11, r19
     540:	c4 2e       	mov	r12, r20
     542:	d5 2e       	mov	r13, r21
     544:	e6 2e       	mov	r14, r22
     546:	f7 2e       	mov	r15, r23
     548:	08 2f       	mov	r16, r24
     54a:	19 2f       	mov	r17, r25
	
	p = ((p + var1 + var2) >> 8) + (((int64_t)cal.dig_P7) << 4);
     54c:	22 2d       	mov	r18, r2
     54e:	33 2d       	mov	r19, r3
     550:	44 2d       	mov	r20, r4
     552:	55 2d       	mov	r21, r5
     554:	66 2d       	mov	r22, r6
     556:	77 2d       	mov	r23, r7
     558:	88 2d       	mov	r24, r8
     55a:	99 2d       	mov	r25, r9
     55c:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__adddi3>
     560:	08 e0       	ldi	r16, 0x08	; 8
     562:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__ashrdi3>
     566:	52 2e       	mov	r5, r18
     568:	63 2e       	mov	r6, r19
     56a:	74 2e       	mov	r7, r20
     56c:	85 2e       	mov	r8, r21
     56e:	96 2e       	mov	r9, r22
     570:	f7 2f       	mov	r31, r23
     572:	e8 2f       	mov	r30, r24
     574:	49 2e       	mov	r4, r25
     576:	af 8d       	ldd	r26, Y+31	; 0x1f
     578:	b8 a1       	ldd	r27, Y+32	; 0x20
     57a:	d3 96       	adiw	r26, 0x33	; 51
     57c:	3c 91       	ld	r19, X
     57e:	d3 97       	sbiw	r26, 0x33	; 51
     580:	d2 96       	adiw	r26, 0x32	; 50
     582:	2c 91       	ld	r18, X
     584:	93 2f       	mov	r25, r19
     586:	99 0f       	add	r25, r25
     588:	99 0b       	sbc	r25, r25
     58a:	49 2f       	mov	r20, r25
     58c:	59 2f       	mov	r21, r25
     58e:	69 2f       	mov	r22, r25
     590:	79 2f       	mov	r23, r25
     592:	89 2f       	mov	r24, r25
     594:	04 e0       	ldi	r16, 0x04	; 4
     596:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__ashldi3>
     59a:	a2 2e       	mov	r10, r18
     59c:	b3 2e       	mov	r11, r19
     59e:	c4 2e       	mov	r12, r20
     5a0:	d5 2e       	mov	r13, r21
     5a2:	e6 2e       	mov	r14, r22
     5a4:	f7 2e       	mov	r15, r23
     5a6:	08 2f       	mov	r16, r24
     5a8:	19 2f       	mov	r17, r25
     5aa:	25 2d       	mov	r18, r5
     5ac:	36 2d       	mov	r19, r6
     5ae:	47 2d       	mov	r20, r7
     5b0:	58 2d       	mov	r21, r8
     5b2:	69 2d       	mov	r22, r9
     5b4:	7f 2f       	mov	r23, r31
     5b6:	8e 2f       	mov	r24, r30
     5b8:	94 2d       	mov	r25, r4
     5ba:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__adddi3>
	 
	return p >> 8;
     5be:	08 e0       	ldi	r16, 0x08	; 8
     5c0:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__ashrdi3>
     5c4:	62 2f       	mov	r22, r18
     5c6:	73 2f       	mov	r23, r19
     5c8:	84 2f       	mov	r24, r20
     5ca:	95 2f       	mov	r25, r21
     5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <_ZN6BME28016convert_pressureEv+0x4f2>
	var1 =	((var1 * var1 * (int64_t)cal.dig_P3) >> 8) +
			((var1 * (int64_t)cal.dig_P2)<<12);
	var1 =	(((((int64_t)1) << 47) + var1)) * ((int64_t)cal.dig_P1) >> 33;
	 
	if (var1 == 0) {
		return 0;  // avoid exception caused by division by zero 
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
	var2 = (((int64_t)cal.dig_P8) * p) >> 19; 
	
	p = ((p + var1 + var2) >> 8) + (((int64_t)cal.dig_P7) << 4);
	 
	return p >> 8;
}
     5d6:	a0 96       	adiw	r28, 0x20	; 32
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	df 90       	pop	r13
     5f0:	cf 90       	pop	r12
     5f2:	bf 90       	pop	r11
     5f4:	af 90       	pop	r10
     5f6:	9f 90       	pop	r9
     5f8:	8f 90       	pop	r8
     5fa:	7f 90       	pop	r7
     5fc:	6f 90       	pop	r6
     5fe:	5f 90       	pop	r5
     600:	4f 90       	pop	r4
     602:	3f 90       	pop	r3
     604:	2f 90       	pop	r2
     606:	08 95       	ret

00000608 <_ZN6BME28019convert_temperatureEv>:
 * Return:		int32_t - the human-readable temperature reading accurate to
 *							2 decimal places in Centigrade. A value of 5382 is
 *							equal to 53.82 degrees Centigrade
 ****************************************************************************/
int32_t BME280::convert_temperature (void)
{
     608:	8f 92       	push	r8
     60a:	9f 92       	push	r9
     60c:	af 92       	push	r10
     60e:	bf 92       	push	r11
     610:	cf 92       	push	r12
     612:	df 92       	push	r13
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	fc 01       	movw	r30, r24
	int32_t var1 = 0;
	int32_t var2 = 0;
	
	temperature = 0;
     61e:	10 8e       	std	Z+24, r1	; 0x18
     620:	11 8e       	std	Z+25, r1	; 0x19
     622:	12 8e       	std	Z+26, r1	; 0x1a
     624:	13 8e       	std	Z+27, r1	; 0x1b
	
	/* calculate x1 */
	var1 =	((((raw_temp>>3) - ((int32_t)cal.dig_T1 <<1))) *
     626:	84 85       	ldd	r24, Z+12	; 0x0c
     628:	95 85       	ldd	r25, Z+13	; 0x0d
     62a:	a6 85       	ldd	r26, Z+14	; 0x0e
     62c:	b7 85       	ldd	r27, Z+15	; 0x0f
     62e:	40 a1       	ldd	r20, Z+32	; 0x20
     630:	51 a1       	ldd	r21, Z+33	; 0x21
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	70 e0       	ldi	r23, 0x00	; 0
		 ((int32_t)cal.dig_T2)) >> 11;
	
	/* calculate x2 */
	var2 =	(((((raw_temp>>4) - ((int32_t)cal.dig_T1)) *
			   ((raw_temp>>4) - ((int32_t)cal.dig_T1))) >> 12) *
     636:	4c 01       	movw	r8, r24
     638:	5d 01       	movw	r10, r26
     63a:	68 94       	set
     63c:	13 f8       	bld	r1, 3
     63e:	b5 94       	asr	r11
     640:	a7 94       	ror	r10
     642:	97 94       	ror	r9
     644:	87 94       	ror	r8
     646:	16 94       	lsr	r1
     648:	d1 f7       	brne	.-12     	; 0x63e <_ZN6BME28019convert_temperatureEv+0x36>
     64a:	84 1a       	sub	r8, r20
     64c:	95 0a       	sbc	r9, r21
     64e:	a6 0a       	sbc	r10, r22
     650:	b7 0a       	sbc	r11, r23
	int32_t var2 = 0;
	
	temperature = 0;
	
	/* calculate x1 */
	var1 =	((((raw_temp>>3) - ((int32_t)cal.dig_T1 <<1))) *
     652:	68 94       	set
     654:	12 f8       	bld	r1, 2
     656:	b5 95       	asr	r27
     658:	a7 95       	ror	r26
     65a:	97 95       	ror	r25
     65c:	87 95       	ror	r24
     65e:	16 94       	lsr	r1
     660:	d1 f7       	brne	.-12     	; 0x656 <_ZN6BME28019convert_temperatureEv+0x4e>
     662:	44 0f       	add	r20, r20
     664:	55 1f       	adc	r21, r21
     666:	66 1f       	adc	r22, r22
     668:	77 1f       	adc	r23, r23
     66a:	7c 01       	movw	r14, r24
     66c:	8d 01       	movw	r16, r26
     66e:	e4 1a       	sub	r14, r20
     670:	f5 0a       	sbc	r15, r21
     672:	06 0b       	sbc	r16, r22
     674:	17 0b       	sbc	r17, r23
     676:	a8 01       	movw	r20, r16
     678:	97 01       	movw	r18, r14
     67a:	a2 a1       	ldd	r26, Z+34	; 0x22
     67c:	b3 a1       	ldd	r27, Z+35	; 0x23
     67e:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__mulshisi3>
		 ((int32_t)cal.dig_T2)) >> 11;
     682:	6b 01       	movw	r12, r22
     684:	7c 01       	movw	r14, r24
     686:	0b 2e       	mov	r0, r27
     688:	bb e0       	ldi	r27, 0x0B	; 11
     68a:	f5 94       	asr	r15
     68c:	e7 94       	ror	r14
     68e:	d7 94       	ror	r13
     690:	c7 94       	ror	r12
     692:	ba 95       	dec	r27
     694:	d1 f7       	brne	.-12     	; 0x68a <_ZN6BME28019convert_temperatureEv+0x82>
     696:	b0 2d       	mov	r27, r0
	
	/* calculate x2 */
	var2 =	(((((raw_temp>>4) - ((int32_t)cal.dig_T1)) *
     698:	a5 01       	movw	r20, r10
     69a:	94 01       	movw	r18, r8
     69c:	c5 01       	movw	r24, r10
     69e:	b4 01       	movw	r22, r8
     6a0:	0e 94 c7 0c 	call	0x198e	; 0x198e <__mulsi3>
			   ((raw_temp>>4) - ((int32_t)cal.dig_T1))) >> 12) *
     6a4:	9b 01       	movw	r18, r22
     6a6:	ac 01       	movw	r20, r24
     6a8:	01 2e       	mov	r0, r17
     6aa:	1c e0       	ldi	r17, 0x0C	; 12
     6ac:	55 95       	asr	r21
     6ae:	47 95       	ror	r20
     6b0:	37 95       	ror	r19
     6b2:	27 95       	ror	r18
     6b4:	1a 95       	dec	r17
     6b6:	d1 f7       	brne	.-12     	; 0x6ac <_ZN6BME28019convert_temperatureEv+0xa4>
     6b8:	10 2d       	mov	r17, r0
     6ba:	a4 a1       	ldd	r26, Z+36	; 0x24
     6bc:	b5 a1       	ldd	r27, Z+37	; 0x25
     6be:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__mulshisi3>
			((int32_t)cal.dig_T3)) >> 14;
     6c2:	ab 01       	movw	r20, r22
     6c4:	bc 01       	movw	r22, r24
     6c6:	03 2e       	mov	r0, r19
     6c8:	3e e0       	ldi	r19, 0x0E	; 14
     6ca:	75 95       	asr	r23
     6cc:	67 95       	ror	r22
     6ce:	57 95       	ror	r21
     6d0:	47 95       	ror	r20
     6d2:	3a 95       	dec	r19
     6d4:	d1 f7       	brne	.-12     	; 0x6ca <_ZN6BME28019convert_temperatureEv+0xc2>
     6d6:	30 2d       	mov	r19, r0
	
	cal.t_fine = var1 + var2;
     6d8:	4c 0d       	add	r20, r12
     6da:	5d 1d       	adc	r21, r13
     6dc:	6e 1d       	adc	r22, r14
     6de:	7f 1d       	adc	r23, r15
     6e0:	df 01       	movw	r26, r30
     6e2:	af 5b       	subi	r26, 0xBF	; 191
     6e4:	bf 4f       	sbci	r27, 0xFF	; 255
     6e6:	4d 93       	st	X+, r20
     6e8:	5d 93       	st	X+, r21
     6ea:	6d 93       	st	X+, r22
     6ec:	7c 93       	st	X, r23
     6ee:	13 97       	sbiw	r26, 0x03	; 3
	
	return (((cal.t_fine * 5 + 128) >> 8) - temp_cal);
     6f0:	6a 01       	movw	r12, r20
     6f2:	7b 01       	movw	r14, r22
     6f4:	cc 0c       	add	r12, r12
     6f6:	dd 1c       	adc	r13, r13
     6f8:	ee 1c       	adc	r14, r14
     6fa:	ff 1c       	adc	r15, r15
     6fc:	cc 0c       	add	r12, r12
     6fe:	dd 1c       	adc	r13, r13
     700:	ee 1c       	adc	r14, r14
     702:	ff 1c       	adc	r15, r15
     704:	d7 01       	movw	r26, r14
     706:	c6 01       	movw	r24, r12
     708:	84 0f       	add	r24, r20
     70a:	95 1f       	adc	r25, r21
     70c:	a6 1f       	adc	r26, r22
     70e:	b7 1f       	adc	r27, r23
     710:	80 58       	subi	r24, 0x80	; 128
     712:	9f 4f       	sbci	r25, 0xFF	; 255
     714:	af 4f       	sbci	r26, 0xFF	; 255
     716:	bf 4f       	sbci	r27, 0xFF	; 255
     718:	89 2f       	mov	r24, r25
     71a:	9a 2f       	mov	r25, r26
     71c:	ab 2f       	mov	r26, r27
     71e:	bb 27       	eor	r27, r27
     720:	a7 fd       	sbrc	r26, 7
     722:	ba 95       	dec	r27
     724:	c4 80       	ldd	r12, Z+4	; 0x04
     726:	d5 80       	ldd	r13, Z+5	; 0x05
     728:	e6 80       	ldd	r14, Z+6	; 0x06
     72a:	f7 80       	ldd	r15, Z+7	; 0x07
     72c:	bc 01       	movw	r22, r24
     72e:	cd 01       	movw	r24, r26
     730:	6c 19       	sub	r22, r12
     732:	7d 09       	sbc	r23, r13
     734:	8e 09       	sbc	r24, r14
     736:	9f 09       	sbc	r25, r15
}
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	ff 90       	pop	r15
     73e:	ef 90       	pop	r14
     740:	df 90       	pop	r13
     742:	cf 90       	pop	r12
     744:	bf 90       	pop	r11
     746:	af 90       	pop	r10
     748:	9f 90       	pop	r9
     74a:	8f 90       	pop	r8
     74c:	08 95       	ret

0000074e <_ZN6BME28016convert_humidityEv>:
 * Return:		uint32_t - the human-readable humidity reading accurate to 3
 *							decimal places in %rH where 42313 represents
 *							42313 / 1024 = 41.321 %rH
 ****************************************************************************/
uint32_t BME280::convert_humidity (void)
{
     74e:	4f 92       	push	r4
     750:	5f 92       	push	r5
     752:	6f 92       	push	r6
     754:	7f 92       	push	r7
     756:	8f 92       	push	r8
     758:	9f 92       	push	r9
     75a:	af 92       	push	r10
     75c:	bf 92       	push	r11
     75e:	cf 92       	push	r12
     760:	df 92       	push	r13
     762:	ef 92       	push	r14
     764:	ff 92       	push	r15
     766:	fc 01       	movw	r30, r24
	int32_t var1;
	
	/* Utilize t_fine calculation */
	var1 = (cal.t_fine - ((int32_t)76800));
     768:	dc 01       	movw	r26, r24
     76a:	af 5b       	subi	r26, 0xBF	; 191
     76c:	bf 4f       	sbci	r27, 0xFF	; 255
     76e:	8d 90       	ld	r8, X+
     770:	9d 90       	ld	r9, X+
     772:	ad 90       	ld	r10, X+
     774:	bc 90       	ld	r11, X
     776:	2c e2       	ldi	r18, 0x2C	; 44
     778:	92 1a       	sub	r9, r18
     77a:	21 e0       	ldi	r18, 0x01	; 1
     77c:	a2 0a       	sbc	r10, r18
     77e:	b1 08       	sbc	r11, r1
	
	/* Calculate var1 - part 1	 */
	var1 =	(((((raw_hum << 14) - (((int32_t)cal.dig_H4) << 20) -
     780:	c0 88       	ldd	r12, Z+16	; 0x10
     782:	d1 88       	ldd	r13, Z+17	; 0x11
     784:	e2 88       	ldd	r14, Z+18	; 0x12
     786:	f3 88       	ldd	r15, Z+19	; 0x13
     788:	0b 2e       	mov	r0, r27
     78a:	be e0       	ldi	r27, 0x0E	; 14
     78c:	cc 0c       	add	r12, r12
     78e:	dd 1c       	adc	r13, r13
     790:	ee 1c       	adc	r14, r14
     792:	ff 1c       	adc	r15, r15
     794:	ba 95       	dec	r27
     796:	d1 f7       	brne	.-12     	; 0x78c <_ZN6BME28016convert_humidityEv+0x3e>
     798:	b0 2d       	mov	r27, r0
     79a:	84 ad       	ldd	r24, Z+60	; 0x3c
     79c:	95 ad       	ldd	r25, Z+61	; 0x3d
     79e:	09 2e       	mov	r0, r25
     7a0:	00 0c       	add	r0, r0
     7a2:	aa 0b       	sbc	r26, r26
     7a4:	bb 0b       	sbc	r27, r27
     7a6:	07 2e       	mov	r0, r23
     7a8:	74 e1       	ldi	r23, 0x14	; 20
     7aa:	88 0f       	add	r24, r24
     7ac:	99 1f       	adc	r25, r25
     7ae:	aa 1f       	adc	r26, r26
     7b0:	bb 1f       	adc	r27, r27
     7b2:	7a 95       	dec	r23
     7b4:	d1 f7       	brne	.-12     	; 0x7aa <_ZN6BME28016convert_humidityEv+0x5c>
     7b6:	70 2d       	mov	r23, r0
     7b8:	c8 1a       	sub	r12, r24
     7ba:	d9 0a       	sbc	r13, r25
     7bc:	ea 0a       	sbc	r14, r26
     7be:	fb 0a       	sbc	r15, r27
				(((int32_t)cal.dig_H5) * var1)) + ((int32_t)16384)) >> 15) *
     7c0:	a6 ad       	ldd	r26, Z+62	; 0x3e
     7c2:	b7 ad       	ldd	r27, Z+63	; 0x3f
     7c4:	a5 01       	movw	r20, r10
     7c6:	94 01       	movw	r18, r8
     7c8:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__mulshisi3>
	
	/* Utilize t_fine calculation */
	var1 = (cal.t_fine - ((int32_t)76800));
	
	/* Calculate var1 - part 1	 */
	var1 =	(((((raw_hum << 14) - (((int32_t)cal.dig_H4) << 20) -
     7cc:	c6 1a       	sub	r12, r22
     7ce:	d7 0a       	sbc	r13, r23
     7d0:	e8 0a       	sbc	r14, r24
     7d2:	f9 0a       	sbc	r15, r25
				(((int32_t)cal.dig_H5) * var1)) + ((int32_t)16384)) >> 15) *
     7d4:	30 e4       	ldi	r19, 0x40	; 64
     7d6:	d3 0e       	add	r13, r19
     7d8:	e1 1c       	adc	r14, r1
     7da:	f1 1c       	adc	r15, r1
     7dc:	0b 2e       	mov	r0, r27
     7de:	bf e0       	ldi	r27, 0x0F	; 15
     7e0:	f5 94       	asr	r15
     7e2:	e7 94       	ror	r14
     7e4:	d7 94       	ror	r13
     7e6:	c7 94       	ror	r12
     7e8:	ba 95       	dec	r27
     7ea:	d1 f7       	brne	.-12     	; 0x7e0 <_ZN6BME28016convert_humidityEv+0x92>
     7ec:	b0 2d       	mov	r27, r0
			 (((((((var1 * ((int32_t)cal.dig_H6)) >> 10) *
     7ee:	df 01       	movw	r26, r30
     7f0:	a0 5c       	subi	r26, 0xC0	; 192
     7f2:	bf 4f       	sbci	r27, 0xFF	; 255
     7f4:	ac 91       	ld	r26, X
     7f6:	0a 2e       	mov	r0, r26
     7f8:	00 0c       	add	r0, r0
     7fa:	bb 0b       	sbc	r27, r27
     7fc:	a5 01       	movw	r20, r10
     7fe:	94 01       	movw	r18, r8
     800:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__mulshisi3>
     804:	2b 01       	movw	r4, r22
     806:	3c 01       	movw	r6, r24
     808:	03 2e       	mov	r0, r19
     80a:	3a e0       	ldi	r19, 0x0A	; 10
     80c:	75 94       	asr	r7
     80e:	67 94       	ror	r6
     810:	57 94       	ror	r5
     812:	47 94       	ror	r4
     814:	3a 95       	dec	r19
     816:	d1 f7       	brne	.-12     	; 0x80c <_ZN6BME28016convert_humidityEv+0xbe>
     818:	30 2d       	mov	r19, r0
				  (((var1 * ((int32_t)cal.dig_H3)) >> 11)
     81a:	a3 ad       	ldd	r26, Z+59	; 0x3b
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__muluhisi3>
     822:	dc 01       	movw	r26, r24
     824:	cb 01       	movw	r24, r22
     826:	07 2e       	mov	r0, r23
     828:	7b e0       	ldi	r23, 0x0B	; 11
     82a:	b5 95       	asr	r27
     82c:	a7 95       	ror	r26
     82e:	97 95       	ror	r25
     830:	87 95       	ror	r24
     832:	7a 95       	dec	r23
     834:	d1 f7       	brne	.-12     	; 0x82a <_ZN6BME28016convert_humidityEv+0xdc>
     836:	70 2d       	mov	r23, r0
				   + ((int32_t)32768))) >> 10) +	
     838:	bc 01       	movw	r22, r24
     83a:	cd 01       	movw	r24, r26
     83c:	70 58       	subi	r23, 0x80	; 128
     83e:	8f 4f       	sbci	r24, 0xFF	; 255
     840:	9f 4f       	sbci	r25, 0xFF	; 255
	var1 = (cal.t_fine - ((int32_t)76800));
	
	/* Calculate var1 - part 1	 */
	var1 =	(((((raw_hum << 14) - (((int32_t)cal.dig_H4) << 20) -
				(((int32_t)cal.dig_H5) * var1)) + ((int32_t)16384)) >> 15) *
			 (((((((var1 * ((int32_t)cal.dig_H6)) >> 10) *
     842:	a3 01       	movw	r20, r6
     844:	92 01       	movw	r18, r4
     846:	0e 94 c7 0c 	call	0x198e	; 0x198e <__mulsi3>
				  (((var1 * ((int32_t)cal.dig_H3)) >> 11)
				   + ((int32_t)32768))) >> 10) +	
     84a:	dc 01       	movw	r26, r24
     84c:	cb 01       	movw	r24, r22
     84e:	07 2e       	mov	r0, r23
     850:	7a e0       	ldi	r23, 0x0A	; 10
     852:	b5 95       	asr	r27
     854:	a7 95       	ror	r26
     856:	97 95       	ror	r25
     858:	87 95       	ror	r24
     85a:	7a 95       	dec	r23
     85c:	d1 f7       	brne	.-12     	; 0x852 <_ZN6BME28016convert_humidityEv+0x104>
     85e:	70 2d       	mov	r23, r0
     860:	9c 01       	movw	r18, r24
     862:	ad 01       	movw	r20, r26
     864:	40 5e       	subi	r20, 0xE0	; 224
     866:	5f 4f       	sbci	r21, 0xFF	; 255
				((int32_t)2097152)) * ((int32_t)cal.dig_H2) + 8192) >> 14));
     868:	a1 ad       	ldd	r26, Z+57	; 0x39
     86a:	b2 ad       	ldd	r27, Z+58	; 0x3a
     86c:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__mulshisi3>
     870:	dc 01       	movw	r26, r24
     872:	cb 01       	movw	r24, r22
     874:	90 5e       	subi	r25, 0xE0	; 224
     876:	af 4f       	sbci	r26, 0xFF	; 255
     878:	bf 4f       	sbci	r27, 0xFF	; 255
     87a:	bc 01       	movw	r22, r24
     87c:	cd 01       	movw	r24, r26
     87e:	05 2e       	mov	r0, r21
     880:	5e e0       	ldi	r21, 0x0E	; 14
     882:	95 95       	asr	r25
     884:	87 95       	ror	r24
     886:	77 95       	ror	r23
     888:	67 95       	ror	r22
     88a:	5a 95       	dec	r21
     88c:	d1 f7       	brne	.-12     	; 0x882 <_ZN6BME28016convert_humidityEv+0x134>
     88e:	50 2d       	mov	r21, r0
     890:	a7 01       	movw	r20, r14
     892:	96 01       	movw	r18, r12
     894:	0e 94 c7 0c 	call	0x198e	; 0x198e <__mulsi3>
     898:	6b 01       	movw	r12, r22
     89a:	7c 01       	movw	r14, r24
	
	/* Calculate var1 - part 2 */
	var1 = (var1 - (((((var1 >> 15) * (var1 >> 15)) >> 7)
     89c:	05 2e       	mov	r0, r21
     89e:	5f e0       	ldi	r21, 0x0F	; 15
     8a0:	95 95       	asr	r25
     8a2:	87 95       	ror	r24
     8a4:	77 95       	ror	r23
     8a6:	67 95       	ror	r22
     8a8:	5a 95       	dec	r21
     8aa:	d1 f7       	brne	.-12     	; 0x8a0 <_ZN6BME28016convert_humidityEv+0x152>
     8ac:	50 2d       	mov	r21, r0
     8ae:	9b 01       	movw	r18, r22
     8b0:	ac 01       	movw	r20, r24
     8b2:	0e 94 c7 0c 	call	0x198e	; 0x198e <__mulsi3>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	68 94       	set
     8bc:	16 f8       	bld	r1, 6
     8be:	55 95       	asr	r21
     8c0:	47 95       	ror	r20
     8c2:	37 95       	ror	r19
     8c4:	27 95       	ror	r18
     8c6:	16 94       	lsr	r1
     8c8:	d1 f7       	brne	.-12     	; 0x8be <_ZN6BME28016convert_humidityEv+0x170>
			* ((int32_t)cal.dig_H1)) >> 4));
     8ca:	a0 ad       	ldd	r26, Z+56	; 0x38
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__muluhisi3>
     8d2:	dc 01       	movw	r26, r24
     8d4:	cb 01       	movw	r24, r22
     8d6:	68 94       	set
     8d8:	13 f8       	bld	r1, 3
     8da:	b5 95       	asr	r27
     8dc:	a7 95       	ror	r26
     8de:	97 95       	ror	r25
     8e0:	87 95       	ror	r24
     8e2:	16 94       	lsr	r1
     8e4:	d1 f7       	brne	.-12     	; 0x8da <_ZN6BME28016convert_humidityEv+0x18c>
	
	
	/* Check boundaries */	
	var1 = (var1 < 0 ? 0 : var1);
     8e6:	a7 01       	movw	r20, r14
     8e8:	96 01       	movw	r18, r12
     8ea:	28 1b       	sub	r18, r24
     8ec:	39 0b       	sbc	r19, r25
     8ee:	4a 0b       	sbc	r20, r26
     8f0:	5b 0b       	sbc	r21, r27
     8f2:	da 01       	movw	r26, r20
     8f4:	c9 01       	movw	r24, r18
     8f6:	1a f4       	brpl	.+6      	; 0x8fe <_ZN6BME28016convert_humidityEv+0x1b0>
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	dc 01       	movw	r26, r24
	var1 = (var1 > 419430400 ? 419430400 : var1);
     8fe:	81 30       	cpi	r24, 0x01	; 1
     900:	91 05       	cpc	r25, r1
     902:	a1 05       	cpc	r26, r1
     904:	39 e1       	ldi	r19, 0x19	; 25
     906:	b3 07       	cpc	r27, r19
     908:	24 f0       	brlt	.+8      	; 0x912 <__stack+0x13>
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	a0 e0       	ldi	r26, 0x00	; 0
     910:	b9 e1       	ldi	r27, 0x19	; 25
	
	return (uint32_t)((var1 >> 12));
     912:	bc 01       	movw	r22, r24
     914:	cd 01       	movw	r24, r26
     916:	05 2e       	mov	r0, r21
     918:	5c e0       	ldi	r21, 0x0C	; 12
     91a:	95 95       	asr	r25
     91c:	87 95       	ror	r24
     91e:	77 95       	ror	r23
     920:	67 95       	ror	r22
     922:	5a 95       	dec	r21
     924:	d1 f7       	brne	.-12     	; 0x91a <__stack+0x1b>
     926:	50 2d       	mov	r21, r0
}
     928:	ff 90       	pop	r15
     92a:	ef 90       	pop	r14
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	bf 90       	pop	r11
     932:	af 90       	pop	r10
     934:	9f 90       	pop	r9
     936:	8f 90       	pop	r8
     938:	7f 90       	pop	r7
     93a:	6f 90       	pop	r6
     93c:	5f 90       	pop	r5
     93e:	4f 90       	pop	r4
     940:	08 95       	ret

00000942 <_ZN6BME2809read_dataEv>:
 * 
 * Return:		bool - the status of the operation (false = success,
 *													true = failure)
 ****************************************************************************/
bool BME280::read_data (void)
{
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
     954:	28 97       	sbiw	r28, 0x08	; 8
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	7c 01       	movw	r14, r24
	uint8_t data[NUM_DATA_REG];		// array to hold all of raw data from read
	
	// read in the data from the registers
	if (p_i2c->read(BME280_ADDR, BME280_P_RAW_MSB, data, NUM_DATA_REG))
     962:	08 e0       	ldi	r16, 0x08	; 8
     964:	9e 01       	movw	r18, r28
     966:	2f 5f       	subi	r18, 0xFF	; 255
     968:	3f 4f       	sbci	r19, 0xFF	; 255
     96a:	47 ef       	ldi	r20, 0xF7	; 247
     96c:	6e ee       	ldi	r22, 0xEE	; 238
     96e:	fc 01       	movw	r30, r24
     970:	80 81       	ld	r24, Z
     972:	91 81       	ldd	r25, Z+1	; 0x01
     974:	0e 94 34 07 	call	0xe68	; 0xe68 <_ZN3i2c4readEhhPhh>
     978:	d8 2e       	mov	r13, r24
     97a:	81 11       	cpse	r24, r1
     97c:	81 c0       	rjmp	.+258    	; 0xa80 <_ZN6BME2809read_dataEv+0x13e>
	}
	
	// store data in class variables
	raw_pres = (int32_t)(
						((uint32_t)data[NDX_P_MSB]  << P_T_MSB_SHIFT)
						| ((uint32_t)data[NDX_P_LSB]  << P_T_LSB_SHIFT)
     97e:	8a 81       	ldd	r24, Y+2	; 0x02
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	a0 e0       	ldi	r26, 0x00	; 0
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	88 0f       	add	r24, r24
     988:	99 1f       	adc	r25, r25
     98a:	aa 1f       	adc	r26, r26
     98c:	bb 1f       	adc	r27, r27
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	aa 1f       	adc	r26, r26
     994:	bb 1f       	adc	r27, r27
     996:	88 0f       	add	r24, r24
     998:	99 1f       	adc	r25, r25
     99a:	aa 1f       	adc	r26, r26
     99c:	bb 1f       	adc	r27, r27
     99e:	88 0f       	add	r24, r24
     9a0:	99 1f       	adc	r25, r25
     9a2:	aa 1f       	adc	r26, r26
     9a4:	bb 1f       	adc	r27, r27
		return true;
	}
	
	// store data in class variables
	raw_pres = (int32_t)(
						((uint32_t)data[NDX_P_MSB]  << P_T_MSB_SHIFT)
     9a6:	49 81       	ldd	r20, Y+1	; 0x01
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	03 2e       	mov	r0, r19
     9b0:	3c e0       	ldi	r19, 0x0C	; 12
     9b2:	44 0f       	add	r20, r20
     9b4:	55 1f       	adc	r21, r21
     9b6:	66 1f       	adc	r22, r22
     9b8:	77 1f       	adc	r23, r23
     9ba:	3a 95       	dec	r19
     9bc:	d1 f7       	brne	.-12     	; 0x9b2 <_ZN6BME2809read_dataEv+0x70>
     9be:	30 2d       	mov	r19, r0
						| ((uint32_t)data[NDX_P_LSB]  << P_T_LSB_SHIFT)
     9c0:	84 2b       	or	r24, r20
     9c2:	95 2b       	or	r25, r21
     9c4:	a6 2b       	or	r26, r22
     9c6:	b7 2b       	or	r27, r23
						| (((uint32_t)data[NDX_P_XLSB] >> P_T_XLSB_SHIFT) & 0x0F)
     9c8:	2b 81       	ldd	r18, Y+3	; 0x03
     9ca:	22 95       	swap	r18
     9cc:	2f 70       	andi	r18, 0x0F	; 15
     9ce:	82 2b       	or	r24, r18
						);
     9d0:	f7 01       	movw	r30, r14
     9d2:	80 87       	std	Z+8, r24	; 0x08
     9d4:	91 87       	std	Z+9, r25	; 0x09
     9d6:	a2 87       	std	Z+10, r26	; 0x0a
     9d8:	b3 87       	std	Z+11, r27	; 0x0b
	
	raw_temp = (int32_t)(
						((uint32_t)data[NDX_T_MSB]  << P_T_MSB_SHIFT)
						| ((uint32_t)data[NDX_T_LSB]  << P_T_LSB_SHIFT)
     9da:	4d 81       	ldd	r20, Y+5	; 0x05
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	44 0f       	add	r20, r20
     9e4:	55 1f       	adc	r21, r21
     9e6:	66 1f       	adc	r22, r22
     9e8:	77 1f       	adc	r23, r23
     9ea:	44 0f       	add	r20, r20
     9ec:	55 1f       	adc	r21, r21
     9ee:	66 1f       	adc	r22, r22
     9f0:	77 1f       	adc	r23, r23
     9f2:	44 0f       	add	r20, r20
     9f4:	55 1f       	adc	r21, r21
     9f6:	66 1f       	adc	r22, r22
     9f8:	77 1f       	adc	r23, r23
     9fa:	44 0f       	add	r20, r20
     9fc:	55 1f       	adc	r21, r21
     9fe:	66 1f       	adc	r22, r22
     a00:	77 1f       	adc	r23, r23
						| ((uint32_t)data[NDX_P_LSB]  << P_T_LSB_SHIFT)
						| (((uint32_t)data[NDX_P_XLSB] >> P_T_XLSB_SHIFT) & 0x0F)
						);
	
	raw_temp = (int32_t)(
						((uint32_t)data[NDX_T_MSB]  << P_T_MSB_SHIFT)
     a02:	0c 81       	ldd	r16, Y+4	; 0x04
     a04:	10 e0       	ldi	r17, 0x00	; 0
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	0f 2e       	mov	r0, r31
     a0c:	fc e0       	ldi	r31, 0x0C	; 12
     a0e:	00 0f       	add	r16, r16
     a10:	11 1f       	adc	r17, r17
     a12:	22 1f       	adc	r18, r18
     a14:	33 1f       	adc	r19, r19
     a16:	fa 95       	dec	r31
     a18:	d1 f7       	brne	.-12     	; 0xa0e <_ZN6BME2809read_dataEv+0xcc>
     a1a:	f0 2d       	mov	r31, r0
						| ((uint32_t)data[NDX_T_LSB]  << P_T_LSB_SHIFT)
     a1c:	40 2b       	or	r20, r16
     a1e:	51 2b       	or	r21, r17
     a20:	62 2b       	or	r22, r18
     a22:	73 2b       	or	r23, r19
						| (((uint32_t)data[NDX_T_XLSB] >> P_T_XLSB_SHIFT) & 0x0F)
     a24:	8e 81       	ldd	r24, Y+6	; 0x06
     a26:	82 95       	swap	r24
     a28:	8f 70       	andi	r24, 0x0F	; 15
     a2a:	48 2b       	or	r20, r24
						);
     a2c:	44 87       	std	Z+12, r20	; 0x0c
     a2e:	55 87       	std	Z+13, r21	; 0x0d
     a30:	66 87       	std	Z+14, r22	; 0x0e
     a32:	77 87       	std	Z+15, r23	; 0x0f
			  
	raw_hum  = (int32_t)(
						((uint32_t)data[NDX_H_MSB] << BYTE_SHIFT)
     a34:	8f 81       	ldd	r24, Y+7	; 0x07
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	ba 2f       	mov	r27, r26
     a3e:	a9 2f       	mov	r26, r25
     a40:	98 2f       	mov	r25, r24
     a42:	88 27       	eor	r24, r24
						| ((uint32_t)data[NDX_H_LSB])
     a44:	28 85       	ldd	r18, Y+8	; 0x08
     a46:	82 2b       	or	r24, r18
						);
     a48:	80 8b       	std	Z+16, r24	; 0x10
     a4a:	91 8b       	std	Z+17, r25	; 0x11
     a4c:	a2 8b       	std	Z+18, r26	; 0x12
     a4e:	b3 8b       	std	Z+19, r27	; 0x13
	
	// convert the raw values into human readable format
	pressure = convert_pressure();
     a50:	c7 01       	movw	r24, r14
     a52:	0e 94 72 00 	call	0xe4	; 0xe4 <_ZN6BME28016convert_pressureEv>
     a56:	f7 01       	movw	r30, r14
     a58:	64 8b       	std	Z+20, r22	; 0x14
     a5a:	75 8b       	std	Z+21, r23	; 0x15
     a5c:	86 8b       	std	Z+22, r24	; 0x16
     a5e:	97 8b       	std	Z+23, r25	; 0x17
	temperature = convert_temperature();
     a60:	c7 01       	movw	r24, r14
     a62:	0e 94 04 03 	call	0x608	; 0x608 <_ZN6BME28019convert_temperatureEv>
     a66:	f7 01       	movw	r30, r14
     a68:	60 8f       	std	Z+24, r22	; 0x18
     a6a:	71 8f       	std	Z+25, r23	; 0x19
     a6c:	82 8f       	std	Z+26, r24	; 0x1a
     a6e:	93 8f       	std	Z+27, r25	; 0x1b
	humidity = convert_humidity();
     a70:	c7 01       	movw	r24, r14
     a72:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN6BME28016convert_humidityEv>
     a76:	f7 01       	movw	r30, r14
     a78:	64 8f       	std	Z+28, r22	; 0x1c
     a7a:	75 8f       	std	Z+29, r23	; 0x1d
     a7c:	86 8f       	std	Z+30, r24	; 0x1e
     a7e:	97 8f       	std	Z+31, r25	; 0x1f
	
	return false;
}
     a80:	8d 2d       	mov	r24, r13
     a82:	28 96       	adiw	r28, 0x08	; 8
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	08 95       	ret

00000a9e <_ZN6BME2808read_calEv>:
 * 
 * Return:		bool - the status of the operation (false = success,
 *													true = failure)
 ****************************************************************************/
bool BME280::read_cal (void)
{
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	a1 97       	sbiw	r28, 0x21	; 33
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	cd bf       	out	0x3d, r28	; 61
     ab8:	7c 01       	movw	r14, r24
	uint8_t data1[BME280_CAL_RNG_1];	// hold calibration data from range 1
	uint8_t data2[BME280_CAL_RNG_2];	// hold calibration data from range 2
	
	if (p_i2c->read(BME280_ADDR, BME280_CAL_START_1, data1, BME280_CAL_RNG_1)
     aba:	0a e1       	ldi	r16, 0x1A	; 26
     abc:	9e 01       	movw	r18, r28
     abe:	2f 5f       	subi	r18, 0xFF	; 255
     ac0:	3f 4f       	sbci	r19, 0xFF	; 255
     ac2:	48 e8       	ldi	r20, 0x88	; 136
     ac4:	6e ee       	ldi	r22, 0xEE	; 238
     ac6:	fc 01       	movw	r30, r24
     ac8:	80 81       	ld	r24, Z
     aca:	91 81       	ldd	r25, Z+1	; 0x01
     acc:	0e 94 34 07 	call	0xe68	; 0xe68 <_ZN3i2c4readEhhPhh>
	 || p_i2c->read(BME280_ADDR, BME280_CAL_START_2, data2, BME280_CAL_RNG_2))
     ad0:	81 11       	cpse	r24, r1
     ad2:	95 c0       	rjmp	.+298    	; 0xbfe <_ZN6BME2808read_calEv+0x160>
     ad4:	07 e0       	ldi	r16, 0x07	; 7
     ad6:	9e 01       	movw	r18, r28
     ad8:	25 5e       	subi	r18, 0xE5	; 229
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	41 ee       	ldi	r20, 0xE1	; 225
     ade:	6e ee       	ldi	r22, 0xEE	; 238
     ae0:	f7 01       	movw	r30, r14
     ae2:	80 81       	ld	r24, Z
     ae4:	91 81       	ldd	r25, Z+1	; 0x01
     ae6:	0e 94 34 07 	call	0xe68	; 0xe68 <_ZN3i2c4readEhhPhh>
bool BME280::read_cal (void)
{
	uint8_t data1[BME280_CAL_RNG_1];	// hold calibration data from range 1
	uint8_t data2[BME280_CAL_RNG_2];	// hold calibration data from range 2
	
	if (p_i2c->read(BME280_ADDR, BME280_CAL_START_1, data1, BME280_CAL_RNG_1)
     aea:	81 11       	cpse	r24, r1
     aec:	88 c0       	rjmp	.+272    	; 0xbfe <_ZN6BME2808read_calEv+0x160>
		// There was an error in the read operation, propagate this message
		//DBG(this->p_serial, "BME280::read_cal FAILED to read cal reigsters\r\n");
		return true;
	}
	
	cal.dig_T1 = (uint16_t)(((uint16_t)data1[CAL_DIG_T1_MSB] << BYTE_SHIFT)
     aee:	2a 81       	ldd	r18, Y+2	; 0x02
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	32 2f       	mov	r19, r18
     af4:	22 27       	eor	r18, r18
							| data1[CAL_DIG_T1_LSB]);
     af6:	99 81       	ldd	r25, Y+1	; 0x01
     af8:	29 2b       	or	r18, r25
     afa:	f7 01       	movw	r30, r14
     afc:	31 a3       	std	Z+33, r19	; 0x21
     afe:	20 a3       	std	Z+32, r18	; 0x20
	cal.dig_T2 = (int16_t)(((uint16_t)data1[CAL_DIG_T2_MSB] << BYTE_SHIFT)
     b00:	2c 81       	ldd	r18, Y+4	; 0x04
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	32 2f       	mov	r19, r18
     b06:	22 27       	eor	r18, r18
							| data1[CAL_DIG_T2_LSB]);
     b08:	9b 81       	ldd	r25, Y+3	; 0x03
     b0a:	29 2b       	or	r18, r25
     b0c:	33 a3       	std	Z+35, r19	; 0x23
     b0e:	22 a3       	std	Z+34, r18	; 0x22
	cal.dig_T3 = (int16_t)(((uint16_t)data1[CAL_DIG_T3_MSB] << BYTE_SHIFT)
     b10:	2e 81       	ldd	r18, Y+6	; 0x06
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	32 2f       	mov	r19, r18
     b16:	22 27       	eor	r18, r18
							| data1[CAL_DIG_T3_LSB]);
     b18:	9d 81       	ldd	r25, Y+5	; 0x05
     b1a:	29 2b       	or	r18, r25
     b1c:	35 a3       	std	Z+37, r19	; 0x25
     b1e:	24 a3       	std	Z+36, r18	; 0x24
	
	cal.dig_P1 = (uint16_t)(((uint16_t)data1[CAL_DIG_P1_MSB] << BYTE_SHIFT)
     b20:	28 85       	ldd	r18, Y+8	; 0x08
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	32 2f       	mov	r19, r18
     b26:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P1_LSB]);
     b28:	9f 81       	ldd	r25, Y+7	; 0x07
     b2a:	29 2b       	or	r18, r25
     b2c:	37 a3       	std	Z+39, r19	; 0x27
     b2e:	26 a3       	std	Z+38, r18	; 0x26
	cal.dig_P2 = (int16_t)(((uint16_t)data1[CAL_DIG_P2_MSB] << BYTE_SHIFT)
     b30:	2a 85       	ldd	r18, Y+10	; 0x0a
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	32 2f       	mov	r19, r18
     b36:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P2_LSB]);
     b38:	99 85       	ldd	r25, Y+9	; 0x09
     b3a:	29 2b       	or	r18, r25
     b3c:	31 a7       	std	Z+41, r19	; 0x29
     b3e:	20 a7       	std	Z+40, r18	; 0x28
	cal.dig_P3 = (int16_t)(((uint16_t)data1[CAL_DIG_P3_MSB] << BYTE_SHIFT)
     b40:	2c 85       	ldd	r18, Y+12	; 0x0c
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	32 2f       	mov	r19, r18
     b46:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P3_LSB]);
     b48:	9b 85       	ldd	r25, Y+11	; 0x0b
     b4a:	29 2b       	or	r18, r25
     b4c:	33 a7       	std	Z+43, r19	; 0x2b
     b4e:	22 a7       	std	Z+42, r18	; 0x2a
	cal.dig_P4 = (int16_t)(((uint16_t)data1[CAL_DIG_P4_MSB] << BYTE_SHIFT)
     b50:	2e 85       	ldd	r18, Y+14	; 0x0e
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	32 2f       	mov	r19, r18
     b56:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P4_LSB]);
     b58:	9d 85       	ldd	r25, Y+13	; 0x0d
     b5a:	29 2b       	or	r18, r25
     b5c:	35 a7       	std	Z+45, r19	; 0x2d
     b5e:	24 a7       	std	Z+44, r18	; 0x2c
	cal.dig_P5 = (int16_t)(((uint16_t)data1[CAL_DIG_P5_MSB] << BYTE_SHIFT)
     b60:	28 89       	ldd	r18, Y+16	; 0x10
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	32 2f       	mov	r19, r18
     b66:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P5_LSB]);
     b68:	9f 85       	ldd	r25, Y+15	; 0x0f
     b6a:	29 2b       	or	r18, r25
     b6c:	37 a7       	std	Z+47, r19	; 0x2f
     b6e:	26 a7       	std	Z+46, r18	; 0x2e
	cal.dig_P6 = (int16_t)(((uint16_t)data1[CAL_DIG_P6_MSB] << BYTE_SHIFT)
     b70:	2a 89       	ldd	r18, Y+18	; 0x12
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	32 2f       	mov	r19, r18
     b76:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P6_LSB]);
     b78:	99 89       	ldd	r25, Y+17	; 0x11
     b7a:	29 2b       	or	r18, r25
     b7c:	31 ab       	std	Z+49, r19	; 0x31
     b7e:	20 ab       	std	Z+48, r18	; 0x30
	cal.dig_P7 = (int16_t)(((uint16_t)data1[CAL_DIG_P7_MSB] << BYTE_SHIFT)
     b80:	2c 89       	ldd	r18, Y+20	; 0x14
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	32 2f       	mov	r19, r18
     b86:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P7_LSB]);
     b88:	9b 89       	ldd	r25, Y+19	; 0x13
     b8a:	29 2b       	or	r18, r25
     b8c:	33 ab       	std	Z+51, r19	; 0x33
     b8e:	22 ab       	std	Z+50, r18	; 0x32
	cal.dig_P8 = (int16_t)(((uint16_t)data1[CAL_DIG_P8_MSB] << BYTE_SHIFT)
     b90:	2e 89       	ldd	r18, Y+22	; 0x16
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	32 2f       	mov	r19, r18
     b96:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P8_LSB]);
     b98:	9d 89       	ldd	r25, Y+21	; 0x15
     b9a:	29 2b       	or	r18, r25
     b9c:	35 ab       	std	Z+53, r19	; 0x35
     b9e:	24 ab       	std	Z+52, r18	; 0x34
	cal.dig_P9 = (int16_t)(((uint16_t)data1[CAL_DIG_P9_MSB] << BYTE_SHIFT)
     ba0:	28 8d       	ldd	r18, Y+24	; 0x18
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	32 2f       	mov	r19, r18
     ba6:	22 27       	eor	r18, r18
							| data1[CAL_DIG_P9_LSB]);
     ba8:	9f 89       	ldd	r25, Y+23	; 0x17
     baa:	29 2b       	or	r18, r25
     bac:	37 ab       	std	Z+55, r19	; 0x37
     bae:	26 ab       	std	Z+54, r18	; 0x36
	
	cal.dig_H1 = (uint8_t)data1[CAL_DIG_H1_LSB];
     bb0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bb2:	90 af       	std	Z+56, r25	; 0x38
	cal.dig_H2 = (int16_t)(((uint16_t)data2[CAL_DIG_H2_MSB] << BYTE_SHIFT)
     bb4:	2c 8d       	ldd	r18, Y+28	; 0x1c
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	32 2f       	mov	r19, r18
     bba:	22 27       	eor	r18, r18
							| data2[CAL_DIG_H2_LSB]);
     bbc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bbe:	29 2b       	or	r18, r25
     bc0:	32 af       	std	Z+58, r19	; 0x3a
     bc2:	21 af       	std	Z+57, r18	; 0x39
	cal.dig_H3 = (uint8_t)data2[CAL_DIG_H3_LSB];
     bc4:	9d 8d       	ldd	r25, Y+29	; 0x1d
     bc6:	93 af       	std	Z+59, r25	; 0x3b
	cal.dig_H4 = (int16_t)(((uint16_t)data2[CAL_DIG_H4_MSB] << NIB_SHIFT)
							| (data2[CAL_DIG_H4_LSB] & CAL_DIG_H_MSK));
     bc8:	9f 8d       	ldd	r25, Y+31	; 0x1f
     bca:	49 2f       	mov	r20, r25
     bcc:	4f 70       	andi	r20, 0x0F	; 15
	
	cal.dig_H1 = (uint8_t)data1[CAL_DIG_H1_LSB];
	cal.dig_H2 = (int16_t)(((uint16_t)data2[CAL_DIG_H2_MSB] << BYTE_SHIFT)
							| data2[CAL_DIG_H2_LSB]);
	cal.dig_H3 = (uint8_t)data2[CAL_DIG_H3_LSB];
	cal.dig_H4 = (int16_t)(((uint16_t)data2[CAL_DIG_H4_MSB] << NIB_SHIFT)
     bce:	2e 8d       	ldd	r18, Y+30	; 0x1e
     bd0:	f0 e1       	ldi	r31, 0x10	; 16
     bd2:	2f 9f       	mul	r18, r31
     bd4:	90 01       	movw	r18, r0
     bd6:	11 24       	eor	r1, r1
							| (data2[CAL_DIG_H4_LSB] & CAL_DIG_H_MSK));
     bd8:	24 2b       	or	r18, r20
     bda:	f7 01       	movw	r30, r14
     bdc:	35 af       	std	Z+61, r19	; 0x3d
     bde:	24 af       	std	Z+60, r18	; 0x3c
	cal.dig_H5 = (int16_t)(((uint16_t)data2[CAL_DIG_H5_MSB] << NIB_SHIFT)
							| ((data2[CAL_DIG_H5_LSB] >> NIB_SHIFT) 
     be0:	92 95       	swap	r25
     be2:	9f 70       	andi	r25, 0x0F	; 15
	cal.dig_H2 = (int16_t)(((uint16_t)data2[CAL_DIG_H2_MSB] << BYTE_SHIFT)
							| data2[CAL_DIG_H2_LSB]);
	cal.dig_H3 = (uint8_t)data2[CAL_DIG_H3_LSB];
	cal.dig_H4 = (int16_t)(((uint16_t)data2[CAL_DIG_H4_MSB] << NIB_SHIFT)
							| (data2[CAL_DIG_H4_LSB] & CAL_DIG_H_MSK));
	cal.dig_H5 = (int16_t)(((uint16_t)data2[CAL_DIG_H5_MSB] << NIB_SHIFT)
     be4:	28 a1       	ldd	r18, Y+32	; 0x20
     be6:	f0 e1       	ldi	r31, 0x10	; 16
     be8:	2f 9f       	mul	r18, r31
     bea:	90 01       	movw	r18, r0
     bec:	11 24       	eor	r1, r1
							| ((data2[CAL_DIG_H5_LSB] >> NIB_SHIFT) 
     bee:	29 2b       	or	r18, r25
								& CAL_DIG_H_MSK));
     bf0:	f7 01       	movw	r30, r14
     bf2:	37 af       	std	Z+63, r19	; 0x3f
     bf4:	26 af       	std	Z+62, r18	; 0x3e
	cal.dig_H6 = (int8_t)data2[CAL_DIG_H6_LSB];
     bf6:	e0 5c       	subi	r30, 0xC0	; 192
     bf8:	ff 4f       	sbci	r31, 0xFF	; 255
     bfa:	99 a1       	ldd	r25, Y+33	; 0x21
     bfc:	90 83       	st	Z, r25
	
	return false;
}
     bfe:	a1 96       	adiw	r28, 0x21	; 33
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	ef 90       	pop	r14
     c14:	08 95       	ret

00000c16 <_ZN6BME280C1EP3i2cP6seriall>:
 * Parameters:	ptr_i2c		- pointer to an i2c object to be used for 
 *								communicating with the BME280 sensor
 *				ptr_serial	- pointer to a serial object to be used for
 *								debugging
 ****************************************************************************/
BME280::BME280 (i2c* ptr_i2c, serial *ptr_serial, int32_t temperature_cal)
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	ec 01       	movw	r28, r24
     c20:	cb 01       	movw	r24, r22
{
	p_i2c = ptr_i2c;			// store local copy of i2c pointer for use
     c22:	79 83       	std	Y+1, r23	; 0x01
     c24:	68 83       	st	Y, r22
	p_serial = ptr_serial;		// store local copy of serial pointer for debug
     c26:	5b 83       	std	Y+3, r21	; 0x03
     c28:	4a 83       	std	Y+2, r20	; 0x02
	temp_cal = temperature_cal;	// store local copy of temp cal
     c2a:	0c 83       	std	Y+4, r16	; 0x04
     c2c:	1d 83       	std	Y+5, r17	; 0x05
     c2e:	2e 83       	std	Y+6, r18	; 0x06
     c30:	3f 83       	std	Y+7, r19	; 0x07
	
	if (p_i2c->ping(BME280_ADDR))
     c32:	6e ee       	ldi	r22, 0xEE	; 238
     c34:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_ZN3i2c4pingEh>
     c38:	88 23       	and	r24, r24
     c3a:	69 f0       	breq	.+26     	; 0xc56 <_ZN6BME280C1EP3i2cP6seriall+0x40>
		//DBG(this->p_serial, "BME280 <0x%X> DEAD\r\n", BME280_ADDR);
		return;
	}

	// initialize the sensor registers
	if(init())
     c3c:	ce 01       	movw	r24, r28
     c3e:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN6BME2804initEv>
     c42:	81 11       	cpse	r24, r1
     c44:	08 c0       	rjmp	.+16     	; 0xc56 <_ZN6BME280C1EP3i2cP6seriall+0x40>
		//DBG(this->p_serial, "BME280::BME280 FAILED BME280::init\r\n");
		return;
	}
	
	// read out cal registers for calculations
	if (read_cal())
     c46:	ce 01       	movw	r24, r28
     c48:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN6BME2808read_calEv>
     c4c:	81 11       	cpse	r24, r1
     c4e:	03 c0       	rjmp	.+6      	; 0xc56 <_ZN6BME280C1EP3i2cP6seriall+0x40>
		//DBG(this->p_serial, "BME280::BME280 FAILED BME280::read_cal\r\n");
		return;
	}
	
	// initial read of data to fill sensor data
	read_data();
     c50:	ce 01       	movw	r24, r28
     c52:	0e 94 a1 04 	call	0x942	; 0x942 <_ZN6BME2809read_dataEv>
	
	//DBG(this->p_serial, "BME280 Constructor OK!\r\n");
}
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	08 95       	ret

00000c60 <_ZN6BME28010BME280TaskEv>:
	
	return false;
}

void BME280::BME280Task (void)
{
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	ec 01       	movw	r28, r24
	static uint8_t runs = 0;
	int32_t temp_f;
	
	read_data();
     c66:	0e 94 a1 04 	call	0x942	; 0x942 <_ZN6BME2809read_dataEv>
	temp_f = TEMP_C_TO_F(temperature);
     c6a:	48 8d       	ldd	r20, Y+24	; 0x18
     c6c:	59 8d       	ldd	r21, Y+25	; 0x19
     c6e:	6a 8d       	ldd	r22, Y+26	; 0x1a
     c70:	7b 8d       	ldd	r23, Y+27	; 0x1b
     c72:	db 01       	movw	r26, r22
     c74:	ca 01       	movw	r24, r20
     c76:	88 0f       	add	r24, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	aa 1f       	adc	r26, r26
     c7c:	bb 1f       	adc	r27, r27
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	aa 1f       	adc	r26, r26
     c84:	bb 1f       	adc	r27, r27
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	aa 1f       	adc	r26, r26
     c8c:	bb 1f       	adc	r27, r27
     c8e:	84 0f       	add	r24, r20
     c90:	95 1f       	adc	r25, r21
     c92:	a6 1f       	adc	r26, r22
     c94:	b7 1f       	adc	r27, r23
     c96:	bc 01       	movw	r22, r24
     c98:	cd 01       	movw	r24, r26
     c9a:	60 58       	subi	r22, 0x80	; 128
     c9c:	71 4c       	sbci	r23, 0xC1	; 193
     c9e:	8f 4f       	sbci	r24, 0xFF	; 255
     ca0:	9f 4f       	sbci	r25, 0xFF	; 255
     ca2:	25 e0       	ldi	r18, 0x05	; 5
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__divmodsi4>
	
	// update global values to be used to send packet
	ext_hum = humidity;
     cae:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cb0:	9d 8d       	ldd	r25, Y+29	; 0x1d
     cb2:	ae 8d       	ldd	r26, Y+30	; 0x1e
     cb4:	bf 8d       	ldd	r27, Y+31	; 0x1f
     cb6:	80 93 28 01 	sts	0x0128, r24
     cba:	90 93 29 01 	sts	0x0129, r25
     cbe:	a0 93 2a 01 	sts	0x012A, r26
     cc2:	b0 93 2b 01 	sts	0x012B, r27
	ext_temp = temp_f;
     cc6:	20 93 2c 01 	sts	0x012C, r18
     cca:	30 93 2d 01 	sts	0x012D, r19
     cce:	40 93 2e 01 	sts	0x012E, r20
     cd2:	50 93 2f 01 	sts	0x012F, r21
			
		DBG(this->p_serial, "Pressure: %luPa\r\n",
			pressure);
	}
	*/
	runs++;
     cd6:	80 91 24 01 	lds	r24, 0x0124
     cda:	8f 5f       	subi	r24, 0xFF	; 255
     cdc:	80 93 24 01 	sts	0x0124, r24
	return;
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	08 95       	ret

00000ce6 <_ZN3i2cC1EP6serial>:
 * 
 * Parameters:	ptr_serial - a reference to the serial debug object
 ****************************************************************************/
i2c::i2c (serial *ptr_serial)
{
	p_serial = ptr_serial;	// store a local copy of serial pointer for debug
     ce6:	fc 01       	movw	r30, r24
     ce8:	71 83       	std	Z+1, r23	; 0x01
     cea:	60 83       	st	Z, r22
	
	// set the bit rate to 200kHz, with no prescaler
	TWSR = 0x00;
     cec:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = 32;
     cf0:	80 e2       	ldi	r24, 0x20	; 32
     cf2:	80 93 b8 00 	sts	0x00B8, r24
	
	// enable i2c protocol
	TWCR = (1 << TWEN);
     cf6:	84 e0       	ldi	r24, 0x04	; 4
     cf8:	80 93 bc 00 	sts	0x00BC, r24
     cfc:	08 95       	ret

00000cfe <_ZN3i2c5startEv>:
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::start (void)
{
	// put a start condition on the line
	TWCR = ((1 << TWSTA) | (1 << TWEN) | (1 << TWINT));
     cfe:	ec eb       	ldi	r30, 0xBC	; 188
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	84 ea       	ldi	r24, 0xA4	; 164
     d04:	80 83       	st	Z, r24
	
	// wait for TWINT to go low, which signals start condition completed
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     d06:	80 81       	ld	r24, Z
     d08:	88 23       	and	r24, r24
     d0a:	24 f4       	brge	.+8      	; 0xd14 <_ZN3i2c5startEv+0x16>
     d0c:	0a c0       	rjmp	.+20     	; 0xd22 <_ZN3i2c5startEv+0x24>
     d0e:	01 97       	sbiw	r24, 0x01	; 1
	{
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
     d10:	29 f4       	brne	.+10     	; 0xd1c <_ZN3i2c5startEv+0x1e>
     d12:	0f c0       	rjmp	.+30     	; 0xd32 <_ZN3i2c5startEv+0x34>
{
	// put a start condition on the line
	TWCR = ((1 << TWSTA) | (1 << TWEN) | (1 << TWINT));
	
	// wait for TWINT to go low, which signals start condition completed
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	94 e0       	ldi	r25, 0x04	; 4
     d18:	ec eb       	ldi	r30, 0xBC	; 188
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	20 81       	ld	r18, Z
     d1e:	22 23       	and	r18, r18
     d20:	b4 f7       	brge	.-20     	; 0xd0e <_ZN3i2c5startEv+0x10>
			return true;
		}
	}
	
	// check status register
	if ((TWSR & STAT_MSK) != STAT_START)
     d22:	90 91 b9 00 	lds	r25, 0x00B9
     d26:	98 7f       	andi	r25, 0xF8	; 248
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	98 30       	cpi	r25, 0x08	; 8
     d2c:	19 f4       	brne	.+6      	; 0xd34 <_ZN3i2c5startEv+0x36>
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	08 95       	ret
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
		{
			// timeout occurred, error
			//DBG(this->p_serial, "i2c::start FAILED - timed out\r\n");
			return true;
     d32:	81 e0       	ldi	r24, 0x01	; 1
		//DBG(this->p_serial, "i2c::start FAILED - status (0x%2X) bad\r\n", TWSR);
		return true;
	}
	
	return false;
}
     d34:	08 95       	ret

00000d36 <_ZN3i2c7restartEv>:
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::restart (void)
{
	// put another start condition on the line
	TWCR = ((1 << TWSTA) | (1 << TWEN) | (1 << TWINT));
     d36:	ec eb       	ldi	r30, 0xBC	; 188
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	84 ea       	ldi	r24, 0xA4	; 164
     d3c:	80 83       	st	Z, r24
	
	// wait for TWINT to go low, which signals start condition completed
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     d3e:	80 81       	ld	r24, Z
     d40:	88 23       	and	r24, r24
     d42:	24 f4       	brge	.+8      	; 0xd4c <_ZN3i2c7restartEv+0x16>
     d44:	0a c0       	rjmp	.+20     	; 0xd5a <_ZN3i2c7restartEv+0x24>
     d46:	01 97       	sbiw	r24, 0x01	; 1
	{
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
     d48:	29 f4       	brne	.+10     	; 0xd54 <_ZN3i2c7restartEv+0x1e>
     d4a:	0f c0       	rjmp	.+30     	; 0xd6a <_ZN3i2c7restartEv+0x34>
{
	// put another start condition on the line
	TWCR = ((1 << TWSTA) | (1 << TWEN) | (1 << TWINT));
	
	// wait for TWINT to go low, which signals start condition completed
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	94 e0       	ldi	r25, 0x04	; 4
     d50:	ec eb       	ldi	r30, 0xBC	; 188
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	20 81       	ld	r18, Z
     d56:	22 23       	and	r18, r18
     d58:	b4 f7       	brge	.-20     	; 0xd46 <_ZN3i2c7restartEv+0x10>
			return true;
		}
	}
	
	// check status register
	if ((TWSR & STAT_MSK) != STAT_RESTART)
     d5a:	90 91 b9 00 	lds	r25, 0x00B9
     d5e:	98 7f       	andi	r25, 0xF8	; 248
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 31       	cpi	r25, 0x10	; 16
     d64:	19 f4       	brne	.+6      	; 0xd6c <_ZN3i2c7restartEv+0x36>
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	08 95       	ret
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
		{
			// timeout occurred, error
			//DBG(this->p_serial, "i2c::restart FAILED - timed out\r\n");
			return true;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
		//DBG(this->p_serial, "i2c::restart FAILED - status (0x%2X) bad\r\n", TWSR);
		return true;
	}
	
	return false;	
}
     d6c:	08 95       	ret

00000d6e <_ZN3i2c10write_byteEh>:
 * Parameters:	data - the byte of data being written to the bus
 * Return:		bool - status of operation (true = ack, false = nack)
 ****************************************************************************/
bool i2c::write_byte (uint8_t data)
{	
	TWDR = data;
     d6e:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = ((1 << TWINT) | (1 << TWEN));
     d72:	ec eb       	ldi	r30, 0xBC	; 188
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	84 e8       	ldi	r24, 0x84	; 132
     d78:	80 83       	st	Z, r24
	

	// wait for TWINT to go low, which signals write condition sent
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     d7a:	80 81       	ld	r24, Z
     d7c:	88 23       	and	r24, r24
     d7e:	24 f4       	brge	.+8      	; 0xd88 <_ZN3i2c10write_byteEh+0x1a>
     d80:	0a c0       	rjmp	.+20     	; 0xd96 <_ZN3i2c10write_byteEh+0x28>
     d82:	01 97       	sbiw	r24, 0x01	; 1
	{
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
     d84:	29 f4       	brne	.+10     	; 0xd90 <_ZN3i2c10write_byteEh+0x22>
     d86:	12 c0       	rjmp	.+36     	; 0xdac <_ZN3i2c10write_byteEh+0x3e>
	TWDR = data;
	TWCR = ((1 << TWINT) | (1 << TWEN));
	

	// wait for TWINT to go low, which signals write condition sent
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	94 e0       	ldi	r25, 0x04	; 4
     d8c:	ec eb       	ldi	r30, 0xBC	; 188
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	20 81       	ld	r18, Z
     d92:	22 23       	and	r18, r18
     d94:	b4 f7       	brge	.-20     	; 0xd82 <_ZN3i2c10write_byteEh+0x14>
			return true;
		}
	}
	
	// check the ACK status of the write
	switch (TWSR & STAT_MSK)
     d96:	80 91 b9 00 	lds	r24, 0x00B9
     d9a:	88 7f       	andi	r24, 0xF8	; 248
     d9c:	88 32       	cpi	r24, 0x28	; 40
     d9e:	41 f0       	breq	.+16     	; 0xdb0 <_ZN3i2c10write_byteEh+0x42>
     da0:	80 34       	cpi	r24, 0x40	; 64
     da2:	31 f0       	breq	.+12     	; 0xdb0 <_ZN3i2c10write_byteEh+0x42>
     da4:	88 31       	cpi	r24, 0x18	; 24
     da6:	21 f0       	breq	.+8      	; 0xdb0 <_ZN3i2c10write_byteEh+0x42>
			// An ACK was received
			return true;
		
		default:
			// a Nack of Some kind received
			return false;	
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	08 95       	ret
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
		{
			// timeout occurred, error
			//DBG(this->p_serial, "i2c::write_byte FAILED - timed out\r\n");
			return true;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	08 95       	ret
	{
		case (STAT_WRITE_ACK):
		case (STAT_TRANS_ACK):
		case (STAT_READ_ACK):
			// An ACK was received
			return true;
     db0:	81 e0       	ldi	r24, 0x01	; 1
			// a Nack of Some kind received
			return false;	
	}
	
	return false;
}
     db2:	08 95       	ret

00000db4 <_ZN3i2c4pingEh>:
 * 
 * Parameters:	addr - the address to be checked
 * Return:		bool - state of if an ACK was received
 ****************************************************************************/
bool i2c::ping (uint8_t addr)
{
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	ec 01       	movw	r28, r24
     dbc:	16 2f       	mov	r17, r22
	bool sign_of_life;
	start();
     dbe:	0e 94 7f 06 	call	0xcfe	; 0xcfe <_ZN3i2c5startEv>
	sign_of_life = write_byte(addr);
     dc2:	61 2f       	mov	r22, r17
     dc4:	ce 01       	movw	r24, r28
     dc6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN3i2c10write_byteEh>
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::stop (void)
{
	TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
     dca:	94 e9       	ldi	r25, 0x94	; 148
     dcc:	90 93 bc 00 	sts	0x00BC, r25
	start();
	sign_of_life = write_byte(addr);
	stop();
	
	return sign_of_life;
}
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	08 95       	ret

00000dd8 <_ZN3i2c9read_byteEb>:
 ****************************************************************************/
uint8_t i2c::read_byte (bool ack)
{
	//uint8_t expected_response;
	
	if (ack) // an ack is expected, so we are expecting more data after this
     dd8:	66 23       	and	r22, r22
     dda:	21 f0       	breq	.+8      	; 0xde4 <_ZN3i2c9read_byteEb+0xc>
	{
		TWCR = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
     ddc:	84 ec       	ldi	r24, 0xC4	; 196
     dde:	80 93 bc 00 	sts	0x00BC, r24
     de2:	03 c0       	rjmp	.+6      	; 0xdea <_ZN3i2c9read_byteEb+0x12>
		//expected_response = STAT_TRANS_ACK; // changed from STAT_REC_ACK
	}
	else
	{
		TWCR = ((1 << TWINT) | (1 << TWEN));
     de4:	84 e8       	ldi	r24, 0x84	; 132
     de6:	80 93 bc 00 	sts	0x00BC, r24
		//expected_response = STAT_REC_NACK;
	}
	
	// wait for TWINT to go low, which signals read complete
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     dea:	80 91 bc 00 	lds	r24, 0x00BC
     dee:	88 23       	and	r24, r24
     df0:	24 f4       	brge	.+8      	; 0xdfa <_ZN3i2c9read_byteEb+0x22>
     df2:	0a c0       	rjmp	.+20     	; 0xe08 <_ZN3i2c9read_byteEb+0x30>
     df4:	01 97       	sbiw	r24, 0x01	; 1
	{
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
     df6:	29 f4       	brne	.+10     	; 0xe02 <_ZN3i2c9read_byteEb+0x2a>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <_ZN3i2c9read_byteEb+0x36>
		TWCR = ((1 << TWINT) | (1 << TWEN));
		//expected_response = STAT_REC_NACK;
	}
	
	// wait for TWINT to go low, which signals read complete
	for (uint16_t twcnt = 0; !(TWCR & (1 << TWINT)); twcnt++)
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	94 e0       	ldi	r25, 0x04	; 4
     dfe:	ec eb       	ldi	r30, 0xBC	; 188
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	20 81       	ld	r18, Z
     e04:	22 23       	and	r18, r18
     e06:	b4 f7       	brge	.-20     	; 0xdf4 <_ZN3i2c9read_byteEb+0x1c>
			//DBG(this->p_serial, "i2c::read_byte FAILED - timed out\r\n");
			return 0xFF;
		}
	}
	// everything ok, return the data, which is stored in TWDR
	return TWDR;
     e08:	80 91 bb 00 	lds	r24, 0x00BB
     e0c:	08 95       	ret
		// check for timeout condition
		if (twcnt > TW_TIMEOUT)
		{
			// timeout occurred, error
			//DBG(this->p_serial, "i2c::read_byte FAILED - timed out\r\n");
			return 0xFF;
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
	// everything ok, return the data, which is stored in TWDR
	return TWDR;
}
     e10:	08 95       	ret

00000e12 <_ZN3i2c5writeEhhh>:
 *				reg	 - the register to be written to
 *				data - the data being written
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::write (uint8_t addr, uint8_t reg, uint8_t data)
{
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	ec 01       	movw	r28, r24
     e1e:	16 2f       	mov	r17, r22
     e20:	04 2f       	mov	r16, r20
     e22:	f2 2e       	mov	r15, r18
	start();
     e24:	0e 94 7f 06 	call	0xcfe	; 0xcfe <_ZN3i2c5startEv>
	if (!write_byte(addr) || !write_byte(reg) || !write_byte(data))
     e28:	61 2f       	mov	r22, r17
     e2a:	ce 01       	movw	r24, r28
     e2c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN3i2c10write_byteEh>
     e30:	88 23       	and	r24, r24
     e32:	91 f0       	breq	.+36     	; 0xe58 <_ZN3i2c5writeEhhh+0x46>
     e34:	60 2f       	mov	r22, r16
     e36:	ce 01       	movw	r24, r28
     e38:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN3i2c10write_byteEh>
     e3c:	18 2f       	mov	r17, r24
     e3e:	88 23       	and	r24, r24
     e40:	59 f0       	breq	.+22     	; 0xe58 <_ZN3i2c5writeEhhh+0x46>
     e42:	6f 2d       	mov	r22, r15
     e44:	ce 01       	movw	r24, r28
     e46:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN3i2c10write_byteEh>
     e4a:	88 23       	and	r24, r24
     e4c:	31 f0       	breq	.+12     	; 0xe5a <_ZN3i2c5writeEhhh+0x48>
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::stop (void)
{
	TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
     e4e:	84 e9       	ldi	r24, 0x94	; 148
     e50:	80 93 bc 00 	sts	0x00BC, r24
		return true;
	}
	stop();
	
	// all good, success!
	return false;
     e54:	10 e0       	ldi	r17, 0x00	; 0
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <_ZN3i2c5writeEhhh+0x48>
	{
		// an error occurred, one of these had a NACK
		//DBG(this->p_serial,
		//	"NACK on write <addr:0x%2X, reg:0x%2X, data:0x%2X>\r\n",
		//	addr, reg, data);
		return true;
     e58:	11 e0       	ldi	r17, 0x01	; 1
	}
	stop();
	
	// all good, success!
	return false;
}
     e5a:	81 2f       	mov	r24, r17
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	08 95       	ret

00000e68 <_ZN3i2c4readEhhPhh>:
 *				p_buff - the buffer to hold the data being read
 *				count  - the total number of bytes to read
 * Return:		bool   - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::read (uint8_t addr, uint8_t reg, uint8_t* p_buff, uint8_t count)
{
     e68:	cf 92       	push	r12
     e6a:	df 92       	push	r13
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	7c 01       	movw	r14, r24
     e7a:	c6 2f       	mov	r28, r22
     e7c:	d4 2f       	mov	r29, r20
     e7e:	69 01       	movw	r12, r18
		start();
     e80:	0e 94 7f 06 	call	0xcfe	; 0xcfe <_ZN3i2c5startEv>
		if (!write_byte(addr) || !write_byte(reg))
     e84:	6c 2f       	mov	r22, r28
     e86:	c7 01       	movw	r24, r14
     e88:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN3i2c10write_byteEh>
     e8c:	18 2f       	mov	r17, r24
     e8e:	88 23       	and	r24, r24
     e90:	89 f1       	breq	.+98     	; 0xef4 <_ZN3i2c4readEhhPhh+0x8c>
     e92:	6d 2f       	mov	r22, r29
     e94:	c7 01       	movw	r24, r14
     e96:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN3i2c10write_byteEh>
     e9a:	d8 2f       	mov	r29, r24
     e9c:	88 23       	and	r24, r24
     e9e:	61 f1       	breq	.+88     	; 0xef8 <_ZN3i2c4readEhhPhh+0x90>
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::stop (void)
{
	TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
     ea0:	84 e9       	ldi	r24, 0x94	; 148
     ea2:	80 93 bc 00 	sts	0x00BC, r24
			//DBG(this->p_serial, "Write NACK on read <addr:0x%2X, reg:0x%2X>\r\n",
			//	addr, reg);
			return true;
		}
		stop();
		restart();	// change?
     ea6:	c7 01       	movw	r24, r14
     ea8:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN3i2c7restartEv>
		// read the info
		if (!write_byte(addr | READ_BIT))
     eac:	6c 2f       	mov	r22, r28
     eae:	61 60       	ori	r22, 0x01	; 1
     eb0:	c7 01       	movw	r24, r14
     eb2:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN3i2c10write_byteEh>
     eb6:	88 23       	and	r24, r24
     eb8:	01 f1       	breq	.+64     	; 0xefa <_ZN3i2c4readEhhPhh+0x92>
			//	addr | READ_BIT);
			return 0xFF;
		}
		
		// Read the data
		for (uint8_t ndx = 1; ndx < count; ndx++)
     eba:	02 30       	cpi	r16, 0x02	; 2
     ebc:	80 f0       	brcs	.+32     	; 0xede <_ZN3i2c4readEhhPhh+0x76>
     ebe:	e6 01       	movw	r28, r12
     ec0:	02 50       	subi	r16, 0x02	; 2
     ec2:	80 2f       	mov	r24, r16
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	c8 0e       	add	r12, r24
     eca:	d9 1e       	adc	r13, r25
     ecc:	86 01       	movw	r16, r12
		{
			// still have more to read, so expect an ACK
			*p_buff++ = read_byte(true);
     ece:	61 e0       	ldi	r22, 0x01	; 1
     ed0:	c7 01       	movw	r24, r14
     ed2:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN3i2c9read_byteEb>
     ed6:	89 93       	st	Y+, r24
			//	addr | READ_BIT);
			return 0xFF;
		}
		
		// Read the data
		for (uint8_t ndx = 1; ndx < count; ndx++)
     ed8:	c0 17       	cp	r28, r16
     eda:	d1 07       	cpc	r29, r17
     edc:	c1 f7       	brne	.-16     	; 0xece <_ZN3i2c4readEhhPhh+0x66>
		{
			// still have more to read, so expect an ACK
			*p_buff++ = read_byte(true);
		}
		// Read last bit of data, so expect a NACK
		*p_buff++ = read_byte(false);
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	c7 01       	movw	r24, r14
     ee2:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN3i2c9read_byteEb>
     ee6:	f6 01       	movw	r30, r12
     ee8:	80 83       	st	Z, r24
 * 
 * Return:		bool - status of operation (true = error, false = success)
 ****************************************************************************/
bool i2c::stop (void)
{
	TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
     eea:	84 e9       	ldi	r24, 0x94	; 148
     eec:	80 93 bc 00 	sts	0x00BC, r24
		}
		// Read last bit of data, so expect a NACK
		*p_buff++ = read_byte(false);
		stop();
		
		return false;
     ef0:	d0 e0       	ldi	r29, 0x00	; 0
     ef2:	03 c0       	rjmp	.+6      	; 0xefa <_ZN3i2c4readEhhPhh+0x92>
		if (!write_byte(addr) || !write_byte(reg))
		{
			// an error occurred, one of these had a NACK
			//DBG(this->p_serial, "Write NACK on read <addr:0x%2X, reg:0x%2X>\r\n",
			//	addr, reg);
			return true;
     ef4:	d1 e0       	ldi	r29, 0x01	; 1
     ef6:	01 c0       	rjmp	.+2      	; 0xefa <_ZN3i2c4readEhhPhh+0x92>
     ef8:	d1 2f       	mov	r29, r17
		// Read last bit of data, so expect a NACK
		*p_buff++ = read_byte(false);
		stop();
		
		return false;
     efa:	8d 2f       	mov	r24, r29
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	ff 90       	pop	r15
     f06:	ef 90       	pop	r14
     f08:	df 90       	pop	r13
     f0a:	cf 90       	pop	r12
     f0c:	08 95       	ret

00000f0e <main>:
uint8_t windy = 0;
int16_t uv_ndx = 0;


int main(void)
{
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	c9 56       	subi	r28, 0x69	; 105
     f18:	d1 09       	sbc	r29, r1
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
	uint16_t main_runs = 0;
	
	/* create serial object */
	serial ser_dev = serial(9600, 16000000);
     f24:	00 e0       	ldi	r16, 0x00	; 0
     f26:	14 e2       	ldi	r17, 0x24	; 36
     f28:	24 ef       	ldi	r18, 0xF4	; 244
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e8       	ldi	r20, 0x80	; 128
     f2e:	55 e2       	ldi	r21, 0x25	; 37
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	ce 01       	movw	r24, r28
     f36:	8a 5b       	subi	r24, 0xBA	; 186
     f38:	9f 4f       	sbci	r25, 0xFF	; 255
     f3a:	0e 94 3e 0b 	call	0x167c	; 0x167c <_ZN6serialC1Emm>
	
	//DBG(&ser_dev, "Creating and initializing all sensors...\r\n");
	
	// create a i2c object 
	i2c my_i2c = i2c(&ser_dev);
     f3e:	be 01       	movw	r22, r28
     f40:	6a 5b       	subi	r22, 0xBA	; 186
     f42:	7f 4f       	sbci	r23, 0xFF	; 255
     f44:	ce 01       	movw	r24, r28
     f46:	88 59       	subi	r24, 0x98	; 152
     f48:	9f 4f       	sbci	r25, 0xFF	; 255
     f4a:	0e 94 73 06 	call	0xce6	; 0xce6 <_ZN3i2cC1EP6serial>
	
	// create a BME280 object
	BME280 my_BME280 = BME280(&my_i2c, &ser_dev, 278);
     f4e:	06 e1       	ldi	r16, 0x16	; 22
     f50:	11 e0       	ldi	r17, 0x01	; 1
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	ae 01       	movw	r20, r28
     f58:	4a 5b       	subi	r20, 0xBA	; 186
     f5a:	5f 4f       	sbci	r21, 0xFF	; 255
     f5c:	be 01       	movw	r22, r28
     f5e:	68 59       	subi	r22, 0x98	; 152
     f60:	7f 4f       	sbci	r23, 0xFF	; 255
     f62:	ce 01       	movw	r24, r28
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN6BME280C1EP3i2cP6seriall>
	
	// create a water temperature sensor - surface
	oneWire my_oneWire_surface_temp = oneWire(&ser_dev, 3, ID_SURFACE_TEMP);
     f6a:	22 e0       	ldi	r18, 0x02	; 2
     f6c:	43 e0       	ldi	r20, 0x03	; 3
     f6e:	be 01       	movw	r22, r28
     f70:	6a 5b       	subi	r22, 0xBA	; 186
     f72:	7f 4f       	sbci	r23, 0xFF	; 255
     f74:	ce 01       	movw	r24, r28
     f76:	8f 59       	subi	r24, 0x9F	; 159
     f78:	9f 4f       	sbci	r25, 0xFF	; 255
     f7a:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN7oneWireC1EP6serialhh>
	
	// create a water temperature sensor - surface
	oneWire my_oneWire_underwater_temp = oneWire(&ser_dev, 2, ID_UNDERWATER_TEMP);
     f7e:	23 e0       	ldi	r18, 0x03	; 3
     f80:	42 e0       	ldi	r20, 0x02	; 2
     f82:	be 01       	movw	r22, r28
     f84:	6a 5b       	subi	r22, 0xBA	; 186
     f86:	7f 4f       	sbci	r23, 0xFF	; 255
     f88:	ce 01       	movw	r24, r28
     f8a:	83 5a       	subi	r24, 0xA3	; 163
     f8c:	9f 4f       	sbci	r25, 0xFF	; 255
     f8e:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN7oneWireC1EP6serialhh>
	
	// create a tilt-ball object
	TiltBall my_TiltBall = TiltBall(&ser_dev, 0);
     f92:	40 e0       	ldi	r20, 0x00	; 0
     f94:	be 01       	movw	r22, r28
     f96:	6a 5b       	subi	r22, 0xBA	; 186
     f98:	7f 4f       	sbci	r23, 0xFF	; 255
     f9a:	ce 01       	movw	r24, r28
     f9c:	82 5b       	subi	r24, 0xB2	; 178
     f9e:	9f 4f       	sbci	r25, 0xFF	; 255
     fa0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_ZN8TiltBallC1EP6serialh>
	
	// create a UVIndex sensor
	UVIndex my_UVIndex = UVIndex(&ser_dev, 7);
     fa4:	47 e0       	ldi	r20, 0x07	; 7
     fa6:	be 01       	movw	r22, r28
     fa8:	6a 5b       	subi	r22, 0xBA	; 186
     faa:	7f 4f       	sbci	r23, 0xFF	; 255
     fac:	ce 01       	movw	r24, r28
     fae:	8b 59       	subi	r24, 0x9B	; 155
     fb0:	9f 4f       	sbci	r25, 0xFF	; 255
     fb2:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <_ZN7UVIndexC1EP6serialh>
	
	// create a PIR sensor for lane 1
	PIR my_pir_ln1 = PIR(&ser_dev, LN_1_PIN);
     fb6:	47 e0       	ldi	r20, 0x07	; 7
     fb8:	be 01       	movw	r22, r28
     fba:	6a 5b       	subi	r22, 0xBA	; 186
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255
     fbe:	ce 01       	movw	r24, r28
     fc0:	87 5a       	subi	r24, 0xA7	; 167
     fc2:	9f 4f       	sbci	r25, 0xFF	; 255
     fc4:	0e 94 20 0a 	call	0x1440	; 0x1440 <_ZN3PIRC1EP6serialh>
	
	// create a PIR sensor for lane 2
	PIR my_pir_ln2 = PIR(&ser_dev, LN_2_PIN);
     fc8:	44 e0       	ldi	r20, 0x04	; 4
     fca:	be 01       	movw	r22, r28
     fcc:	6a 5b       	subi	r22, 0xBA	; 186
     fce:	7f 4f       	sbci	r23, 0xFF	; 255
     fd0:	ce 01       	movw	r24, r28
     fd2:	8b 5a       	subi	r24, 0xAB	; 171
     fd4:	9f 4f       	sbci	r25, 0xFF	; 255
     fd6:	0e 94 20 0a 	call	0x1440	; 0x1440 <_ZN3PIRC1EP6serialh>
int16_t uv_ndx = 0;


int main(void)
{
	uint16_t main_runs = 0;
     fda:	00 e0       	ldi	r16, 0x00	; 0
     fdc:	10 e0       	ldi	r17, 0x00	; 0
		
		my_pir_ln1.PIRTask();
		
		my_pir_ln2.PIRTask();
		
		if ((main_runs % 30) == 0)
     fde:	0f 2e       	mov	r0, r31
     fe0:	fe e1       	ldi	r31, 0x1E	; 30
     fe2:	ff 2e       	mov	r15, r31
     fe4:	f0 2d       	mov	r31, r0
	//DBG(&ser_dev, "All Sensors created!\r\n");
	
    while (1) 
    {
		
		my_BME280.BME280Task();
     fe6:	ce 01       	movw	r24, r28
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN6BME28010BME280TaskEv>
		
		my_oneWire_surface_temp.oneWireTask();
     fee:	ce 01       	movw	r24, r28
     ff0:	8f 59       	subi	r24, 0x9F	; 159
     ff2:	9f 4f       	sbci	r25, 0xFF	; 255
     ff4:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN7oneWire11oneWireTaskEv>
		
		my_oneWire_underwater_temp.oneWireTask();
     ff8:	ce 01       	movw	r24, r28
     ffa:	83 5a       	subi	r24, 0xA3	; 163
     ffc:	9f 4f       	sbci	r25, 0xFF	; 255
     ffe:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN7oneWire11oneWireTaskEv>
		
		my_TiltBall.TiltBallTask();
    1002:	ce 01       	movw	r24, r28
    1004:	82 5b       	subi	r24, 0xB2	; 178
    1006:	9f 4f       	sbci	r25, 0xFF	; 255
    1008:	0e 94 36 0c 	call	0x186c	; 0x186c <_ZN8TiltBall12TiltBallTaskEv>
				
		my_UVIndex.UVIndexTask();
    100c:	ce 01       	movw	r24, r28
    100e:	8b 59       	subi	r24, 0x9B	; 155
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	0e 94 bb 0c 	call	0x1976	; 0x1976 <_ZN7UVIndex11UVIndexTaskEv>
		
		my_pir_ln1.PIRTask();
    1016:	ce 01       	movw	r24, r28
    1018:	87 5a       	subi	r24, 0xA7	; 167
    101a:	9f 4f       	sbci	r25, 0xFF	; 255
    101c:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <_ZN3PIR7PIRTaskEv>
		
		my_pir_ln2.PIRTask();
    1020:	ce 01       	movw	r24, r28
    1022:	8b 5a       	subi	r24, 0xAB	; 171
    1024:	9f 4f       	sbci	r25, 0xFF	; 255
    1026:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <_ZN3PIR7PIRTaskEv>
		
		if ((main_runs % 30) == 0)
    102a:	98 01       	movw	r18, r16
    102c:	a9 e8       	ldi	r26, 0x89	; 137
    102e:	b8 e8       	ldi	r27, 0x88	; 136
    1030:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__umulhisi3>
    1034:	92 95       	swap	r25
    1036:	82 95       	swap	r24
    1038:	8f 70       	andi	r24, 0x0F	; 15
    103a:	89 27       	eor	r24, r25
    103c:	9f 70       	andi	r25, 0x0F	; 15
    103e:	89 27       	eor	r24, r25
    1040:	f8 9e       	mul	r15, r24
    1042:	90 01       	movw	r18, r0
    1044:	f9 9e       	mul	r15, r25
    1046:	30 0d       	add	r19, r0
    1048:	11 24       	eor	r1, r1
    104a:	02 17       	cp	r16, r18
    104c:	13 07       	cpc	r17, r19
    104e:	29 f4       	brne	.+10     	; 0x105a <main+0x14c>
		{
			// send update packet to WiFi board
			ser_dev.sendPkt();
    1050:	ce 01       	movw	r24, r28
    1052:	8a 5b       	subi	r24, 0xBA	; 186
    1054:	9f 4f       	sbci	r25, 0xFF	; 255
    1056:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN6serial7sendPktEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    105a:	2f ef       	ldi	r18, 0xFF	; 255
    105c:	83 ed       	ldi	r24, 0xD3	; 211
    105e:	90 e3       	ldi	r25, 0x30	; 48
    1060:	21 50       	subi	r18, 0x01	; 1
    1062:	80 40       	sbci	r24, 0x00	; 0
    1064:	90 40       	sbci	r25, 0x00	; 0
    1066:	e1 f7       	brne	.-8      	; 0x1060 <main+0x152>
    1068:	00 c0       	rjmp	.+0      	; 0x106a <main+0x15c>
    106a:	00 00       	nop
		}
		
		_delay_ms(1000);
		main_runs++;
    106c:	0f 5f       	subi	r16, 0xFF	; 255
    106e:	1f 4f       	sbci	r17, 0xFF	; 255
    }
    1070:	ba cf       	rjmp	.-140    	; 0xfe6 <main+0xd8>

00001072 <_ZN7oneWireC1EP6serialhh>:
 * 
 * Parameters:	ptr_serial 	- a reference to the serial debug object
 *				pin 		- the pin on the ATmega328P the sensor outputs to.
 *				id 			- the unique id of the sensor
 ****************************************************************************/
oneWire::oneWire(serial *ptr_serial, uint8_t pin, uint8_t id)
    1072:	fc 01       	movw	r30, r24
{
	p_serial = ptr_serial;	// store local copy for debug
    1074:	71 83       	std	Z+1, r23	; 0x01
    1076:	60 83       	st	Z, r22
	data_line = pin;		// store local copy
    1078:	42 83       	std	Z+2, r20	; 0x02
	dev_id = id;			// store local copy
    107a:	23 83       	std	Z+3, r18	; 0x03
	
	// make the data an input
	INPUT(DATA_DDR, data_line);
    107c:	2a b1       	in	r18, 0x0a	; 10
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <_ZN7oneWireC1EP6serialhh+0x16>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	4a 95       	dec	r20
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <_ZN7oneWireC1EP6serialhh+0x12>
    108c:	80 95       	com	r24
    108e:	82 23       	and	r24, r18
    1090:	8a b9       	out	0x0a, r24	; 10
    1092:	08 95       	ret

00001094 <_ZN7oneWire5resetEv>:
 * Description:	This method resets the oneWire device.
 *
 * Return:		bool - if the device is ready.
 ****************************************************************************/
bool oneWire::reset (void)
{
    1094:	fc 01       	movw	r30, r24
	bool presence_pulse;
	uint8_t retries = 125;
	
	// make pin an input
	INPUT(DATA_DDR, data_line);
    1096:	2a b1       	in	r18, 0x0a	; 10
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 80       	ldd	r0, Z+2	; 0x02
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <_ZN7oneWire5resetEv+0x10>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <_ZN7oneWire5resetEv+0xc>
    10a8:	80 95       	com	r24
    10aa:	82 23       	and	r24, r18
    10ac:	8a b9       	out	0x0a, r24	; 10
    10ae:	4c e7       	ldi	r20, 0x7C	; 124
    10b0:	03 c0       	rjmp	.+6      	; 0x10b8 <_ZN7oneWire5resetEv+0x24>
    10b2:	41 50       	subi	r20, 0x01	; 1
	
	// wait for wire to go high
	do 
	{
		if (--retries == 0)
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <_ZN7oneWire5resetEv+0x24>
    10b6:	4e c0       	rjmp	.+156    	; 0x1154 <_ZN7oneWire5resetEv+0xc0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10b8:	2a e0       	ldi	r18, 0x0A	; 10
    10ba:	2a 95       	dec	r18
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <_ZN7oneWire5resetEv+0x26>
    10be:	00 c0       	rjmp	.+0      	; 0x10c0 <_ZN7oneWire5resetEv+0x2c>
		{
			return false;
		}
		_delay_us(2);
	} while (!(DATA_PIN & (1 << data_line)));
    10c0:	29 b1       	in	r18, 0x09	; 9
    10c2:	92 81       	ldd	r25, Z+2	; 0x02
    10c4:	69 2f       	mov	r22, r25
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <_ZN7oneWire5resetEv+0x3a>
    10ca:	35 95       	asr	r19
    10cc:	27 95       	ror	r18
    10ce:	9a 95       	dec	r25
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <_ZN7oneWire5resetEv+0x36>
	
	// make pin an input
	INPUT(DATA_DDR, data_line);
	
	// wait for wire to go high
	do 
    10d2:	20 ff       	sbrs	r18, 0
    10d4:	ee cf       	rjmp	.-36     	; 0x10b2 <_ZN7oneWire5resetEv+0x1e>
		}
		_delay_us(2);
	} while (!(DATA_PIN & (1 << data_line)));
	
	// set data_line low
	DATA_PORT &= ~(1 << data_line);
    10d6:	3b b1       	in	r19, 0x0b	; 11
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	ac 01       	movw	r20, r24
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <_ZN7oneWire5resetEv+0x50>
    10e0:	44 0f       	add	r20, r20
    10e2:	55 1f       	adc	r21, r21
    10e4:	6a 95       	dec	r22
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <_ZN7oneWire5resetEv+0x4c>
    10e8:	24 2f       	mov	r18, r20
    10ea:	20 95       	com	r18
    10ec:	23 23       	and	r18, r19
    10ee:	2b b9       	out	0x0b, r18	; 11
	
	// set data_line as output
	OUTPUT(DATA_DDR, data_line);
    10f0:	4a b1       	in	r20, 0x0a	; 10
    10f2:	9c 01       	movw	r18, r24
    10f4:	02 80       	ldd	r0, Z+2	; 0x02
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <_ZN7oneWire5resetEv+0x68>
    10f8:	22 0f       	add	r18, r18
    10fa:	33 1f       	adc	r19, r19
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <_ZN7oneWire5resetEv+0x64>
    1100:	24 2b       	or	r18, r20
    1102:	2a b9       	out	0x0a, r18	; 10
    1104:	af e7       	ldi	r26, 0x7F	; 127
    1106:	b7 e0       	ldi	r27, 0x07	; 7
    1108:	11 97       	sbiw	r26, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <_ZN7oneWire5resetEv+0x74>
    110c:	00 c0       	rjmp	.+0      	; 0x110e <_ZN7oneWire5resetEv+0x7a>
    110e:	00 00       	nop
	
	_delay_us(480);
		
	// set data_line as input
	INPUT(DATA_DDR, data_line);
    1110:	2a b1       	in	r18, 0x0a	; 10
    1112:	02 80       	ldd	r0, Z+2	; 0x02
    1114:	02 c0       	rjmp	.+4      	; 0x111a <_ZN7oneWire5resetEv+0x86>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <_ZN7oneWire5resetEv+0x82>
    111e:	80 95       	com	r24
    1120:	82 23       	and	r24, r18
    1122:	8a b9       	out	0x0a, r24	; 10
    1124:	87 e1       	ldi	r24, 0x17	; 23
    1126:	91 e0       	ldi	r25, 0x01	; 1
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	f1 f7       	brne	.-4      	; 0x1128 <_ZN7oneWire5resetEv+0x94>
    112c:	00 c0       	rjmp	.+0      	; 0x112e <_ZN7oneWire5resetEv+0x9a>
    112e:	00 00       	nop
	
	_delay_us(70);
	
	presence_pulse = (bool)!((DATA_PIN & (1 << data_line)));
    1130:	89 b1       	in	r24, 0x09	; 9
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 80       	ldd	r0, Z+2	; 0x02
    1136:	02 c0       	rjmp	.+4      	; 0x113c <_ZN7oneWire5resetEv+0xa8>
    1138:	95 95       	asr	r25
    113a:	87 95       	ror	r24
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <_ZN7oneWire5resetEv+0xa4>
    1140:	a1 e0       	ldi	r26, 0x01	; 1
    1142:	8a 27       	eor	r24, r26
    1144:	81 70       	andi	r24, 0x01	; 1
    1146:	e7 e6       	ldi	r30, 0x67	; 103
    1148:	f6 e0       	ldi	r31, 0x06	; 6
    114a:	31 97       	sbiw	r30, 0x01	; 1
    114c:	f1 f7       	brne	.-4      	; 0x114a <_ZN7oneWire5resetEv+0xb6>
    114e:	00 c0       	rjmp	.+0      	; 0x1150 <_ZN7oneWire5resetEv+0xbc>
    1150:	00 00       	nop
	
	_delay_us(410);
	
	return presence_pulse;
    1152:	08 95       	ret
	// wait for wire to go high
	do 
	{
		if (--retries == 0)
		{
			return false;
    1154:	80 e0       	ldi	r24, 0x00	; 0
	presence_pulse = (bool)!((DATA_PIN & (1 << data_line)));
	
	_delay_us(410);
	
	return presence_pulse;
}
    1156:	08 95       	ret

00001158 <_ZN7oneWire7write_1Ev>:
/*****************************************************************************
 * Method:		write_1
 * Description:	This method writes a logial high to the oneWire device.
 ****************************************************************************/
void oneWire::write_1 (void)
{
    1158:	fc 01       	movw	r30, r24
	// set data_line low
	DATA_PORT &= ~(1 << data_line);
    115a:	9b b1       	in	r25, 0x0b	; 11
    115c:	21 e0       	ldi	r18, 0x01	; 1
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	a9 01       	movw	r20, r18
    1162:	02 80       	ldd	r0, Z+2	; 0x02
    1164:	02 c0       	rjmp	.+4      	; 0x116a <_ZN7oneWire7write_1Ev+0x12>
    1166:	44 0f       	add	r20, r20
    1168:	55 1f       	adc	r21, r21
    116a:	0a 94       	dec	r0
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <_ZN7oneWire7write_1Ev+0xe>
    116e:	84 2f       	mov	r24, r20
    1170:	80 95       	com	r24
    1172:	89 23       	and	r24, r25
    1174:	8b b9       	out	0x0b, r24	; 11
	
	// make data_line an output
	OUTPUT(DATA_DDR, data_line);
    1176:	4a b1       	in	r20, 0x0a	; 10
    1178:	c9 01       	movw	r24, r18
    117a:	02 80       	ldd	r0, Z+2	; 0x02
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <_ZN7oneWire7write_1Ev+0x2a>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <_ZN7oneWire7write_1Ev+0x26>
    1186:	84 2b       	or	r24, r20
    1188:	8a b9       	out	0x0a, r24	; 10
    118a:	85 e3       	ldi	r24, 0x35	; 53
    118c:	8a 95       	dec	r24
    118e:	f1 f7       	brne	.-4      	; 0x118c <_ZN7oneWire7write_1Ev+0x34>
    1190:	00 00       	nop
	
	_delay_us(10);
	
	// make data_line an input
	INPUT(DATA_DDR, data_line);
    1192:	9a b1       	in	r25, 0x0a	; 10
    1194:	02 80       	ldd	r0, Z+2	; 0x02
    1196:	02 c0       	rjmp	.+4      	; 0x119c <_ZN7oneWire7write_1Ev+0x44>
    1198:	22 0f       	add	r18, r18
    119a:	33 1f       	adc	r19, r19
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <_ZN7oneWire7write_1Ev+0x40>
    11a0:	20 95       	com	r18
    11a2:	29 23       	and	r18, r25
    11a4:	2a b9       	out	0x0a, r18	; 10
    11a6:	8b ed       	ldi	r24, 0xDB	; 219
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <_ZN7oneWire7write_1Ev+0x52>
    11ae:	00 c0       	rjmp	.+0      	; 0x11b0 <_ZN7oneWire7write_1Ev+0x58>
    11b0:	00 00       	nop
    11b2:	08 95       	ret

000011b4 <_ZN7oneWire7write_0Ev>:
/*****************************************************************************
 * Method:		write_0
 * Description:	This method writes a logial low to the oneWire device.
 ****************************************************************************/
void oneWire::write_0 (void)
{
    11b4:	fc 01       	movw	r30, r24
	// set data_line low
	DATA_PORT &= ~(1 << data_line);
    11b6:	9b b1       	in	r25, 0x0b	; 11
    11b8:	21 e0       	ldi	r18, 0x01	; 1
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	a9 01       	movw	r20, r18
    11be:	02 80       	ldd	r0, Z+2	; 0x02
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <_ZN7oneWire7write_0Ev+0x12>
    11c2:	44 0f       	add	r20, r20
    11c4:	55 1f       	adc	r21, r21
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <_ZN7oneWire7write_0Ev+0xe>
    11ca:	84 2f       	mov	r24, r20
    11cc:	80 95       	com	r24
    11ce:	89 23       	and	r24, r25
    11d0:	8b b9       	out	0x0b, r24	; 11
	
	// make data_line an output
	OUTPUT(DATA_DDR, data_line);
    11d2:	4a b1       	in	r20, 0x0a	; 10
    11d4:	c9 01       	movw	r24, r18
    11d6:	02 80       	ldd	r0, Z+2	; 0x02
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <_ZN7oneWire7write_0Ev+0x2a>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <_ZN7oneWire7write_0Ev+0x26>
    11e2:	84 2b       	or	r24, r20
    11e4:	8a b9       	out	0x0a, r24	; 10
    11e6:	83 e0       	ldi	r24, 0x03	; 3
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	f1 f7       	brne	.-4      	; 0x11ea <_ZN7oneWire7write_0Ev+0x36>
    11ee:	00 c0       	rjmp	.+0      	; 0x11f0 <_ZN7oneWire7write_0Ev+0x3c>
    11f0:	00 00       	nop
	
	_delay_us(65);
	
	// make data_line an input
	INPUT(DATA_DDR, data_line);
    11f2:	9a b1       	in	r25, 0x0a	; 10
    11f4:	02 80       	ldd	r0, Z+2	; 0x02
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <_ZN7oneWire7write_0Ev+0x48>
    11f8:	22 0f       	add	r18, r18
    11fa:	33 1f       	adc	r19, r19
    11fc:	0a 94       	dec	r0
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <_ZN7oneWire7write_0Ev+0x44>
    1200:	20 95       	com	r18
    1202:	29 23       	and	r18, r25
    1204:	2a b9       	out	0x0a, r18	; 10
    1206:	9a e1       	ldi	r25, 0x1A	; 26
    1208:	9a 95       	dec	r25
    120a:	f1 f7       	brne	.-4      	; 0x1208 <_ZN7oneWire7write_0Ev+0x54>
    120c:	00 c0       	rjmp	.+0      	; 0x120e <_ZN7oneWire7write_0Ev+0x5a>
    120e:	08 95       	ret

00001210 <_ZN7oneWire10write_byteEh>:
 * Description:	This method writes one byte to the oneWire device.
 *
 * Parameters:	data - the data to write to the device
 ****************************************************************************/
void oneWire::write_byte (uint8_t data)
{
    1210:	0f 93       	push	r16
    1212:	1f 93       	push	r17
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	8c 01       	movw	r16, r24
    121a:	d6 2f       	mov	r29, r22
    121c:	c8 e0       	ldi	r28, 0x08	; 8
	for (uint8_t i = 0; i < 8; i++)
	{
		if (data & 0x01)
    121e:	d0 ff       	sbrs	r29, 0
    1220:	04 c0       	rjmp	.+8      	; 0x122a <_ZN7oneWire10write_byteEh+0x1a>
		{
			write_1();
    1222:	c8 01       	movw	r24, r16
    1224:	0e 94 ac 08 	call	0x1158	; 0x1158 <_ZN7oneWire7write_1Ev>
    1228:	03 c0       	rjmp	.+6      	; 0x1230 <_ZN7oneWire10write_byteEh+0x20>
		}
		else
		{
			write_0();
    122a:	c8 01       	movw	r24, r16
    122c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN7oneWire7write_0Ev>
		}
		data >>= 1;
    1230:	d6 95       	lsr	r29
    1232:	c1 50       	subi	r28, 0x01	; 1
 *
 * Parameters:	data - the data to write to the device
 ****************************************************************************/
void oneWire::write_byte (uint8_t data)
{
	for (uint8_t i = 0; i < 8; i++)
    1234:	a1 f7       	brne	.-24     	; 0x121e <_ZN7oneWire10write_byteEh+0xe>
		{
			write_0();
		}
		data >>= 1;
	}
}
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	08 95       	ret

00001240 <_ZN7oneWire9read_byteEv>:
/*****************************************************************************
 * Method:		read_byte
 * Description:	This method reads one byte from the oneWire device.
 ****************************************************************************/
uint8_t oneWire::read_byte (void)
{
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	fc 01       	movw	r30, r24
    1248:	a8 e0       	ldi	r26, 0x08	; 8
    124a:	b0 e0       	ldi	r27, 0x00	; 0
	uint8_t data_in;
	uint8_t data_read = 0;
	
	for (uint8_t bit_msk = 0x01; bit_msk; bit_msk <<= 1)
    124c:	11 e0       	ldi	r17, 0x01	; 1
 * Description:	This method reads one byte from the oneWire device.
 ****************************************************************************/
uint8_t oneWire::read_byte (void)
{
	uint8_t data_in;
	uint8_t data_read = 0;
    124e:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint8_t bit_msk = 0x01; bit_msk; bit_msk <<= 1)
	{
		// make data_line low
		DATA_PORT &= ~(1 << data_line);
    1250:	21 e0       	ldi	r18, 0x01	; 1
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	4b b1       	in	r20, 0x0b	; 11
    1256:	b9 01       	movw	r22, r18
    1258:	02 80       	ldd	r0, Z+2	; 0x02
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <_ZN7oneWire9read_byteEv+0x20>
    125c:	66 0f       	add	r22, r22
    125e:	77 1f       	adc	r23, r23
    1260:	0a 94       	dec	r0
    1262:	e2 f7       	brpl	.-8      	; 0x125c <_ZN7oneWire9read_byteEv+0x1c>
    1264:	96 2f       	mov	r25, r22
    1266:	90 95       	com	r25
    1268:	94 23       	and	r25, r20
    126a:	9b b9       	out	0x0b, r25	; 11
		// make data_line output
		OUTPUT(DATA_DDR, data_line);
    126c:	9a b1       	in	r25, 0x0a	; 10
    126e:	a9 01       	movw	r20, r18
    1270:	02 80       	ldd	r0, Z+2	; 0x02
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <_ZN7oneWire9read_byteEv+0x38>
    1274:	44 0f       	add	r20, r20
    1276:	55 1f       	adc	r21, r21
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <_ZN7oneWire9read_byteEv+0x34>
    127c:	49 2b       	or	r20, r25
    127e:	4a b9       	out	0x0a, r20	; 10
    1280:	90 e1       	ldi	r25, 0x10	; 16
    1282:	9a 95       	dec	r25
    1284:	f1 f7       	brne	.-4      	; 0x1282 <_ZN7oneWire9read_byteEv+0x42>
		
		_delay_us(3);
		// make data_line input
		INPUT(DATA_DDR, data_line);
    1286:	4a b1       	in	r20, 0x0a	; 10
    1288:	b9 01       	movw	r22, r18
    128a:	02 80       	ldd	r0, Z+2	; 0x02
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <_ZN7oneWire9read_byteEv+0x52>
    128e:	66 0f       	add	r22, r22
    1290:	77 1f       	adc	r23, r23
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <_ZN7oneWire9read_byteEv+0x4e>
    1296:	96 2f       	mov	r25, r22
    1298:	90 95       	com	r25
    129a:	94 23       	and	r25, r20
    129c:	9a b9       	out	0x0a, r25	; 10
    129e:	c5 e3       	ldi	r28, 0x35	; 53
    12a0:	ca 95       	dec	r28
    12a2:	f1 f7       	brne	.-4      	; 0x12a0 <_ZN7oneWire9read_byteEv+0x60>
    12a4:	00 00       	nop
		_delay_us(10);
		
		data_in = DATA_PIN & (1 << data_line);
    12a6:	99 b1       	in	r25, 0x09	; 9
    12a8:	a9 01       	movw	r20, r18
    12aa:	02 80       	ldd	r0, Z+2	; 0x02
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <_ZN7oneWire9read_byteEv+0x72>
    12ae:	44 0f       	add	r20, r20
    12b0:	55 1f       	adc	r21, r21
    12b2:	0a 94       	dec	r0
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <_ZN7oneWire9read_byteEv+0x6e>
    12b6:	49 23       	and	r20, r25
    12b8:	c3 ed       	ldi	r28, 0xD3	; 211
    12ba:	d0 e0       	ldi	r29, 0x00	; 0
    12bc:	21 97       	sbiw	r28, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <_ZN7oneWire9read_byteEv+0x7c>
    12c0:	00 c0       	rjmp	.+0      	; 0x12c2 <_ZN7oneWire9read_byteEv+0x82>
    12c2:	00 00       	nop
		_delay_us(53);
		
		if (data_in)
    12c4:	41 11       	cpse	r20, r1
		{
			data_read |= bit_msk;
    12c6:	81 2b       	or	r24, r17
uint8_t oneWire::read_byte (void)
{
	uint8_t data_in;
	uint8_t data_read = 0;
	
	for (uint8_t bit_msk = 0x01; bit_msk; bit_msk <<= 1)
    12c8:	11 0f       	add	r17, r17
    12ca:	11 97       	sbiw	r26, 0x01	; 1
    12cc:	19 f6       	brne	.-122    	; 0x1254 <_ZN7oneWire9read_byteEv+0x14>
			data_read |= bit_msk;
		}
	}
	
	return data_read;
}
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	1f 91       	pop	r17
    12d4:	08 95       	ret

000012d6 <_ZN7oneWire11oneWireTaskEv>:
/*****************************************************************************
 * Method:		oneWireTask
 * Description:	This method runs the oneWire task
 ****************************************************************************/
void oneWire::oneWireTask (void)
{
    12d6:	1f 93       	push	r17
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	ec 01       	movw	r28, r24
	//if ((runs % 5) == 0)
	//{
		//DBG(this->p_serial, "\r\noneWire Task Running on device: %d\r\n", dev_id);
		
		// perform temperature conversion
		reset();
    12de:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN7oneWire5resetEv>
		write_byte(0xCC);	// skip ROM
    12e2:	6c ec       	ldi	r22, 0xCC	; 204
    12e4:	ce 01       	movw	r24, r28
    12e6:	0e 94 08 09 	call	0x1210	; 0x1210 <_ZN7oneWire10write_byteEh>
		write_byte(0x44);	// single temp conversion
    12ea:	64 e4       	ldi	r22, 0x44	; 68
    12ec:	ce 01       	movw	r24, r28
    12ee:	0e 94 08 09 	call	0x1210	; 0x1210 <_ZN7oneWire10write_byteEh>
		
		// read in scratch pad
		reset();
    12f2:	ce 01       	movw	r24, r28
    12f4:	0e 94 4a 08 	call	0x1094	; 0x1094 <_ZN7oneWire5resetEv>
		write_byte(0xCC);	// skip ROM
    12f8:	6c ec       	ldi	r22, 0xCC	; 204
    12fa:	ce 01       	movw	r24, r28
    12fc:	0e 94 08 09 	call	0x1210	; 0x1210 <_ZN7oneWire10write_byteEh>
		write_byte(0xBE);	// read scratchpad
    1300:	6e eb       	ldi	r22, 0xBE	; 190
    1302:	ce 01       	movw	r24, r28
    1304:	0e 94 08 09 	call	0x1210	; 0x1210 <_ZN7oneWire10write_byteEh>
		
		// read temperature
		low_byte = read_byte();
    1308:	ce 01       	movw	r24, r28
    130a:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN7oneWire9read_byteEv>
    130e:	18 2f       	mov	r17, r24
		high_byte = read_byte();
    1310:	ce 01       	movw	r24, r28
    1312:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN7oneWire9read_byteEv>
		temp = (high_byte << BYTE_SHIFT) | low_byte;
    1316:	21 2f       	mov	r18, r17
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	a9 01       	movw	r20, r18
    131c:	58 2b       	or	r21, r24
    131e:	ca 01       	movw	r24, r20
 * Description:	This method converts the raw temperature data to human 
 * 				readable values
 ****************************************************************************/
int16_t oneWire::convert_temp(int16_t raw)
{
	return (raw * 6) + (raw / 4);
    1320:	44 0f       	add	r20, r20
    1322:	55 1f       	adc	r21, r21
    1324:	48 0f       	add	r20, r24
    1326:	59 1f       	adc	r21, r25
    1328:	44 0f       	add	r20, r20
    132a:	55 1f       	adc	r21, r21
    132c:	9c 01       	movw	r18, r24
    132e:	99 23       	and	r25, r25
    1330:	14 f4       	brge	.+4      	; 0x1336 <_ZN7oneWire11oneWireTaskEv+0x60>
    1332:	2d 5f       	subi	r18, 0xFD	; 253
    1334:	3f 4f       	sbci	r19, 0xFF	; 255
    1336:	35 95       	asr	r19
    1338:	27 95       	ror	r18
    133a:	35 95       	asr	r19
    133c:	27 95       	ror	r18
    133e:	42 0f       	add	r20, r18
    1340:	53 1f       	adc	r21, r19
		// read temperature
		low_byte = read_byte();
		high_byte = read_byte();
		temp = (high_byte << BYTE_SHIFT) | low_byte;
		temp = convert_temp(temp);
		temp_f = TEMP_C_TO_F((int32_t)temp);
    1342:	05 2e       	mov	r0, r21
    1344:	00 0c       	add	r0, r0
    1346:	66 0b       	sbc	r22, r22
    1348:	77 0b       	sbc	r23, r23
    134a:	db 01       	movw	r26, r22
    134c:	ca 01       	movw	r24, r20
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	aa 1f       	adc	r26, r26
    1354:	bb 1f       	adc	r27, r27
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	aa 1f       	adc	r26, r26
    135c:	bb 1f       	adc	r27, r27
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	aa 1f       	adc	r26, r26
    1364:	bb 1f       	adc	r27, r27
    1366:	84 0f       	add	r24, r20
    1368:	95 1f       	adc	r25, r21
    136a:	a6 1f       	adc	r26, r22
    136c:	b7 1f       	adc	r27, r23
    136e:	bc 01       	movw	r22, r24
    1370:	cd 01       	movw	r24, r26
    1372:	60 58       	subi	r22, 0x80	; 128
    1374:	71 4c       	sbci	r23, 0xC1	; 193
    1376:	8f 4f       	sbci	r24, 0xFF	; 255
    1378:	9f 4f       	sbci	r25, 0xFF	; 255
    137a:	25 e0       	ldi	r18, 0x05	; 5
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e0       	ldi	r20, 0x00	; 0
    1380:	50 e0       	ldi	r21, 0x00	; 0
    1382:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__divmodsi4>
		
		// update global value
		if (dev_id == ID_SURFACE_TEMP)
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	82 30       	cpi	r24, 0x02	; 2
    138a:	49 f4       	brne	.+18     	; 0x139e <_ZN7oneWire11oneWireTaskEv+0xc8>
		{
			surf_temp = temp_f;
    138c:	20 93 34 01 	sts	0x0134, r18
    1390:	30 93 35 01 	sts	0x0135, r19
    1394:	40 93 36 01 	sts	0x0136, r20
    1398:	50 93 37 01 	sts	0x0137, r21
    139c:	0a c0       	rjmp	.+20     	; 0x13b2 <_ZN7oneWire11oneWireTaskEv+0xdc>
		}
		else if (dev_id == ID_UNDERWATER_TEMP)
    139e:	83 30       	cpi	r24, 0x03	; 3
    13a0:	41 f4       	brne	.+16     	; 0x13b2 <_ZN7oneWire11oneWireTaskEv+0xdc>
		{
			sub_temp = temp_f;
    13a2:	20 93 30 01 	sts	0x0130, r18
    13a6:	30 93 31 01 	sts	0x0131, r19
    13aa:	40 93 32 01 	sts	0x0132, r20
    13ae:	50 93 33 01 	sts	0x0133, r21
		//DBG(this->p_serial, "Temp sensor %d: %d.%02dC or %ld.%02ldF\r\n",
		//	dev_id, 
		//	(temp / 100), (temp % 100),
		//	(temp_f / 100), (temp_f % 100));
	//}
	runs++;
    13b2:	80 91 3e 01 	lds	r24, 0x013E
    13b6:	8f 5f       	subi	r24, 0xFF	; 255
    13b8:	80 93 3e 01 	sts	0x013E, r24
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	08 95       	ret

000013c4 <_ZN3PIR15init_timer_ln_1Ev>:

void PIR::init_timer_ln_1 (void)
{
	// set up timer0 compA for lane 1
	// Compare output mode, non-PWM mode, clear on compare match
	TCCR0A |= ((1 << COM0A1) & ~(1 << COM0A0));
    13c4:	84 b5       	in	r24, 0x24	; 36
    13c6:	80 68       	ori	r24, 0x80	; 128
    13c8:	84 bd       	out	0x24, r24	; 36
	
	// Force output compare A
	TCCR0B |= (1 << FOC0A);
    13ca:	85 b5       	in	r24, 0x25	; 37
    13cc:	80 68       	ori	r24, 0x80	; 128
    13ce:	85 bd       	out	0x25, r24	; 37
	
	// set prescaler to 1024
	TCCR0B |= (((1 << CS02) & ~(1 << CS01)) | (1 << CS00));
    13d0:	85 b5       	in	r24, 0x25	; 37
    13d2:	85 60       	ori	r24, 0x05	; 5
    13d4:	85 bd       	out	0x25, r24	; 37
	
	// Clear previous timer overflow
	TIMSK0 |= (1 << OCF0A);
    13d6:	ee e6       	ldi	r30, 0x6E	; 110
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	82 60       	ori	r24, 0x02	; 2
    13de:	80 83       	st	Z, r24
	
	// enable compare match
	TIMSK0 |= (1 << OCIE0A);
    13e0:	80 81       	ld	r24, Z
    13e2:	82 60       	ori	r24, 0x02	; 2
    13e4:	80 83       	st	Z, r24
	
	// set timer output compare match
	OCR0A = 0xFF;
    13e6:	8f ef       	ldi	r24, 0xFF	; 255
    13e8:	87 bd       	out	0x27, r24	; 39
    13ea:	08 95       	ret

000013ec <_ZN3PIR15init_timer_ln_2Ev>:

void PIR::init_timer_ln_2 (void)
{
	// set up timer0 compB for lane 2
	// Compare output mode, non-PWM mode, clear on compare match
	TCCR0A |= ((1 << COM0B1) & !(1 << COM0B0));
    13ec:	84 b5       	in	r24, 0x24	; 36
    13ee:	84 bd       	out	0x24, r24	; 36
	
	// Force output compare B
	TCCR0B |= (1 << FOC0B);
    13f0:	85 b5       	in	r24, 0x25	; 37
    13f2:	80 64       	ori	r24, 0x40	; 64
    13f4:	85 bd       	out	0x25, r24	; 37
	
	// set prescaler to 1024
	TCCR0B |= (((1 << CS02) & ~(1 << CS01)) | (1 << CS00));
    13f6:	85 b5       	in	r24, 0x25	; 37
    13f8:	85 60       	ori	r24, 0x05	; 5
    13fa:	85 bd       	out	0x25, r24	; 37
	
	// Clear previous timer overflow
	TIMSK0 |= (1 << OCF0B);
    13fc:	ee e6       	ldi	r30, 0x6E	; 110
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	84 60       	ori	r24, 0x04	; 4
    1404:	80 83       	st	Z, r24
	
	// enable compare match
	TIMSK0 |= (1 << OCIE0B);
    1406:	80 81       	ld	r24, Z
    1408:	84 60       	ori	r24, 0x04	; 4
    140a:	80 83       	st	Z, r24
	
	// set timer output compare match
	OCR0A = 0xFF;
    140c:	8f ef       	ldi	r24, 0xFF	; 255
    140e:	87 bd       	out	0x27, r24	; 39
    1410:	08 95       	ret

00001412 <_ZN3PIR7initPIREv>:
}

void PIR::initPIR (void)
{
	// Enable Pin Change Interrupts on Port D
	PCICR |= 1 << PCIE2;
    1412:	e8 e6       	ldi	r30, 0x68	; 104
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	20 81       	ld	r18, Z
    1418:	24 60       	ori	r18, 0x04	; 4
    141a:	20 83       	st	Z, r18
	
	// Enables Specific Pin as Pin Change Interrupt
	PCMSK2 |= 1 << pin; // PCINTx
    141c:	ed e6       	ldi	r30, 0x6D	; 109
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	40 81       	ld	r20, Z
    1422:	21 e0       	ldi	r18, 0x01	; 1
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	dc 01       	movw	r26, r24
    1428:	12 96       	adiw	r26, 0x02	; 2
    142a:	0c 90       	ld	r0, X
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <_ZN3PIR7initPIREv+0x20>
    142e:	22 0f       	add	r18, r18
    1430:	33 1f       	adc	r19, r19
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <_ZN3PIR7initPIREv+0x1c>
    1436:	24 2b       	or	r18, r20
    1438:	20 83       	st	Z, r18
	
	// Clear any previous interrupts
	PCIFR |= 1 << PCIF2;
    143a:	da 9a       	sbi	0x1b, 2	; 27
	
	sei();
    143c:	78 94       	sei
    143e:	08 95       	ret

00001440 <_ZN3PIRC1EP6serialh>:
 * Description:	This constructor sets up the PIR sensor.
 * 
 * Parameters:	ptr_serial	- a reference to the serial debug object
 *				p 			- the pin on the ATmega328P the sensor outputs to
 ****************************************************************************/
PIR::PIR (serial *ptr_serial, uint8_t p)
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	ec 01       	movw	r28, r24
{
	// initialize the pin and serial debug object
	pin = p;
    1446:	4a 83       	std	Y+2, r20	; 0x02
	p_serial = ptr_serial;
    1448:	79 83       	std	Y+1, r23	; 0x01
    144a:	68 83       	st	Y, r22

	// Make PIR an Input
	INPUT(PIR_DDR, pin);
    144c:	2a b1       	in	r18, 0x0a	; 10
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <_ZN3PIRC1EP6serialh+0x18>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	4a 95       	dec	r20
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <_ZN3PIRC1EP6serialh+0x14>
    145c:	80 95       	com	r24
    145e:	82 23       	and	r24, r18
    1460:	8a b9       	out	0x0a, r24	; 10
	
	switch (pin)
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	84 30       	cpi	r24, 0x04	; 4
    1466:	41 f0       	breq	.+16     	; 0x1478 <_ZN3PIRC1EP6serialh+0x38>
    1468:	87 30       	cpi	r24, 0x07	; 7
    146a:	61 f4       	brne	.+24     	; 0x1484 <_ZN3PIRC1EP6serialh+0x44>
	{
		case LN_1_PIN:
			lane = LN_1;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	8b 83       	std	Y+3, r24	; 0x03
			init_timer_ln_1();
    1470:	ce 01       	movw	r24, r28
    1472:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <_ZN3PIR15init_timer_ln_1Ev>
			break;
    1476:	07 c0       	rjmp	.+14     	; 0x1486 <_ZN3PIRC1EP6serialh+0x46>
		case LN_2_PIN:
			lane = LN_2;
    1478:	82 e0       	ldi	r24, 0x02	; 2
    147a:	8b 83       	std	Y+3, r24	; 0x03
			init_timer_ln_2();
    147c:	ce 01       	movw	r24, r28
    147e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_ZN3PIR15init_timer_ln_2Ev>
			break;
    1482:	01 c0       	rjmp	.+2      	; 0x1486 <_ZN3PIRC1EP6serialh+0x46>
		default:
			lane = 0;
    1484:	1b 82       	std	Y+3, r1	; 0x03
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1486:	2f ef       	ldi	r18, 0xFF	; 255
    1488:	33 eb       	ldi	r19, 0xB3	; 179
    148a:	84 ec       	ldi	r24, 0xC4	; 196
    148c:	94 e0       	ldi	r25, 0x04	; 4
    148e:	21 50       	subi	r18, 0x01	; 1
    1490:	30 40       	sbci	r19, 0x00	; 0
    1492:	80 40       	sbci	r24, 0x00	; 0
    1494:	90 40       	sbci	r25, 0x00	; 0
    1496:	d9 f7       	brne	.-10     	; 0x148e <_ZN3PIRC1EP6serialh+0x4e>
    1498:	00 c0       	rjmp	.+0      	; 0x149a <_ZN3PIRC1EP6serialh+0x5a>
    149a:	00 00       	nop
	}
	
	//DBG(this->p_serial, "PIR for lane %d Calibrating...", lane);
	_delay_ms(30000);

	initPIR();
    149c:	ce 01       	movw	r24, r28
    149e:	0e 94 09 0a 	call	0x1412	; 0x1412 <_ZN3PIR7initPIREv>
	//DBG(this->p_serial, "PIR Constructor OK!\r\n");
}
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	08 95       	ret

000014a8 <_ZN3PIR7PIRTaskEv>:
			DBG(this->p_serial, "NOT ");
		}
		DBG(this->p_serial, "active.\r\n");		
	}
	*/
	runs++;
    14a8:	80 91 3f 01 	lds	r24, 0x013F
    14ac:	8f 5f       	subi	r24, 0xFF	; 255
    14ae:	80 93 3f 01 	sts	0x013F, r24
    14b2:	08 95       	ret

000014b4 <__vector_5>:
}

ISR (PCINT2_vect)
{
    14b4:	1f 92       	push	r1
    14b6:	0f 92       	push	r0
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	0f 92       	push	r0
    14bc:	11 24       	eor	r1, r1
    14be:	8f 93       	push	r24
    14c0:	9f 93       	push	r25
    14c2:	ef 93       	push	r30
    14c4:	ff 93       	push	r31
	changedBits;
    14c6:	80 91 3b 01 	lds	r24, 0x013B
	cli();
    14ca:	f8 94       	cli

	changedBits = PIR_PIN ^ portd_hist;
    14cc:	89 b1       	in	r24, 0x09	; 9
    14ce:	90 91 3a 01 	lds	r25, 0x013A
    14d2:	89 27       	eor	r24, r25
    14d4:	80 93 3b 01 	sts	0x013B, r24
	portd_hist = PIR_PIN;
    14d8:	89 b1       	in	r24, 0x09	; 9
    14da:	80 93 3a 01 	sts	0x013A, r24

	if (changedBits & (1 << LN_1_PIN))
    14de:	80 91 3b 01 	lds	r24, 0x013B
    14e2:	88 23       	and	r24, r24
    14e4:	64 f4       	brge	.+24     	; 0x14fe <__vector_5+0x4a>
	{
		// Lane 1 changed state
		// reset timer counter
		ln_1_tmr_cnt = 0;
    14e6:	10 92 39 01 	sts	0x0139, r1
		// set timer flag for lane 1
		ln_tmr_flg |= LN_1;
    14ea:	80 91 3c 01 	lds	r24, 0x013C
    14ee:	81 60       	ori	r24, 0x01	; 1
    14f0:	80 93 3c 01 	sts	0x013C, r24
		
		// clear timer
		TIMSK0 |= (1 << OCF0A);
    14f4:	ee e6       	ldi	r30, 0x6E	; 110
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	82 60       	ori	r24, 0x02	; 2
    14fc:	80 83       	st	Z, r24
	}
	
	if (changedBits & (1 << LN_2_PIN))
    14fe:	80 91 3b 01 	lds	r24, 0x013B
    1502:	84 ff       	sbrs	r24, 4
    1504:	0c c0       	rjmp	.+24     	; 0x151e <__vector_5+0x6a>
	{
		// Lane 2 changed state
		// reset timer counter
		ln_2_tmr_cnt = 0;
    1506:	10 92 38 01 	sts	0x0138, r1
		// set timer flag for lane 2
		ln_tmr_flg |= LN_2;
    150a:	80 91 3c 01 	lds	r24, 0x013C
    150e:	82 60       	ori	r24, 0x02	; 2
    1510:	80 93 3c 01 	sts	0x013C, r24
		
		// clear timer
		TIMSK0 |= (1 << OCF0B);
    1514:	ee e6       	ldi	r30, 0x6E	; 110
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	84 60       	ori	r24, 0x04	; 4
    151c:	80 83       	st	Z, r24
	}

	sei();
    151e:	78 94       	sei
}
    1520:	ff 91       	pop	r31
    1522:	ef 91       	pop	r30
    1524:	9f 91       	pop	r25
    1526:	8f 91       	pop	r24
    1528:	0f 90       	pop	r0
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	0f 90       	pop	r0
    152e:	1f 90       	pop	r1
    1530:	18 95       	reti

00001532 <__vector_14>:

ISR (TIMER0_COMPA_vect)
{	
    1532:	1f 92       	push	r1
    1534:	0f 92       	push	r0
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	0f 92       	push	r0
    153a:	11 24       	eor	r1, r1
    153c:	8f 93       	push	r24
    153e:	9f 93       	push	r25
	// check if supposed to monitor for state hold
	if (ln_tmr_flg & LN_1)
    1540:	80 91 3c 01 	lds	r24, 0x013C
    1544:	80 ff       	sbrs	r24, 0
    1546:	29 c0       	rjmp	.+82     	; 0x159a <__vector_14+0x68>
	{
		if (lane_states & LN_1)
    1548:	80 91 3d 01 	lds	r24, 0x013D
    154c:	80 ff       	sbrs	r24, 0
    154e:	13 c0       	rjmp	.+38     	; 0x1576 <__vector_14+0x44>
		{
			// lane 1 was full
			if (ln_1_tmr_cnt++ >= MIN_LN_EMPTY)
    1550:	80 91 39 01 	lds	r24, 0x0139
    1554:	91 e0       	ldi	r25, 0x01	; 1
    1556:	98 0f       	add	r25, r24
    1558:	90 93 39 01 	sts	0x0139, r25
    155c:	8b 39       	cpi	r24, 0x9B	; 155
    155e:	e8 f0       	brcs	.+58     	; 0x159a <__vector_14+0x68>
			{
				// lane 1 now considered empty
				lane_states &= ~LN_1;
    1560:	80 91 3d 01 	lds	r24, 0x013D
    1564:	8e 7f       	andi	r24, 0xFE	; 254
    1566:	80 93 3d 01 	sts	0x013D, r24
				// clear the flag so stop monitoring
				ln_tmr_flg &= ~LN_1;
    156a:	80 91 3c 01 	lds	r24, 0x013C
    156e:	8e 7f       	andi	r24, 0xFE	; 254
    1570:	80 93 3c 01 	sts	0x013C, r24
    1574:	12 c0       	rjmp	.+36     	; 0x159a <__vector_14+0x68>
			}
		}
		else
		{
			// lane 1 was empty
			if (ln_1_tmr_cnt++ >= MIN_LN_FULL)
    1576:	80 91 39 01 	lds	r24, 0x0139
    157a:	91 e0       	ldi	r25, 0x01	; 1
    157c:	98 0f       	add	r25, r24
    157e:	90 93 39 01 	sts	0x0139, r25
    1582:	84 36       	cpi	r24, 0x64	; 100
    1584:	50 f0       	brcs	.+20     	; 0x159a <__vector_14+0x68>
			{
				// lane 1 now considered full
				lane_states |= LN_1;
    1586:	80 91 3d 01 	lds	r24, 0x013D
    158a:	81 60       	ori	r24, 0x01	; 1
    158c:	80 93 3d 01 	sts	0x013D, r24
				// clear the flag so stop monitoring
				ln_tmr_flg &= ~LN_1;
    1590:	80 91 3c 01 	lds	r24, 0x013C
    1594:	8e 7f       	andi	r24, 0xFE	; 254
    1596:	80 93 3c 01 	sts	0x013C, r24
			}
		}
	}
}
    159a:	9f 91       	pop	r25
    159c:	8f 91       	pop	r24
    159e:	0f 90       	pop	r0
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	0f 90       	pop	r0
    15a4:	1f 90       	pop	r1
    15a6:	18 95       	reti

000015a8 <__vector_15>:

ISR (TIMER0_COMPB_vect)
{
    15a8:	1f 92       	push	r1
    15aa:	0f 92       	push	r0
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	0f 92       	push	r0
    15b0:	11 24       	eor	r1, r1
    15b2:	8f 93       	push	r24
    15b4:	9f 93       	push	r25
	// check if supposed to monitor for state hold
	if (ln_tmr_flg & LN_2)
    15b6:	80 91 3c 01 	lds	r24, 0x013C
    15ba:	81 ff       	sbrs	r24, 1
    15bc:	29 c0       	rjmp	.+82     	; 0x1610 <__vector_15+0x68>
	{
		if (lane_states & LN_2)
    15be:	80 91 3d 01 	lds	r24, 0x013D
    15c2:	81 ff       	sbrs	r24, 1
    15c4:	13 c0       	rjmp	.+38     	; 0x15ec <__vector_15+0x44>
		{
			// lane 2 was full
			if (ln_2_tmr_cnt++ >= MIN_LN_EMPTY)
    15c6:	80 91 38 01 	lds	r24, 0x0138
    15ca:	91 e0       	ldi	r25, 0x01	; 1
    15cc:	98 0f       	add	r25, r24
    15ce:	90 93 38 01 	sts	0x0138, r25
    15d2:	8b 39       	cpi	r24, 0x9B	; 155
    15d4:	e8 f0       	brcs	.+58     	; 0x1610 <__vector_15+0x68>
			{
				// lane 2 now considered empty
				lane_states &= ~LN_2;
    15d6:	80 91 3d 01 	lds	r24, 0x013D
    15da:	8d 7f       	andi	r24, 0xFD	; 253
    15dc:	80 93 3d 01 	sts	0x013D, r24
				// clear the flag so stop monitoring
				ln_tmr_flg &= ~LN_2;
    15e0:	80 91 3c 01 	lds	r24, 0x013C
    15e4:	8d 7f       	andi	r24, 0xFD	; 253
    15e6:	80 93 3c 01 	sts	0x013C, r24
    15ea:	12 c0       	rjmp	.+36     	; 0x1610 <__vector_15+0x68>
			}
		}
		else
		{
			// lane 2 was empty
			if (ln_2_tmr_cnt++ >= MIN_LN_FULL)
    15ec:	80 91 38 01 	lds	r24, 0x0138
    15f0:	91 e0       	ldi	r25, 0x01	; 1
    15f2:	98 0f       	add	r25, r24
    15f4:	90 93 38 01 	sts	0x0138, r25
    15f8:	84 36       	cpi	r24, 0x64	; 100
    15fa:	50 f0       	brcs	.+20     	; 0x1610 <__vector_15+0x68>
			{
				// lane 2 now considered full
				lane_states |= LN_2;
    15fc:	80 91 3d 01 	lds	r24, 0x013D
    1600:	82 60       	ori	r24, 0x02	; 2
    1602:	80 93 3d 01 	sts	0x013D, r24
				// clear the flag so stop monitoring
				ln_tmr_flg &= ~LN_2;
    1606:	80 91 3c 01 	lds	r24, 0x013C
    160a:	8d 7f       	andi	r24, 0xFD	; 253
    160c:	80 93 3c 01 	sts	0x013C, r24
			}
		}
	}
    1610:	9f 91       	pop	r25
    1612:	8f 91       	pop	r24
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	0f 90       	pop	r0
    161a:	1f 90       	pop	r1
    161c:	18 95       	reti

0000161e <_ZN6serial4initEv>:
 * 
 * Return:		bool - the status of the operation (true  = success,
 *													false = failure)
 ****************************************************************************/
void serial::init (void)
{
    161e:	fc 01       	movw	r30, r24
	/* calculate ubrr for desired baud rate */
	uint32_t ubrr = ((clk_speed / 16UL) / baud_rate) - 1;
    1620:	84 81       	ldd	r24, Z+4	; 0x04
    1622:	95 81       	ldd	r25, Z+5	; 0x05
    1624:	a6 81       	ldd	r26, Z+6	; 0x06
    1626:	b7 81       	ldd	r27, Z+7	; 0x07
    1628:	bc 01       	movw	r22, r24
    162a:	cd 01       	movw	r24, r26
    162c:	68 94       	set
    162e:	13 f8       	bld	r1, 3
    1630:	96 95       	lsr	r25
    1632:	87 95       	ror	r24
    1634:	77 95       	ror	r23
    1636:	67 95       	ror	r22
    1638:	16 94       	lsr	r1
    163a:	d1 f7       	brne	.-12     	; 0x1630 <_ZN6serial4initEv+0x12>
    163c:	20 81       	ld	r18, Z
    163e:	31 81       	ldd	r19, Z+1	; 0x01
    1640:	42 81       	ldd	r20, Z+2	; 0x02
    1642:	53 81       	ldd	r21, Z+3	; 0x03
    1644:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__udivmodsi4>
    1648:	ba 01       	movw	r22, r20
    164a:	a9 01       	movw	r20, r18
    164c:	41 50       	subi	r20, 0x01	; 1
    164e:	51 09       	sbc	r21, r1
    1650:	61 09       	sbc	r22, r1
    1652:	71 09       	sbc	r23, r1
	UBRR0H = (uint8_t)(ubrr >> 8);
    1654:	bb 27       	eor	r27, r27
    1656:	a7 2f       	mov	r26, r23
    1658:	96 2f       	mov	r25, r22
    165a:	85 2f       	mov	r24, r21
    165c:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (uint8_t)ubrr;
    1660:	40 93 c4 00 	sts	0x00C4, r20
	
	/* Enable receiver and transmitter */
	UCSR0B = ((1 << RXEN0) | (1 << TXEN0));
    1664:	88 e1       	ldi	r24, 0x18	; 24
    1666:	80 93 c1 00 	sts	0x00C1, r24
	
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = ((1 << USBS0) | (3 << UCSZ00));
    166a:	8e e0       	ldi	r24, 0x0E	; 14
    166c:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0A &= ~(1 << U2X0);
    1670:	e0 ec       	ldi	r30, 0xC0	; 192
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	8d 7f       	andi	r24, 0xFD	; 253
    1678:	80 83       	st	Z, r24
    167a:	08 95       	ret

0000167c <_ZN6serialC1Emm>:
 *				connection.
 * 
 * Parameters:	baud - the baud rate to establish
 *				clk  - the clock speed of the device
 ****************************************************************************/
serial::serial (uint32_t baud, uint32_t clk)
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
{
	baud_rate = baud;		// store a local copy of baud rate
    1680:	fc 01       	movw	r30, r24
    1682:	40 83       	st	Z, r20
    1684:	51 83       	std	Z+1, r21	; 0x01
    1686:	62 83       	std	Z+2, r22	; 0x02
    1688:	73 83       	std	Z+3, r23	; 0x03
	clk_speed = clk;		// store a local copy of clock speed of device
    168a:	04 83       	std	Z+4, r16	; 0x04
    168c:	15 83       	std	Z+5, r17	; 0x05
    168e:	26 83       	std	Z+6, r18	; 0x06
    1690:	37 83       	std	Z+7, r19	; 0x07
	
	init();
    1692:	0e 94 0f 0b 	call	0x161e	; 0x161e <_ZN6serial4initEv>
}
    1696:	1f 91       	pop	r17
    1698:	0f 91       	pop	r16
    169a:	08 95       	ret

0000169c <_ZN6serial4sendEh>:
bool serial::send (uint8_t data)
{
	uint16_t cnt = 0;
	
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1 << UDRE0)))// && cnt < SERIAL_TIMEOUT)
    169c:	e0 ec       	ldi	r30, 0xC0	; 192
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	85 ff       	sbrs	r24, 5
    16a4:	fd cf       	rjmp	.-6      	; 0x16a0 <_ZN6serial4sendEh+0x4>
		return false;
	}
	*/
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
    16a6:	60 93 c6 00 	sts	0x00C6, r22
	
	return true;
}
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	08 95       	ret

000016ae <_ZN6serial4sendEPc>:
 * 
 * Parameters:	str - the string of data to be sent, maximum 255 bytes
 * Return:		uint8_t - the total number of characters successfully sent
 ****************************************************************************/
uint8_t serial::send (char *str)
{
    16ae:	ef 92       	push	r14
    16b0:	ff 92       	push	r15
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	fb 01       	movw	r30, r22
	uint8_t sent = 0;
	
	while (*str && sent < SERIAL_MAX_SEND)
    16ba:	60 81       	ld	r22, Z
    16bc:	66 23       	and	r22, r22
    16be:	99 f0       	breq	.+38     	; 0x16e6 <_ZN6serial4sendEPc+0x38>
    16c0:	8f 01       	movw	r16, r30
    16c2:	7c 01       	movw	r14, r24
    16c4:	0f 5f       	subi	r16, 0xFF	; 255
    16c6:	1f 4f       	sbci	r17, 0xFF	; 255
    16c8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if (send(*str++))
    16ca:	c7 01       	movw	r24, r14
    16cc:	0e 94 4e 0b 	call	0x169c	; 0x169c <_ZN6serial4sendEh>
    16d0:	88 23       	and	r24, r24
    16d2:	51 f0       	breq	.+20     	; 0x16e8 <_ZN6serial4sendEPc+0x3a>
		{
			sent++;
    16d4:	cf 5f       	subi	r28, 0xFF	; 255
 ****************************************************************************/
uint8_t serial::send (char *str)
{
	uint8_t sent = 0;
	
	while (*str && sent < SERIAL_MAX_SEND)
    16d6:	f8 01       	movw	r30, r16
    16d8:	61 91       	ld	r22, Z+
    16da:	8f 01       	movw	r16, r30
    16dc:	66 23       	and	r22, r22
    16de:	21 f0       	breq	.+8      	; 0x16e8 <_ZN6serial4sendEPc+0x3a>
    16e0:	cf 3f       	cpi	r28, 0xFF	; 255
    16e2:	99 f7       	brne	.-26     	; 0x16ca <_ZN6serial4sendEPc+0x1c>
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <_ZN6serial4sendEPc+0x3a>
 * Parameters:	str - the string of data to be sent, maximum 255 bytes
 * Return:		uint8_t - the total number of characters successfully sent
 ****************************************************************************/
uint8_t serial::send (char *str)
{
	uint8_t sent = 0;
    16e6:	c0 e0       	ldi	r28, 0x00	; 0
			break;
		}
	}
	
	return sent;
}
    16e8:	8c 2f       	mov	r24, r28
    16ea:	cf 91       	pop	r28
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	ff 90       	pop	r15
    16f2:	ef 90       	pop	r14
    16f4:	08 95       	ret

000016f6 <_ZN6serial7sendPktEv>:
 * Method:		sendPkt
 * Description:	This method sends a packet over the TX line that contains all
 *				of the latest sensor data.
 ****************************************************************************/
void serial::sendPkt (void)
{
    16f6:	ef 92       	push	r14
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	e2 97       	sbiw	r28, 0x32	; 50
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	7c 01       	movw	r14, r24
		ext_temp,
		ext_hum,
		windy,
		uv_ndx,
		(lane_states & 0x01) ? 1 : 0,
		(lane_states & 0x02) ? 1 : 0);
    1714:	20 91 3d 01 	lds	r18, 0x013D
    1718:	90 91 3d 01 	lds	r25, 0x013D
    171c:	26 95       	lsr	r18
    171e:	21 70       	andi	r18, 0x01	; 1
    1720:	1f 92       	push	r1
    1722:	2f 93       	push	r18
    1724:	91 70       	andi	r25, 0x01	; 1
    1726:	1f 92       	push	r1
    1728:	9f 93       	push	r25
    172a:	80 91 26 01 	lds	r24, 0x0126
    172e:	8f 93       	push	r24
    1730:	80 91 25 01 	lds	r24, 0x0125
    1734:	8f 93       	push	r24
    1736:	80 91 27 01 	lds	r24, 0x0127
    173a:	1f 92       	push	r1
    173c:	8f 93       	push	r24
    173e:	80 91 2b 01 	lds	r24, 0x012B
    1742:	8f 93       	push	r24
    1744:	80 91 2a 01 	lds	r24, 0x012A
    1748:	8f 93       	push	r24
    174a:	80 91 29 01 	lds	r24, 0x0129
    174e:	8f 93       	push	r24
    1750:	80 91 28 01 	lds	r24, 0x0128
    1754:	8f 93       	push	r24
    1756:	80 91 2f 01 	lds	r24, 0x012F
    175a:	8f 93       	push	r24
    175c:	80 91 2e 01 	lds	r24, 0x012E
    1760:	8f 93       	push	r24
    1762:	80 91 2d 01 	lds	r24, 0x012D
    1766:	8f 93       	push	r24
    1768:	80 91 2c 01 	lds	r24, 0x012C
    176c:	8f 93       	push	r24
    176e:	80 91 33 01 	lds	r24, 0x0133
    1772:	8f 93       	push	r24
    1774:	80 91 32 01 	lds	r24, 0x0132
    1778:	8f 93       	push	r24
    177a:	80 91 31 01 	lds	r24, 0x0131
    177e:	8f 93       	push	r24
    1780:	80 91 30 01 	lds	r24, 0x0130
    1784:	8f 93       	push	r24
    1786:	80 91 37 01 	lds	r24, 0x0137
    178a:	8f 93       	push	r24
    178c:	80 91 36 01 	lds	r24, 0x0136
    1790:	8f 93       	push	r24
    1792:	80 91 35 01 	lds	r24, 0x0135
    1796:	8f 93       	push	r24
    1798:	80 91 34 01 	lds	r24, 0x0134
    179c:	8f 93       	push	r24
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	91 e0       	ldi	r25, 0x01	; 1
    17a2:	9f 93       	push	r25
    17a4:	8f 93       	push	r24
    17a6:	8e 01       	movw	r16, r28
    17a8:	0f 5f       	subi	r16, 0xFF	; 255
    17aa:	1f 4f       	sbci	r17, 0xFF	; 255
    17ac:	1f 93       	push	r17
    17ae:	0f 93       	push	r16
    17b0:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <sprintf>
	
	send(pkt);
    17b4:	b8 01       	movw	r22, r16
    17b6:	c7 01       	movw	r24, r14
    17b8:	0e 94 57 0b 	call	0x16ae	; 0x16ae <_ZN6serial4sendEPc>
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
	
	// re-enable interrupts for PIR and timers
	//sei();
    17c6:	e2 96       	adiw	r28, 0x32	; 50
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	1f 91       	pop	r17
    17d8:	0f 91       	pop	r16
    17da:	ff 90       	pop	r15
    17dc:	ef 90       	pop	r14
    17de:	08 95       	ret

000017e0 <_ZN8TiltBallC1EP6serialh>:
 * Description:	This constructor sets up the tiltBall sensor on the ATmega328P
 *
 * Parameters:	ptr_Serial	- pointer to serial object for debugging
 *				p			- the pin on which the tiltBall is connected
 ****************************************************************************/
TiltBall::TiltBall (serial *ptr_serial, uint8_t p)
    17e0:	fc 01       	movw	r30, r24
{
	pin = p;					// store local copy of tilt ball pin
    17e2:	42 83       	std	Z+2, r20	; 0x02
	p_serial = ptr_serial;		// store local copy of serial for debug
    17e4:	71 83       	std	Z+1, r23	; 0x01
    17e6:	60 83       	st	Z, r22
	INPUT(TILT_DDR, pin);		// Make tilt ball an input
    17e8:	84 b1       	in	r24, 0x04	; 4
    17ea:	21 e0       	ldi	r18, 0x01	; 1
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <_ZN8TiltBallC1EP6serialh+0x14>
    17f0:	22 0f       	add	r18, r18
    17f2:	33 1f       	adc	r19, r19
    17f4:	4a 95       	dec	r20
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <_ZN8TiltBallC1EP6serialh+0x10>
    17f8:	20 95       	com	r18
    17fa:	28 23       	and	r18, r24
    17fc:	24 b9       	out	0x04, r18	; 4
	
	hist = 0;					// initialize the history to 0
    17fe:	13 82       	std	Z+3, r1	; 0x03
    1800:	14 82       	std	Z+4, r1	; 0x04
    1802:	15 82       	std	Z+5, r1	; 0x05
    1804:	16 82       	std	Z+6, r1	; 0x06
    1806:	08 95       	ret

00001808 <_ZN8TiltBall8isTiltedEv>:
 * Return:		bool - whether or not the sensor is in a tilted state
 *						(true = tilted, false = not tilted)
 ****************************************************************************/
bool TiltBall::isTilted (void)
{
	return TILT_PIN & (1 << pin);
    1808:	23 b1       	in	r18, 0x03	; 3
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	a9 01       	movw	r20, r18
    180e:	fc 01       	movw	r30, r24
    1810:	02 80       	ldd	r0, Z+2	; 0x02
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <_ZN8TiltBall8isTiltedEv+0x10>
    1814:	55 95       	asr	r21
    1816:	47 95       	ror	r20
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <_ZN8TiltBall8isTiltedEv+0xc>
    181c:	ca 01       	movw	r24, r20
}
    181e:	81 70       	andi	r24, 0x01	; 1
    1820:	08 95       	ret

00001822 <_ZN8TiltBall7isWindyEv>:

uint8_t TiltBall::isWindy (void)
{
    1822:	cf 92       	push	r12
    1824:	df 92       	push	r13
    1826:	ef 92       	push	r14
    1828:	ff 92       	push	r15
	uint8_t wind = 0;
	
	for (uint8_t ndx = 0; ndx < 32; ndx++)
	{
		wind +=  (hist >> ndx) & 0x01;
    182a:	fc 01       	movw	r30, r24
    182c:	c3 80       	ldd	r12, Z+3	; 0x03
    182e:	d4 80       	ldd	r13, Z+4	; 0x04
    1830:	e5 80       	ldd	r14, Z+5	; 0x05
    1832:	f6 80       	ldd	r15, Z+6	; 0x06
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e0       	ldi	r25, 0x00	; 0
	return TILT_PIN & (1 << pin);
}

uint8_t TiltBall::isWindy (void)
{
	uint8_t wind = 0;
    1838:	20 e0       	ldi	r18, 0x00	; 0
	
	for (uint8_t ndx = 0; ndx < 32; ndx++)
	{
		wind +=  (hist >> ndx) & 0x01;
    183a:	b7 01       	movw	r22, r14
    183c:	a6 01       	movw	r20, r12
    183e:	08 2e       	mov	r0, r24
    1840:	04 c0       	rjmp	.+8      	; 0x184a <_ZN8TiltBall7isWindyEv+0x28>
    1842:	76 95       	lsr	r23
    1844:	67 95       	ror	r22
    1846:	57 95       	ror	r21
    1848:	47 95       	ror	r20
    184a:	0a 94       	dec	r0
    184c:	d2 f7       	brpl	.-12     	; 0x1842 <_ZN8TiltBall7isWindyEv+0x20>
    184e:	41 70       	andi	r20, 0x01	; 1
    1850:	24 0f       	add	r18, r20
    1852:	01 96       	adiw	r24, 0x01	; 1

uint8_t TiltBall::isWindy (void)
{
	uint8_t wind = 0;
	
	for (uint8_t ndx = 0; ndx < 32; ndx++)
    1854:	80 32       	cpi	r24, 0x20	; 32
    1856:	91 05       	cpc	r25, r1
    1858:	81 f7       	brne	.-32     	; 0x183a <_ZN8TiltBall7isWindyEv+0x18>
	{
		wind +=  (hist >> ndx) & 0x01;
	}
	
	return wind > 15;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	20 31       	cpi	r18, 0x10	; 16
    185e:	08 f4       	brcc	.+2      	; 0x1862 <_ZN8TiltBall7isWindyEv+0x40>
    1860:	80 e0       	ldi	r24, 0x00	; 0
}
    1862:	ff 90       	pop	r15
    1864:	ef 90       	pop	r14
    1866:	df 90       	pop	r13
    1868:	cf 90       	pop	r12
    186a:	08 95       	ret

0000186c <_ZN8TiltBall12TiltBallTaskEv>:
 * Method:		TiltBallTask
 * Description:	This method executes the sensor read operation for the 
 *				TiltBall sensor.
 ****************************************************************************/
void TiltBall::TiltBallTask (void)
{	
    186c:	cf 92       	push	r12
    186e:	df 92       	push	r13
    1870:	ef 92       	push	r14
    1872:	ff 92       	push	r15
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	ec 01       	movw	r28, r24
	//DBG(this->p_serial, "\r\nTiltBall Task Running\r\n");
		
	hist = (hist << 1) | (isTilted() ? 1 : 0);
    187a:	cb 80       	ldd	r12, Y+3	; 0x03
    187c:	dc 80       	ldd	r13, Y+4	; 0x04
    187e:	ed 80       	ldd	r14, Y+5	; 0x05
    1880:	fe 80       	ldd	r15, Y+6	; 0x06
    1882:	cc 0c       	add	r12, r12
    1884:	dd 1c       	adc	r13, r13
    1886:	ee 1c       	adc	r14, r14
    1888:	ff 1c       	adc	r15, r15
    188a:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN8TiltBall8isTiltedEv>
    188e:	c8 2a       	or	r12, r24
    1890:	cb 82       	std	Y+3, r12	; 0x03
    1892:	dc 82       	std	Y+4, r13	; 0x04
    1894:	ed 82       	std	Y+5, r14	; 0x05
    1896:	fe 82       	std	Y+6, r15	; 0x06
		
	//DBG(this->p_serial, "\r\nWind history: %lu\r\n", hist);
	//DBG(this->p_serial, "\r\nisWindy? %d", isWindy());
	
	windy = isWindy();
    1898:	ce 01       	movw	r24, r28
    189a:	0e 94 11 0c 	call	0x1822	; 0x1822 <_ZN8TiltBall7isWindyEv>
    189e:	80 93 27 01 	sts	0x0127, r24
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	ff 90       	pop	r15
    18a8:	ef 90       	pop	r14
    18aa:	df 90       	pop	r13
    18ac:	cf 90       	pop	r12
    18ae:	08 95       	ret

000018b0 <_ZN7UVIndex4initEv>:
 *				Converter (ADC) to use a prescaler of 128 with no auto trigger
 *				and a gain of 1X
 ****************************************************************************/
void UVIndex::init (void)
{
	ADCSRA = 0x87;	//Turn On ADC and set prescaler (CLK/128)
    18b0:	87 e8       	ldi	r24, 0x87	; 135
    18b2:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0x00;	//Set gain & turn off auto trigger
    18b6:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x00;   //Set ADC channel ADC0 with 1X gain
    18ba:	10 92 7c 00 	sts	0x007C, r1
    18be:	08 95       	ret

000018c0 <_ZN7UVIndexC1EP6serialh>:
 * Parameters:	ptr_serial	- pointer to serial object for debugging
 *				pin			- the pin to be associated with the enable pin
 ****************************************************************************/
UVIndex::UVIndex (serial *ptr_serial, uint8_t pin)
{
	p_serial = ptr_serial;
    18c0:	fc 01       	movw	r30, r24
    18c2:	71 83       	std	Z+1, r23	; 0x01
    18c4:	60 83       	st	Z, r22
	enable_pin = pin;
    18c6:	42 83       	std	Z+2, r20	; 0x02
	
	init();	
    18c8:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7UVIndex4initEv>
    18cc:	08 95       	ret

000018ce <_ZN7UVIndex6enableEv>:
 *				sensor
 ****************************************************************************/
void UVIndex::enable (void)
{
	// set enable pin high
	UV_EN_PORT |= (1 << enable_pin);
    18ce:	6b b1       	in	r22, 0x0b	; 11
    18d0:	21 e0       	ldi	r18, 0x01	; 1
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	a9 01       	movw	r20, r18
    18d6:	fc 01       	movw	r30, r24
    18d8:	02 80       	ldd	r0, Z+2	; 0x02
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <_ZN7UVIndex6enableEv+0x12>
    18dc:	44 0f       	add	r20, r20
    18de:	55 1f       	adc	r21, r21
    18e0:	0a 94       	dec	r0
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <_ZN7UVIndex6enableEv+0xe>
    18e4:	46 2b       	or	r20, r22
    18e6:	4b b9       	out	0x0b, r20	; 11
	OUTPUT(UV_EN_DDR, enable_pin);
    18e8:	4a b1       	in	r20, 0x0a	; 10
    18ea:	02 80       	ldd	r0, Z+2	; 0x02
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <_ZN7UVIndex6enableEv+0x24>
    18ee:	22 0f       	add	r18, r18
    18f0:	33 1f       	adc	r19, r19
    18f2:	0a 94       	dec	r0
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <_ZN7UVIndex6enableEv+0x20>
    18f6:	24 2b       	or	r18, r20
    18f8:	2a b9       	out	0x0a, r18	; 10
    18fa:	08 95       	ret

000018fc <_ZN7UVIndex7disableEv>:
 * Method:		disable
 * Description:	This method sets the enable pin to low to disable the UVIndex
 *				sensor
 ****************************************************************************/
void UVIndex::disable (void)
{
    18fc:	fc 01       	movw	r30, r24
	// set enable pin low
	UV_EN_PORT &= ~(1 << enable_pin);
    18fe:	4b b1       	in	r20, 0x0b	; 11
    1900:	21 e0       	ldi	r18, 0x01	; 1
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	b9 01       	movw	r22, r18
    1906:	02 80       	ldd	r0, Z+2	; 0x02
    1908:	02 c0       	rjmp	.+4      	; 0x190e <_ZN7UVIndex7disableEv+0x12>
    190a:	66 0f       	add	r22, r22
    190c:	77 1f       	adc	r23, r23
    190e:	0a 94       	dec	r0
    1910:	e2 f7       	brpl	.-8      	; 0x190a <_ZN7UVIndex7disableEv+0xe>
    1912:	96 2f       	mov	r25, r22
    1914:	90 95       	com	r25
    1916:	94 23       	and	r25, r20
    1918:	9b b9       	out	0x0b, r25	; 11
	OUTPUT(UV_EN_DDR, enable_pin);
    191a:	8a b1       	in	r24, 0x0a	; 10
    191c:	02 80       	ldd	r0, Z+2	; 0x02
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <_ZN7UVIndex7disableEv+0x28>
    1920:	22 0f       	add	r18, r18
    1922:	33 1f       	adc	r19, r19
    1924:	0a 94       	dec	r0
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <_ZN7UVIndex7disableEv+0x24>
    1928:	28 2b       	or	r18, r24
    192a:	2a b9       	out	0x0a, r18	; 10
    192c:	08 95       	ret

0000192e <_ZN7UVIndex4readEv>:
 *
 * Return:		int16_t - the digital value of the analog read of the UV Index
 *					where a value of 302 is equivalent to 3.02
 ****************************************************************************/
int16_t UVIndex::read (void)
{
    192e:	0f 93       	push	r16
    1930:	1f 93       	push	r17
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	ec 01       	movw	r28, r24
	int16_t value;
	
	enable();
    1938:	0e 94 67 0c 	call	0x18ce	; 0x18ce <_ZN7UVIndex6enableEv>
    193c:	8f e9       	ldi	r24, 0x9F	; 159
    193e:	9f e0       	ldi	r25, 0x0F	; 15
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <_ZN7UVIndex4readEv+0x12>
    1944:	00 c0       	rjmp	.+0      	; 0x1946 <_ZN7UVIndex4readEv+0x18>
    1946:	00 00       	nop
	
	// stabilization period
	_delay_ms(1);
	
	// start conversion
	ADCSRA = 0xC7;
    1948:	87 ec       	ldi	r24, 0xC7	; 199
    194a:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    194e:	8f e0       	ldi	r24, 0x0F	; 15
    1950:	94 e0       	ldi	r25, 0x04	; 4
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	f1 f7       	brne	.-4      	; 0x1952 <_ZN7UVIndex4readEv+0x24>
    1956:	00 c0       	rjmp	.+0      	; 0x1958 <_ZN7UVIndex4readEv+0x2a>
    1958:	00 00       	nop
	
	// wait for conversion to finish
	_delay_us(260);
	
	value = ADC & 0x3FF;
    195a:	00 91 78 00 	lds	r16, 0x0078
    195e:	10 91 79 00 	lds	r17, 0x0079
	
	disable();
    1962:	ce 01       	movw	r24, r28
    1964:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <_ZN7UVIndex7disableEv>
	
	return value;
}
    1968:	c8 01       	movw	r24, r16
    196a:	93 70       	andi	r25, 0x03	; 3
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	1f 91       	pop	r17
    1972:	0f 91       	pop	r16
    1974:	08 95       	ret

00001976 <_ZN7UVIndex11UVIndexTaskEv>:
void UVIndex::UVIndexTask (void)
{
	static uint8_t runs  = 0;
	
	// update global value
	uv_ndx = read();
    1976:	0e 94 97 0c 	call	0x192e	; 0x192e <_ZN7UVIndex4readEv>
    197a:	90 93 26 01 	sts	0x0126, r25
    197e:	80 93 25 01 	sts	0x0125, r24
	{
		DBG(this->p_serial, "\r\nUVIndex Task Running\r\n")
		DBG(this->p_serial, "UV Index reading: %d\r\n", read());
	}
	*/
	runs++;
    1982:	80 91 40 01 	lds	r24, 0x0140
    1986:	8f 5f       	subi	r24, 0xFF	; 255
    1988:	80 93 40 01 	sts	0x0140, r24
    198c:	08 95       	ret

0000198e <__mulsi3>:
    198e:	db 01       	movw	r26, r22
    1990:	8f 93       	push	r24
    1992:	9f 93       	push	r25
    1994:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__muluhisi3>
    1998:	bf 91       	pop	r27
    199a:	af 91       	pop	r26
    199c:	a2 9f       	mul	r26, r18
    199e:	80 0d       	add	r24, r0
    19a0:	91 1d       	adc	r25, r1
    19a2:	a3 9f       	mul	r26, r19
    19a4:	90 0d       	add	r25, r0
    19a6:	b2 9f       	mul	r27, r18
    19a8:	90 0d       	add	r25, r0
    19aa:	11 24       	eor	r1, r1
    19ac:	08 95       	ret

000019ae <__udivmodsi4>:
    19ae:	a1 e2       	ldi	r26, 0x21	; 33
    19b0:	1a 2e       	mov	r1, r26
    19b2:	aa 1b       	sub	r26, r26
    19b4:	bb 1b       	sub	r27, r27
    19b6:	fd 01       	movw	r30, r26
    19b8:	0d c0       	rjmp	.+26     	; 0x19d4 <__udivmodsi4_ep>

000019ba <__udivmodsi4_loop>:
    19ba:	aa 1f       	adc	r26, r26
    19bc:	bb 1f       	adc	r27, r27
    19be:	ee 1f       	adc	r30, r30
    19c0:	ff 1f       	adc	r31, r31
    19c2:	a2 17       	cp	r26, r18
    19c4:	b3 07       	cpc	r27, r19
    19c6:	e4 07       	cpc	r30, r20
    19c8:	f5 07       	cpc	r31, r21
    19ca:	20 f0       	brcs	.+8      	; 0x19d4 <__udivmodsi4_ep>
    19cc:	a2 1b       	sub	r26, r18
    19ce:	b3 0b       	sbc	r27, r19
    19d0:	e4 0b       	sbc	r30, r20
    19d2:	f5 0b       	sbc	r31, r21

000019d4 <__udivmodsi4_ep>:
    19d4:	66 1f       	adc	r22, r22
    19d6:	77 1f       	adc	r23, r23
    19d8:	88 1f       	adc	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	1a 94       	dec	r1
    19de:	69 f7       	brne	.-38     	; 0x19ba <__udivmodsi4_loop>
    19e0:	60 95       	com	r22
    19e2:	70 95       	com	r23
    19e4:	80 95       	com	r24
    19e6:	90 95       	com	r25
    19e8:	9b 01       	movw	r18, r22
    19ea:	ac 01       	movw	r20, r24
    19ec:	bd 01       	movw	r22, r26
    19ee:	cf 01       	movw	r24, r30
    19f0:	08 95       	ret

000019f2 <__divmodsi4>:
    19f2:	05 2e       	mov	r0, r21
    19f4:	97 fb       	bst	r25, 7
    19f6:	1e f4       	brtc	.+6      	; 0x19fe <__divmodsi4+0xc>
    19f8:	00 94       	com	r0
    19fa:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__negsi2>
    19fe:	57 fd       	sbrc	r21, 7
    1a00:	07 d0       	rcall	.+14     	; 0x1a10 <__divmodsi4_neg2>
    1a02:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__udivmodsi4>
    1a06:	07 fc       	sbrc	r0, 7
    1a08:	03 d0       	rcall	.+6      	; 0x1a10 <__divmodsi4_neg2>
    1a0a:	4e f4       	brtc	.+18     	; 0x1a1e <__divmodsi4_exit>
    1a0c:	0c 94 10 0d 	jmp	0x1a20	; 0x1a20 <__negsi2>

00001a10 <__divmodsi4_neg2>:
    1a10:	50 95       	com	r21
    1a12:	40 95       	com	r20
    1a14:	30 95       	com	r19
    1a16:	21 95       	neg	r18
    1a18:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1a:	4f 4f       	sbci	r20, 0xFF	; 255
    1a1c:	5f 4f       	sbci	r21, 0xFF	; 255

00001a1e <__divmodsi4_exit>:
    1a1e:	08 95       	ret

00001a20 <__negsi2>:
    1a20:	90 95       	com	r25
    1a22:	80 95       	com	r24
    1a24:	70 95       	com	r23
    1a26:	61 95       	neg	r22
    1a28:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2e:	08 95       	ret

00001a30 <__umulhisi3>:
    1a30:	a2 9f       	mul	r26, r18
    1a32:	b0 01       	movw	r22, r0
    1a34:	b3 9f       	mul	r27, r19
    1a36:	c0 01       	movw	r24, r0
    1a38:	a3 9f       	mul	r26, r19
    1a3a:	70 0d       	add	r23, r0
    1a3c:	81 1d       	adc	r24, r1
    1a3e:	11 24       	eor	r1, r1
    1a40:	91 1d       	adc	r25, r1
    1a42:	b2 9f       	mul	r27, r18
    1a44:	70 0d       	add	r23, r0
    1a46:	81 1d       	adc	r24, r1
    1a48:	11 24       	eor	r1, r1
    1a4a:	91 1d       	adc	r25, r1
    1a4c:	08 95       	ret

00001a4e <__muluhisi3>:
    1a4e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__umulhisi3>
    1a52:	a5 9f       	mul	r26, r21
    1a54:	90 0d       	add	r25, r0
    1a56:	b4 9f       	mul	r27, r20
    1a58:	90 0d       	add	r25, r0
    1a5a:	a4 9f       	mul	r26, r20
    1a5c:	80 0d       	add	r24, r0
    1a5e:	91 1d       	adc	r25, r1
    1a60:	11 24       	eor	r1, r1
    1a62:	08 95       	ret

00001a64 <__mulshisi3>:
    1a64:	b7 ff       	sbrs	r27, 7
    1a66:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__muluhisi3>

00001a6a <__mulohisi3>:
    1a6a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__muluhisi3>
    1a6e:	82 1b       	sub	r24, r18
    1a70:	93 0b       	sbc	r25, r19
    1a72:	08 95       	ret

00001a74 <__muldi3>:
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	1f 93       	push	r17
    1a7a:	0f 93       	push	r16
    1a7c:	9a 9d       	mul	r25, r10
    1a7e:	f0 2d       	mov	r31, r0
    1a80:	21 9f       	mul	r18, r17
    1a82:	f0 0d       	add	r31, r0
    1a84:	8b 9d       	mul	r24, r11
    1a86:	f0 0d       	add	r31, r0
    1a88:	8a 9d       	mul	r24, r10
    1a8a:	e0 2d       	mov	r30, r0
    1a8c:	f1 0d       	add	r31, r1
    1a8e:	03 9f       	mul	r16, r19
    1a90:	f0 0d       	add	r31, r0
    1a92:	02 9f       	mul	r16, r18
    1a94:	e0 0d       	add	r30, r0
    1a96:	f1 1d       	adc	r31, r1
    1a98:	4e 9d       	mul	r20, r14
    1a9a:	e0 0d       	add	r30, r0
    1a9c:	f1 1d       	adc	r31, r1
    1a9e:	5e 9d       	mul	r21, r14
    1aa0:	f0 0d       	add	r31, r0
    1aa2:	4f 9d       	mul	r20, r15
    1aa4:	f0 0d       	add	r31, r0
    1aa6:	7f 93       	push	r23
    1aa8:	6f 93       	push	r22
    1aaa:	bf 92       	push	r11
    1aac:	af 92       	push	r10
    1aae:	5f 93       	push	r21
    1ab0:	4f 93       	push	r20
    1ab2:	d5 01       	movw	r26, r10
    1ab4:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__umulhisi3>
    1ab8:	8b 01       	movw	r16, r22
    1aba:	ac 01       	movw	r20, r24
    1abc:	d7 01       	movw	r26, r14
    1abe:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__umulhisi3>
    1ac2:	eb 01       	movw	r28, r22
    1ac4:	e8 0f       	add	r30, r24
    1ac6:	f9 1f       	adc	r31, r25
    1ac8:	d6 01       	movw	r26, r12
    1aca:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__muldi3_6>
    1ace:	2f 91       	pop	r18
    1ad0:	3f 91       	pop	r19
    1ad2:	d6 01       	movw	r26, r12
    1ad4:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__umulhisi3>
    1ad8:	c6 0f       	add	r28, r22
    1ada:	d7 1f       	adc	r29, r23
    1adc:	e8 1f       	adc	r30, r24
    1ade:	f9 1f       	adc	r31, r25
    1ae0:	af 91       	pop	r26
    1ae2:	bf 91       	pop	r27
    1ae4:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__muldi3_6>
    1ae8:	2f 91       	pop	r18
    1aea:	3f 91       	pop	r19
    1aec:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__umulhisi3>
    1af0:	c6 0f       	add	r28, r22
    1af2:	d7 1f       	adc	r29, r23
    1af4:	e8 1f       	adc	r30, r24
    1af6:	f9 1f       	adc	r31, r25
    1af8:	d6 01       	movw	r26, r12
    1afa:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__umulhisi3>
    1afe:	e6 0f       	add	r30, r22
    1b00:	f7 1f       	adc	r31, r23
    1b02:	98 01       	movw	r18, r16
    1b04:	be 01       	movw	r22, r28
    1b06:	cf 01       	movw	r24, r30
    1b08:	11 24       	eor	r1, r1
    1b0a:	0f 91       	pop	r16
    1b0c:	1f 91       	pop	r17
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <__muldi3_6>:
    1b14:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__umulhisi3>
    1b18:	46 0f       	add	r20, r22
    1b1a:	57 1f       	adc	r21, r23
    1b1c:	c8 1f       	adc	r28, r24
    1b1e:	d9 1f       	adc	r29, r25
    1b20:	08 f4       	brcc	.+2      	; 0x1b24 <__muldi3_6+0x10>
    1b22:	31 96       	adiw	r30, 0x01	; 1
    1b24:	08 95       	ret

00001b26 <__moddi3>:
    1b26:	68 94       	set
    1b28:	01 c0       	rjmp	.+2      	; 0x1b2c <__divdi3_moddi3>

00001b2a <__divdi3>:
    1b2a:	e8 94       	clt

00001b2c <__divdi3_moddi3>:
    1b2c:	f9 2f       	mov	r31, r25
    1b2e:	f1 2b       	or	r31, r17
    1b30:	12 f0       	brmi	.+4      	; 0x1b36 <__divdi3_moddi3+0xa>
    1b32:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <__udivdi3_umoddi3>
    1b36:	a0 e0       	ldi	r26, 0x00	; 0
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e1 ea       	ldi	r30, 0xA1	; 161
    1b3c:	fd e0       	ldi	r31, 0x0D	; 13
    1b3e:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__prologue_saves__+0xc>
    1b42:	09 2e       	mov	r0, r25
    1b44:	05 94       	asr	r0
    1b46:	22 f4       	brpl	.+8      	; 0x1b50 <__divdi3_moddi3+0x24>
    1b48:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__negdi2>
    1b4c:	11 23       	and	r17, r17
    1b4e:	92 f4       	brpl	.+36     	; 0x1b74 <__divdi3_moddi3+0x48>
    1b50:	f0 e8       	ldi	r31, 0x80	; 128
    1b52:	0f 26       	eor	r0, r31
    1b54:	ff ef       	ldi	r31, 0xFF	; 255
    1b56:	e0 94       	com	r14
    1b58:	f0 94       	com	r15
    1b5a:	00 95       	com	r16
    1b5c:	10 95       	com	r17
    1b5e:	b0 94       	com	r11
    1b60:	c0 94       	com	r12
    1b62:	d0 94       	com	r13
    1b64:	a1 94       	neg	r10
    1b66:	bf 0a       	sbc	r11, r31
    1b68:	cf 0a       	sbc	r12, r31
    1b6a:	df 0a       	sbc	r13, r31
    1b6c:	ef 0a       	sbc	r14, r31
    1b6e:	ff 0a       	sbc	r15, r31
    1b70:	0f 0b       	sbc	r16, r31
    1b72:	1f 0b       	sbc	r17, r31
    1b74:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__udivmod64>
    1b78:	07 fc       	sbrc	r0, 7
    1b7a:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__negdi2>
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	ec e0       	ldi	r30, 0x0C	; 12
    1b84:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__epilogue_restores__+0xc>

00001b88 <__umoddi3>:
    1b88:	68 94       	set
    1b8a:	01 c0       	rjmp	.+2      	; 0x1b8e <__udivdi3_umoddi3>

00001b8c <__udivdi3>:
    1b8c:	e8 94       	clt

00001b8e <__udivdi3_umoddi3>:
    1b8e:	8f 92       	push	r8
    1b90:	9f 92       	push	r9
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29
    1b96:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__udivmod64>
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	9f 90       	pop	r9
    1ba0:	8f 90       	pop	r8
    1ba2:	08 95       	ret

00001ba4 <__udivmod64>:
    1ba4:	88 24       	eor	r8, r8
    1ba6:	99 24       	eor	r9, r9
    1ba8:	f4 01       	movw	r30, r8
    1baa:	e4 01       	movw	r28, r8
    1bac:	b0 e4       	ldi	r27, 0x40	; 64
    1bae:	9f 93       	push	r25
    1bb0:	aa 27       	eor	r26, r26
    1bb2:	9a 15       	cp	r25, r10
    1bb4:	8b 04       	cpc	r8, r11
    1bb6:	9c 04       	cpc	r9, r12
    1bb8:	ed 05       	cpc	r30, r13
    1bba:	fe 05       	cpc	r31, r14
    1bbc:	cf 05       	cpc	r28, r15
    1bbe:	d0 07       	cpc	r29, r16
    1bc0:	a1 07       	cpc	r26, r17
    1bc2:	98 f4       	brcc	.+38     	; 0x1bea <__udivmod64+0x46>
    1bc4:	ad 2f       	mov	r26, r29
    1bc6:	dc 2f       	mov	r29, r28
    1bc8:	cf 2f       	mov	r28, r31
    1bca:	fe 2f       	mov	r31, r30
    1bcc:	e9 2d       	mov	r30, r9
    1bce:	98 2c       	mov	r9, r8
    1bd0:	89 2e       	mov	r8, r25
    1bd2:	98 2f       	mov	r25, r24
    1bd4:	87 2f       	mov	r24, r23
    1bd6:	76 2f       	mov	r23, r22
    1bd8:	65 2f       	mov	r22, r21
    1bda:	54 2f       	mov	r21, r20
    1bdc:	43 2f       	mov	r20, r19
    1bde:	32 2f       	mov	r19, r18
    1be0:	22 27       	eor	r18, r18
    1be2:	b8 50       	subi	r27, 0x08	; 8
    1be4:	31 f7       	brne	.-52     	; 0x1bb2 <__udivmod64+0xe>
    1be6:	bf 91       	pop	r27
    1be8:	27 c0       	rjmp	.+78     	; 0x1c38 <__udivmod64+0x94>
    1bea:	1b 2e       	mov	r1, r27
    1bec:	bf 91       	pop	r27
    1bee:	bb 27       	eor	r27, r27
    1bf0:	22 0f       	add	r18, r18
    1bf2:	33 1f       	adc	r19, r19
    1bf4:	44 1f       	adc	r20, r20
    1bf6:	55 1f       	adc	r21, r21
    1bf8:	66 1f       	adc	r22, r22
    1bfa:	77 1f       	adc	r23, r23
    1bfc:	88 1f       	adc	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	88 1c       	adc	r8, r8
    1c02:	99 1c       	adc	r9, r9
    1c04:	ee 1f       	adc	r30, r30
    1c06:	ff 1f       	adc	r31, r31
    1c08:	cc 1f       	adc	r28, r28
    1c0a:	dd 1f       	adc	r29, r29
    1c0c:	aa 1f       	adc	r26, r26
    1c0e:	bb 1f       	adc	r27, r27
    1c10:	8a 14       	cp	r8, r10
    1c12:	9b 04       	cpc	r9, r11
    1c14:	ec 05       	cpc	r30, r12
    1c16:	fd 05       	cpc	r31, r13
    1c18:	ce 05       	cpc	r28, r14
    1c1a:	df 05       	cpc	r29, r15
    1c1c:	a0 07       	cpc	r26, r16
    1c1e:	b1 07       	cpc	r27, r17
    1c20:	48 f0       	brcs	.+18     	; 0x1c34 <__udivmod64+0x90>
    1c22:	8a 18       	sub	r8, r10
    1c24:	9b 08       	sbc	r9, r11
    1c26:	ec 09       	sbc	r30, r12
    1c28:	fd 09       	sbc	r31, r13
    1c2a:	ce 09       	sbc	r28, r14
    1c2c:	df 09       	sbc	r29, r15
    1c2e:	a0 0b       	sbc	r26, r16
    1c30:	b1 0b       	sbc	r27, r17
    1c32:	21 60       	ori	r18, 0x01	; 1
    1c34:	1a 94       	dec	r1
    1c36:	e1 f6       	brne	.-72     	; 0x1bf0 <__udivmod64+0x4c>
    1c38:	2e f4       	brtc	.+10     	; 0x1c44 <__udivmod64+0xa0>
    1c3a:	94 01       	movw	r18, r8
    1c3c:	af 01       	movw	r20, r30
    1c3e:	be 01       	movw	r22, r28
    1c40:	cd 01       	movw	r24, r26
    1c42:	00 0c       	add	r0, r0
    1c44:	08 95       	ret

00001c46 <__negdi2>:
    1c46:	60 95       	com	r22
    1c48:	70 95       	com	r23
    1c4a:	80 95       	com	r24
    1c4c:	90 95       	com	r25
    1c4e:	30 95       	com	r19
    1c50:	40 95       	com	r20
    1c52:	50 95       	com	r21
    1c54:	21 95       	neg	r18
    1c56:	3f 4f       	sbci	r19, 0xFF	; 255
    1c58:	4f 4f       	sbci	r20, 0xFF	; 255
    1c5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c5c:	6f 4f       	sbci	r22, 0xFF	; 255
    1c5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c60:	8f 4f       	sbci	r24, 0xFF	; 255
    1c62:	9f 4f       	sbci	r25, 0xFF	; 255
    1c64:	08 95       	ret

00001c66 <__prologue_saves__>:
    1c66:	2f 92       	push	r2
    1c68:	3f 92       	push	r3
    1c6a:	4f 92       	push	r4
    1c6c:	5f 92       	push	r5
    1c6e:	6f 92       	push	r6
    1c70:	7f 92       	push	r7
    1c72:	8f 92       	push	r8
    1c74:	9f 92       	push	r9
    1c76:	af 92       	push	r10
    1c78:	bf 92       	push	r11
    1c7a:	cf 92       	push	r12
    1c7c:	df 92       	push	r13
    1c7e:	ef 92       	push	r14
    1c80:	ff 92       	push	r15
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	ca 1b       	sub	r28, r26
    1c90:	db 0b       	sbc	r29, r27
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	09 94       	ijmp

00001c9e <__epilogue_restores__>:
    1c9e:	2a 88       	ldd	r2, Y+18	; 0x12
    1ca0:	39 88       	ldd	r3, Y+17	; 0x11
    1ca2:	48 88       	ldd	r4, Y+16	; 0x10
    1ca4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ca6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ca8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1caa:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cac:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cae:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cb0:	b9 84       	ldd	r11, Y+9	; 0x09
    1cb2:	c8 84       	ldd	r12, Y+8	; 0x08
    1cb4:	df 80       	ldd	r13, Y+7	; 0x07
    1cb6:	ee 80       	ldd	r14, Y+6	; 0x06
    1cb8:	fd 80       	ldd	r15, Y+5	; 0x05
    1cba:	0c 81       	ldd	r16, Y+4	; 0x04
    1cbc:	1b 81       	ldd	r17, Y+3	; 0x03
    1cbe:	aa 81       	ldd	r26, Y+2	; 0x02
    1cc0:	b9 81       	ldd	r27, Y+1	; 0x01
    1cc2:	ce 0f       	add	r28, r30
    1cc4:	d1 1d       	adc	r29, r1
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	ed 01       	movw	r28, r26
    1cd2:	08 95       	ret

00001cd4 <__ashldi3>:
    1cd4:	0f 93       	push	r16
    1cd6:	08 30       	cpi	r16, 0x08	; 8
    1cd8:	90 f0       	brcs	.+36     	; 0x1cfe <__ashldi3+0x2a>
    1cda:	98 2f       	mov	r25, r24
    1cdc:	87 2f       	mov	r24, r23
    1cde:	76 2f       	mov	r23, r22
    1ce0:	65 2f       	mov	r22, r21
    1ce2:	54 2f       	mov	r21, r20
    1ce4:	43 2f       	mov	r20, r19
    1ce6:	32 2f       	mov	r19, r18
    1ce8:	22 27       	eor	r18, r18
    1cea:	08 50       	subi	r16, 0x08	; 8
    1cec:	f4 cf       	rjmp	.-24     	; 0x1cd6 <__ashldi3+0x2>
    1cee:	22 0f       	add	r18, r18
    1cf0:	33 1f       	adc	r19, r19
    1cf2:	44 1f       	adc	r20, r20
    1cf4:	55 1f       	adc	r21, r21
    1cf6:	66 1f       	adc	r22, r22
    1cf8:	77 1f       	adc	r23, r23
    1cfa:	88 1f       	adc	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	0a 95       	dec	r16
    1d00:	b2 f7       	brpl	.-20     	; 0x1cee <__ashldi3+0x1a>
    1d02:	0f 91       	pop	r16
    1d04:	08 95       	ret

00001d06 <__ashrdi3>:
    1d06:	97 fb       	bst	r25, 7
    1d08:	10 f8       	bld	r1, 0

00001d0a <__lshrdi3>:
    1d0a:	16 94       	lsr	r1
    1d0c:	00 08       	sbc	r0, r0
    1d0e:	0f 93       	push	r16
    1d10:	08 30       	cpi	r16, 0x08	; 8
    1d12:	98 f0       	brcs	.+38     	; 0x1d3a <__lshrdi3+0x30>
    1d14:	08 50       	subi	r16, 0x08	; 8
    1d16:	23 2f       	mov	r18, r19
    1d18:	34 2f       	mov	r19, r20
    1d1a:	45 2f       	mov	r20, r21
    1d1c:	56 2f       	mov	r21, r22
    1d1e:	67 2f       	mov	r22, r23
    1d20:	78 2f       	mov	r23, r24
    1d22:	89 2f       	mov	r24, r25
    1d24:	90 2d       	mov	r25, r0
    1d26:	f4 cf       	rjmp	.-24     	; 0x1d10 <__lshrdi3+0x6>
    1d28:	05 94       	asr	r0
    1d2a:	97 95       	ror	r25
    1d2c:	87 95       	ror	r24
    1d2e:	77 95       	ror	r23
    1d30:	67 95       	ror	r22
    1d32:	57 95       	ror	r21
    1d34:	47 95       	ror	r20
    1d36:	37 95       	ror	r19
    1d38:	27 95       	ror	r18
    1d3a:	0a 95       	dec	r16
    1d3c:	aa f7       	brpl	.-22     	; 0x1d28 <__lshrdi3+0x1e>
    1d3e:	0f 91       	pop	r16
    1d40:	08 95       	ret

00001d42 <__adddi3>:
    1d42:	2a 0d       	add	r18, r10
    1d44:	3b 1d       	adc	r19, r11
    1d46:	4c 1d       	adc	r20, r12
    1d48:	5d 1d       	adc	r21, r13
    1d4a:	6e 1d       	adc	r22, r14
    1d4c:	7f 1d       	adc	r23, r15
    1d4e:	80 1f       	adc	r24, r16
    1d50:	91 1f       	adc	r25, r17
    1d52:	08 95       	ret

00001d54 <__subdi3>:
    1d54:	2a 19       	sub	r18, r10
    1d56:	3b 09       	sbc	r19, r11
    1d58:	4c 09       	sbc	r20, r12
    1d5a:	5d 09       	sbc	r21, r13
    1d5c:	6e 09       	sbc	r22, r14
    1d5e:	7f 09       	sbc	r23, r15
    1d60:	80 0b       	sbc	r24, r16
    1d62:	91 0b       	sbc	r25, r17
    1d64:	08 95       	ret

00001d66 <__cmpdi2_s8>:
    1d66:	00 24       	eor	r0, r0
    1d68:	a7 fd       	sbrc	r26, 7
    1d6a:	00 94       	com	r0
    1d6c:	2a 17       	cp	r18, r26
    1d6e:	30 05       	cpc	r19, r0
    1d70:	40 05       	cpc	r20, r0
    1d72:	50 05       	cpc	r21, r0
    1d74:	60 05       	cpc	r22, r0
    1d76:	70 05       	cpc	r23, r0
    1d78:	80 05       	cpc	r24, r0
    1d7a:	90 05       	cpc	r25, r0
    1d7c:	08 95       	ret

00001d7e <sprintf>:
    1d7e:	ae e0       	ldi	r26, 0x0E	; 14
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e5 ec       	ldi	r30, 0xC5	; 197
    1d84:	fe e0       	ldi	r31, 0x0E	; 14
    1d86:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <__prologue_saves__+0x1c>
    1d8a:	0d 89       	ldd	r16, Y+21	; 0x15
    1d8c:	1e 89       	ldd	r17, Y+22	; 0x16
    1d8e:	86 e0       	ldi	r24, 0x06	; 6
    1d90:	8c 83       	std	Y+4, r24	; 0x04
    1d92:	1a 83       	std	Y+2, r17	; 0x02
    1d94:	09 83       	std	Y+1, r16	; 0x01
    1d96:	8f ef       	ldi	r24, 0xFF	; 255
    1d98:	9f e7       	ldi	r25, 0x7F	; 127
    1d9a:	9e 83       	std	Y+6, r25	; 0x06
    1d9c:	8d 83       	std	Y+5, r24	; 0x05
    1d9e:	ae 01       	movw	r20, r28
    1da0:	47 5e       	subi	r20, 0xE7	; 231
    1da2:	5f 4f       	sbci	r21, 0xFF	; 255
    1da4:	6f 89       	ldd	r22, Y+23	; 0x17
    1da6:	78 8d       	ldd	r23, Y+24	; 0x18
    1da8:	ce 01       	movw	r24, r28
    1daa:	01 96       	adiw	r24, 0x01	; 1
    1dac:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <vfprintf>
    1db0:	2f 81       	ldd	r18, Y+7	; 0x07
    1db2:	38 85       	ldd	r19, Y+8	; 0x08
    1db4:	f8 01       	movw	r30, r16
    1db6:	e2 0f       	add	r30, r18
    1db8:	f3 1f       	adc	r31, r19
    1dba:	10 82       	st	Z, r1
    1dbc:	2e 96       	adiw	r28, 0x0e	; 14
    1dbe:	e4 e0       	ldi	r30, 0x04	; 4
    1dc0:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <__epilogue_restores__+0x1c>

00001dc4 <vfprintf>:
    1dc4:	ac e0       	ldi	r26, 0x0C	; 12
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e8 ee       	ldi	r30, 0xE8	; 232
    1dca:	fe e0       	ldi	r31, 0x0E	; 14
    1dcc:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__prologue_saves__>
    1dd0:	7c 01       	movw	r14, r24
    1dd2:	6b 01       	movw	r12, r22
    1dd4:	8a 01       	movw	r16, r20
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	17 82       	std	Z+7, r1	; 0x07
    1dda:	16 82       	std	Z+6, r1	; 0x06
    1ddc:	83 81       	ldd	r24, Z+3	; 0x03
    1dde:	81 ff       	sbrs	r24, 1
    1de0:	bd c1       	rjmp	.+890    	; 0x215c <vfprintf+0x398>
    1de2:	ce 01       	movw	r24, r28
    1de4:	01 96       	adiw	r24, 0x01	; 1
    1de6:	4c 01       	movw	r8, r24
    1de8:	f7 01       	movw	r30, r14
    1dea:	93 81       	ldd	r25, Z+3	; 0x03
    1dec:	f6 01       	movw	r30, r12
    1dee:	93 fd       	sbrc	r25, 3
    1df0:	85 91       	lpm	r24, Z+
    1df2:	93 ff       	sbrs	r25, 3
    1df4:	81 91       	ld	r24, Z+
    1df6:	6f 01       	movw	r12, r30
    1df8:	88 23       	and	r24, r24
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <vfprintf+0x3a>
    1dfc:	ab c1       	rjmp	.+854    	; 0x2154 <vfprintf+0x390>
    1dfe:	85 32       	cpi	r24, 0x25	; 37
    1e00:	39 f4       	brne	.+14     	; 0x1e10 <vfprintf+0x4c>
    1e02:	93 fd       	sbrc	r25, 3
    1e04:	85 91       	lpm	r24, Z+
    1e06:	93 ff       	sbrs	r25, 3
    1e08:	81 91       	ld	r24, Z+
    1e0a:	6f 01       	movw	r12, r30
    1e0c:	85 32       	cpi	r24, 0x25	; 37
    1e0e:	29 f4       	brne	.+10     	; 0x1e1a <vfprintf+0x56>
    1e10:	b7 01       	movw	r22, r14
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    1e18:	e7 cf       	rjmp	.-50     	; 0x1de8 <vfprintf+0x24>
    1e1a:	51 2c       	mov	r5, r1
    1e1c:	31 2c       	mov	r3, r1
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	20 32       	cpi	r18, 0x20	; 32
    1e22:	a0 f4       	brcc	.+40     	; 0x1e4c <vfprintf+0x88>
    1e24:	8b 32       	cpi	r24, 0x2B	; 43
    1e26:	69 f0       	breq	.+26     	; 0x1e42 <vfprintf+0x7e>
    1e28:	30 f4       	brcc	.+12     	; 0x1e36 <vfprintf+0x72>
    1e2a:	80 32       	cpi	r24, 0x20	; 32
    1e2c:	59 f0       	breq	.+22     	; 0x1e44 <vfprintf+0x80>
    1e2e:	83 32       	cpi	r24, 0x23	; 35
    1e30:	69 f4       	brne	.+26     	; 0x1e4c <vfprintf+0x88>
    1e32:	20 61       	ori	r18, 0x10	; 16
    1e34:	2c c0       	rjmp	.+88     	; 0x1e8e <vfprintf+0xca>
    1e36:	8d 32       	cpi	r24, 0x2D	; 45
    1e38:	39 f0       	breq	.+14     	; 0x1e48 <vfprintf+0x84>
    1e3a:	80 33       	cpi	r24, 0x30	; 48
    1e3c:	39 f4       	brne	.+14     	; 0x1e4c <vfprintf+0x88>
    1e3e:	21 60       	ori	r18, 0x01	; 1
    1e40:	26 c0       	rjmp	.+76     	; 0x1e8e <vfprintf+0xca>
    1e42:	22 60       	ori	r18, 0x02	; 2
    1e44:	24 60       	ori	r18, 0x04	; 4
    1e46:	23 c0       	rjmp	.+70     	; 0x1e8e <vfprintf+0xca>
    1e48:	28 60       	ori	r18, 0x08	; 8
    1e4a:	21 c0       	rjmp	.+66     	; 0x1e8e <vfprintf+0xca>
    1e4c:	27 fd       	sbrc	r18, 7
    1e4e:	27 c0       	rjmp	.+78     	; 0x1e9e <vfprintf+0xda>
    1e50:	30 ed       	ldi	r19, 0xD0	; 208
    1e52:	38 0f       	add	r19, r24
    1e54:	3a 30       	cpi	r19, 0x0A	; 10
    1e56:	78 f4       	brcc	.+30     	; 0x1e76 <vfprintf+0xb2>
    1e58:	26 ff       	sbrs	r18, 6
    1e5a:	06 c0       	rjmp	.+12     	; 0x1e68 <vfprintf+0xa4>
    1e5c:	fa e0       	ldi	r31, 0x0A	; 10
    1e5e:	5f 9e       	mul	r5, r31
    1e60:	30 0d       	add	r19, r0
    1e62:	11 24       	eor	r1, r1
    1e64:	53 2e       	mov	r5, r19
    1e66:	13 c0       	rjmp	.+38     	; 0x1e8e <vfprintf+0xca>
    1e68:	8a e0       	ldi	r24, 0x0A	; 10
    1e6a:	38 9e       	mul	r3, r24
    1e6c:	30 0d       	add	r19, r0
    1e6e:	11 24       	eor	r1, r1
    1e70:	33 2e       	mov	r3, r19
    1e72:	20 62       	ori	r18, 0x20	; 32
    1e74:	0c c0       	rjmp	.+24     	; 0x1e8e <vfprintf+0xca>
    1e76:	8e 32       	cpi	r24, 0x2E	; 46
    1e78:	21 f4       	brne	.+8      	; 0x1e82 <vfprintf+0xbe>
    1e7a:	26 fd       	sbrc	r18, 6
    1e7c:	6b c1       	rjmp	.+726    	; 0x2154 <vfprintf+0x390>
    1e7e:	20 64       	ori	r18, 0x40	; 64
    1e80:	06 c0       	rjmp	.+12     	; 0x1e8e <vfprintf+0xca>
    1e82:	8c 36       	cpi	r24, 0x6C	; 108
    1e84:	11 f4       	brne	.+4      	; 0x1e8a <vfprintf+0xc6>
    1e86:	20 68       	ori	r18, 0x80	; 128
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <vfprintf+0xca>
    1e8a:	88 36       	cpi	r24, 0x68	; 104
    1e8c:	41 f4       	brne	.+16     	; 0x1e9e <vfprintf+0xda>
    1e8e:	f6 01       	movw	r30, r12
    1e90:	93 fd       	sbrc	r25, 3
    1e92:	85 91       	lpm	r24, Z+
    1e94:	93 ff       	sbrs	r25, 3
    1e96:	81 91       	ld	r24, Z+
    1e98:	6f 01       	movw	r12, r30
    1e9a:	81 11       	cpse	r24, r1
    1e9c:	c1 cf       	rjmp	.-126    	; 0x1e20 <vfprintf+0x5c>
    1e9e:	98 2f       	mov	r25, r24
    1ea0:	9f 7d       	andi	r25, 0xDF	; 223
    1ea2:	95 54       	subi	r25, 0x45	; 69
    1ea4:	93 30       	cpi	r25, 0x03	; 3
    1ea6:	28 f4       	brcc	.+10     	; 0x1eb2 <vfprintf+0xee>
    1ea8:	0c 5f       	subi	r16, 0xFC	; 252
    1eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    1eac:	ff e3       	ldi	r31, 0x3F	; 63
    1eae:	f9 83       	std	Y+1, r31	; 0x01
    1eb0:	0d c0       	rjmp	.+26     	; 0x1ecc <vfprintf+0x108>
    1eb2:	83 36       	cpi	r24, 0x63	; 99
    1eb4:	31 f0       	breq	.+12     	; 0x1ec2 <vfprintf+0xfe>
    1eb6:	83 37       	cpi	r24, 0x73	; 115
    1eb8:	71 f0       	breq	.+28     	; 0x1ed6 <vfprintf+0x112>
    1eba:	83 35       	cpi	r24, 0x53	; 83
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <vfprintf+0xfc>
    1ebe:	5b c0       	rjmp	.+182    	; 0x1f76 <vfprintf+0x1b2>
    1ec0:	22 c0       	rjmp	.+68     	; 0x1f06 <vfprintf+0x142>
    1ec2:	f8 01       	movw	r30, r16
    1ec4:	80 81       	ld	r24, Z
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	0e 5f       	subi	r16, 0xFE	; 254
    1eca:	1f 4f       	sbci	r17, 0xFF	; 255
    1ecc:	44 24       	eor	r4, r4
    1ece:	43 94       	inc	r4
    1ed0:	51 2c       	mov	r5, r1
    1ed2:	54 01       	movw	r10, r8
    1ed4:	15 c0       	rjmp	.+42     	; 0x1f00 <vfprintf+0x13c>
    1ed6:	38 01       	movw	r6, r16
    1ed8:	f2 e0       	ldi	r31, 0x02	; 2
    1eda:	6f 0e       	add	r6, r31
    1edc:	71 1c       	adc	r7, r1
    1ede:	f8 01       	movw	r30, r16
    1ee0:	a0 80       	ld	r10, Z
    1ee2:	b1 80       	ldd	r11, Z+1	; 0x01
    1ee4:	26 ff       	sbrs	r18, 6
    1ee6:	03 c0       	rjmp	.+6      	; 0x1eee <vfprintf+0x12a>
    1ee8:	65 2d       	mov	r22, r5
    1eea:	70 e0       	ldi	r23, 0x00	; 0
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <vfprintf+0x12e>
    1eee:	6f ef       	ldi	r22, 0xFF	; 255
    1ef0:	7f ef       	ldi	r23, 0xFF	; 255
    1ef2:	c5 01       	movw	r24, r10
    1ef4:	2c 87       	std	Y+12, r18	; 0x0c
    1ef6:	0e 94 bf 10 	call	0x217e	; 0x217e <strnlen>
    1efa:	2c 01       	movw	r4, r24
    1efc:	83 01       	movw	r16, r6
    1efe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f00:	2f 77       	andi	r18, 0x7F	; 127
    1f02:	22 2e       	mov	r2, r18
    1f04:	17 c0       	rjmp	.+46     	; 0x1f34 <vfprintf+0x170>
    1f06:	38 01       	movw	r6, r16
    1f08:	f2 e0       	ldi	r31, 0x02	; 2
    1f0a:	6f 0e       	add	r6, r31
    1f0c:	71 1c       	adc	r7, r1
    1f0e:	f8 01       	movw	r30, r16
    1f10:	a0 80       	ld	r10, Z
    1f12:	b1 80       	ldd	r11, Z+1	; 0x01
    1f14:	26 ff       	sbrs	r18, 6
    1f16:	03 c0       	rjmp	.+6      	; 0x1f1e <vfprintf+0x15a>
    1f18:	65 2d       	mov	r22, r5
    1f1a:	70 e0       	ldi	r23, 0x00	; 0
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <vfprintf+0x15e>
    1f1e:	6f ef       	ldi	r22, 0xFF	; 255
    1f20:	7f ef       	ldi	r23, 0xFF	; 255
    1f22:	c5 01       	movw	r24, r10
    1f24:	2c 87       	std	Y+12, r18	; 0x0c
    1f26:	0e 94 b4 10 	call	0x2168	; 0x2168 <strnlen_P>
    1f2a:	2c 01       	movw	r4, r24
    1f2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f2e:	20 68       	ori	r18, 0x80	; 128
    1f30:	22 2e       	mov	r2, r18
    1f32:	83 01       	movw	r16, r6
    1f34:	23 fc       	sbrc	r2, 3
    1f36:	1b c0       	rjmp	.+54     	; 0x1f6e <vfprintf+0x1aa>
    1f38:	83 2d       	mov	r24, r3
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	48 16       	cp	r4, r24
    1f3e:	59 06       	cpc	r5, r25
    1f40:	b0 f4       	brcc	.+44     	; 0x1f6e <vfprintf+0x1aa>
    1f42:	b7 01       	movw	r22, r14
    1f44:	80 e2       	ldi	r24, 0x20	; 32
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    1f4c:	3a 94       	dec	r3
    1f4e:	f4 cf       	rjmp	.-24     	; 0x1f38 <vfprintf+0x174>
    1f50:	f5 01       	movw	r30, r10
    1f52:	27 fc       	sbrc	r2, 7
    1f54:	85 91       	lpm	r24, Z+
    1f56:	27 fe       	sbrs	r2, 7
    1f58:	81 91       	ld	r24, Z+
    1f5a:	5f 01       	movw	r10, r30
    1f5c:	b7 01       	movw	r22, r14
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    1f64:	31 10       	cpse	r3, r1
    1f66:	3a 94       	dec	r3
    1f68:	f1 e0       	ldi	r31, 0x01	; 1
    1f6a:	4f 1a       	sub	r4, r31
    1f6c:	51 08       	sbc	r5, r1
    1f6e:	41 14       	cp	r4, r1
    1f70:	51 04       	cpc	r5, r1
    1f72:	71 f7       	brne	.-36     	; 0x1f50 <vfprintf+0x18c>
    1f74:	e5 c0       	rjmp	.+458    	; 0x2140 <vfprintf+0x37c>
    1f76:	84 36       	cpi	r24, 0x64	; 100
    1f78:	11 f0       	breq	.+4      	; 0x1f7e <vfprintf+0x1ba>
    1f7a:	89 36       	cpi	r24, 0x69	; 105
    1f7c:	39 f5       	brne	.+78     	; 0x1fcc <vfprintf+0x208>
    1f7e:	f8 01       	movw	r30, r16
    1f80:	27 ff       	sbrs	r18, 7
    1f82:	07 c0       	rjmp	.+14     	; 0x1f92 <vfprintf+0x1ce>
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	0c 5f       	subi	r16, 0xFC	; 252
    1f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f90:	08 c0       	rjmp	.+16     	; 0x1fa2 <vfprintf+0x1de>
    1f92:	60 81       	ld	r22, Z
    1f94:	71 81       	ldd	r23, Z+1	; 0x01
    1f96:	07 2e       	mov	r0, r23
    1f98:	00 0c       	add	r0, r0
    1f9a:	88 0b       	sbc	r24, r24
    1f9c:	99 0b       	sbc	r25, r25
    1f9e:	0e 5f       	subi	r16, 0xFE	; 254
    1fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa2:	2f 76       	andi	r18, 0x6F	; 111
    1fa4:	72 2e       	mov	r7, r18
    1fa6:	97 ff       	sbrs	r25, 7
    1fa8:	09 c0       	rjmp	.+18     	; 0x1fbc <vfprintf+0x1f8>
    1faa:	90 95       	com	r25
    1fac:	80 95       	com	r24
    1fae:	70 95       	com	r23
    1fb0:	61 95       	neg	r22
    1fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb8:	20 68       	ori	r18, 0x80	; 128
    1fba:	72 2e       	mov	r7, r18
    1fbc:	2a e0       	ldi	r18, 0x0A	; 10
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	a4 01       	movw	r20, r8
    1fc2:	0e 94 02 11 	call	0x2204	; 0x2204 <__ultoa_invert>
    1fc6:	a8 2e       	mov	r10, r24
    1fc8:	a8 18       	sub	r10, r8
    1fca:	44 c0       	rjmp	.+136    	; 0x2054 <vfprintf+0x290>
    1fcc:	85 37       	cpi	r24, 0x75	; 117
    1fce:	29 f4       	brne	.+10     	; 0x1fda <vfprintf+0x216>
    1fd0:	2f 7e       	andi	r18, 0xEF	; 239
    1fd2:	b2 2e       	mov	r11, r18
    1fd4:	2a e0       	ldi	r18, 0x0A	; 10
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	25 c0       	rjmp	.+74     	; 0x2024 <vfprintf+0x260>
    1fda:	f2 2f       	mov	r31, r18
    1fdc:	f9 7f       	andi	r31, 0xF9	; 249
    1fde:	bf 2e       	mov	r11, r31
    1fe0:	8f 36       	cpi	r24, 0x6F	; 111
    1fe2:	c1 f0       	breq	.+48     	; 0x2014 <vfprintf+0x250>
    1fe4:	18 f4       	brcc	.+6      	; 0x1fec <vfprintf+0x228>
    1fe6:	88 35       	cpi	r24, 0x58	; 88
    1fe8:	79 f0       	breq	.+30     	; 0x2008 <vfprintf+0x244>
    1fea:	b4 c0       	rjmp	.+360    	; 0x2154 <vfprintf+0x390>
    1fec:	80 37       	cpi	r24, 0x70	; 112
    1fee:	19 f0       	breq	.+6      	; 0x1ff6 <vfprintf+0x232>
    1ff0:	88 37       	cpi	r24, 0x78	; 120
    1ff2:	21 f0       	breq	.+8      	; 0x1ffc <vfprintf+0x238>
    1ff4:	af c0       	rjmp	.+350    	; 0x2154 <vfprintf+0x390>
    1ff6:	2f 2f       	mov	r18, r31
    1ff8:	20 61       	ori	r18, 0x10	; 16
    1ffa:	b2 2e       	mov	r11, r18
    1ffc:	b4 fe       	sbrs	r11, 4
    1ffe:	0d c0       	rjmp	.+26     	; 0x201a <vfprintf+0x256>
    2000:	8b 2d       	mov	r24, r11
    2002:	84 60       	ori	r24, 0x04	; 4
    2004:	b8 2e       	mov	r11, r24
    2006:	09 c0       	rjmp	.+18     	; 0x201a <vfprintf+0x256>
    2008:	24 ff       	sbrs	r18, 4
    200a:	0a c0       	rjmp	.+20     	; 0x2020 <vfprintf+0x25c>
    200c:	9f 2f       	mov	r25, r31
    200e:	96 60       	ori	r25, 0x06	; 6
    2010:	b9 2e       	mov	r11, r25
    2012:	06 c0       	rjmp	.+12     	; 0x2020 <vfprintf+0x25c>
    2014:	28 e0       	ldi	r18, 0x08	; 8
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	05 c0       	rjmp	.+10     	; 0x2024 <vfprintf+0x260>
    201a:	20 e1       	ldi	r18, 0x10	; 16
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <vfprintf+0x260>
    2020:	20 e1       	ldi	r18, 0x10	; 16
    2022:	32 e0       	ldi	r19, 0x02	; 2
    2024:	f8 01       	movw	r30, r16
    2026:	b7 fe       	sbrs	r11, 7
    2028:	07 c0       	rjmp	.+14     	; 0x2038 <vfprintf+0x274>
    202a:	60 81       	ld	r22, Z
    202c:	71 81       	ldd	r23, Z+1	; 0x01
    202e:	82 81       	ldd	r24, Z+2	; 0x02
    2030:	93 81       	ldd	r25, Z+3	; 0x03
    2032:	0c 5f       	subi	r16, 0xFC	; 252
    2034:	1f 4f       	sbci	r17, 0xFF	; 255
    2036:	06 c0       	rjmp	.+12     	; 0x2044 <vfprintf+0x280>
    2038:	60 81       	ld	r22, Z
    203a:	71 81       	ldd	r23, Z+1	; 0x01
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	0e 5f       	subi	r16, 0xFE	; 254
    2042:	1f 4f       	sbci	r17, 0xFF	; 255
    2044:	a4 01       	movw	r20, r8
    2046:	0e 94 02 11 	call	0x2204	; 0x2204 <__ultoa_invert>
    204a:	a8 2e       	mov	r10, r24
    204c:	a8 18       	sub	r10, r8
    204e:	fb 2d       	mov	r31, r11
    2050:	ff 77       	andi	r31, 0x7F	; 127
    2052:	7f 2e       	mov	r7, r31
    2054:	76 fe       	sbrs	r7, 6
    2056:	0b c0       	rjmp	.+22     	; 0x206e <vfprintf+0x2aa>
    2058:	37 2d       	mov	r19, r7
    205a:	3e 7f       	andi	r19, 0xFE	; 254
    205c:	a5 14       	cp	r10, r5
    205e:	50 f4       	brcc	.+20     	; 0x2074 <vfprintf+0x2b0>
    2060:	74 fe       	sbrs	r7, 4
    2062:	0a c0       	rjmp	.+20     	; 0x2078 <vfprintf+0x2b4>
    2064:	72 fc       	sbrc	r7, 2
    2066:	08 c0       	rjmp	.+16     	; 0x2078 <vfprintf+0x2b4>
    2068:	37 2d       	mov	r19, r7
    206a:	3e 7e       	andi	r19, 0xEE	; 238
    206c:	05 c0       	rjmp	.+10     	; 0x2078 <vfprintf+0x2b4>
    206e:	ba 2c       	mov	r11, r10
    2070:	37 2d       	mov	r19, r7
    2072:	03 c0       	rjmp	.+6      	; 0x207a <vfprintf+0x2b6>
    2074:	ba 2c       	mov	r11, r10
    2076:	01 c0       	rjmp	.+2      	; 0x207a <vfprintf+0x2b6>
    2078:	b5 2c       	mov	r11, r5
    207a:	34 ff       	sbrs	r19, 4
    207c:	0d c0       	rjmp	.+26     	; 0x2098 <vfprintf+0x2d4>
    207e:	fe 01       	movw	r30, r28
    2080:	ea 0d       	add	r30, r10
    2082:	f1 1d       	adc	r31, r1
    2084:	80 81       	ld	r24, Z
    2086:	80 33       	cpi	r24, 0x30	; 48
    2088:	11 f4       	brne	.+4      	; 0x208e <vfprintf+0x2ca>
    208a:	39 7e       	andi	r19, 0xE9	; 233
    208c:	09 c0       	rjmp	.+18     	; 0x20a0 <vfprintf+0x2dc>
    208e:	32 ff       	sbrs	r19, 2
    2090:	06 c0       	rjmp	.+12     	; 0x209e <vfprintf+0x2da>
    2092:	b3 94       	inc	r11
    2094:	b3 94       	inc	r11
    2096:	04 c0       	rjmp	.+8      	; 0x20a0 <vfprintf+0x2dc>
    2098:	83 2f       	mov	r24, r19
    209a:	86 78       	andi	r24, 0x86	; 134
    209c:	09 f0       	breq	.+2      	; 0x20a0 <vfprintf+0x2dc>
    209e:	b3 94       	inc	r11
    20a0:	33 fd       	sbrc	r19, 3
    20a2:	13 c0       	rjmp	.+38     	; 0x20ca <vfprintf+0x306>
    20a4:	30 ff       	sbrs	r19, 0
    20a6:	06 c0       	rjmp	.+12     	; 0x20b4 <vfprintf+0x2f0>
    20a8:	5a 2c       	mov	r5, r10
    20aa:	b3 14       	cp	r11, r3
    20ac:	18 f4       	brcc	.+6      	; 0x20b4 <vfprintf+0x2f0>
    20ae:	53 0c       	add	r5, r3
    20b0:	5b 18       	sub	r5, r11
    20b2:	b3 2c       	mov	r11, r3
    20b4:	b3 14       	cp	r11, r3
    20b6:	68 f4       	brcc	.+26     	; 0x20d2 <vfprintf+0x30e>
    20b8:	b7 01       	movw	r22, r14
    20ba:	80 e2       	ldi	r24, 0x20	; 32
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	3c 87       	std	Y+12, r19	; 0x0c
    20c0:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    20c4:	b3 94       	inc	r11
    20c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    20c8:	f5 cf       	rjmp	.-22     	; 0x20b4 <vfprintf+0x2f0>
    20ca:	b3 14       	cp	r11, r3
    20cc:	10 f4       	brcc	.+4      	; 0x20d2 <vfprintf+0x30e>
    20ce:	3b 18       	sub	r3, r11
    20d0:	01 c0       	rjmp	.+2      	; 0x20d4 <vfprintf+0x310>
    20d2:	31 2c       	mov	r3, r1
    20d4:	34 ff       	sbrs	r19, 4
    20d6:	12 c0       	rjmp	.+36     	; 0x20fc <vfprintf+0x338>
    20d8:	b7 01       	movw	r22, r14
    20da:	80 e3       	ldi	r24, 0x30	; 48
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	3c 87       	std	Y+12, r19	; 0x0c
    20e0:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    20e4:	3c 85       	ldd	r19, Y+12	; 0x0c
    20e6:	32 ff       	sbrs	r19, 2
    20e8:	17 c0       	rjmp	.+46     	; 0x2118 <vfprintf+0x354>
    20ea:	31 fd       	sbrc	r19, 1
    20ec:	03 c0       	rjmp	.+6      	; 0x20f4 <vfprintf+0x330>
    20ee:	88 e7       	ldi	r24, 0x78	; 120
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <vfprintf+0x334>
    20f4:	88 e5       	ldi	r24, 0x58	; 88
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	b7 01       	movw	r22, r14
    20fa:	0c c0       	rjmp	.+24     	; 0x2114 <vfprintf+0x350>
    20fc:	83 2f       	mov	r24, r19
    20fe:	86 78       	andi	r24, 0x86	; 134
    2100:	59 f0       	breq	.+22     	; 0x2118 <vfprintf+0x354>
    2102:	31 ff       	sbrs	r19, 1
    2104:	02 c0       	rjmp	.+4      	; 0x210a <vfprintf+0x346>
    2106:	8b e2       	ldi	r24, 0x2B	; 43
    2108:	01 c0       	rjmp	.+2      	; 0x210c <vfprintf+0x348>
    210a:	80 e2       	ldi	r24, 0x20	; 32
    210c:	37 fd       	sbrc	r19, 7
    210e:	8d e2       	ldi	r24, 0x2D	; 45
    2110:	b7 01       	movw	r22, r14
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    2118:	a5 14       	cp	r10, r5
    211a:	38 f4       	brcc	.+14     	; 0x212a <vfprintf+0x366>
    211c:	b7 01       	movw	r22, r14
    211e:	80 e3       	ldi	r24, 0x30	; 48
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    2126:	5a 94       	dec	r5
    2128:	f7 cf       	rjmp	.-18     	; 0x2118 <vfprintf+0x354>
    212a:	aa 94       	dec	r10
    212c:	f4 01       	movw	r30, r8
    212e:	ea 0d       	add	r30, r10
    2130:	f1 1d       	adc	r31, r1
    2132:	80 81       	ld	r24, Z
    2134:	b7 01       	movw	r22, r14
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    213c:	a1 10       	cpse	r10, r1
    213e:	f5 cf       	rjmp	.-22     	; 0x212a <vfprintf+0x366>
    2140:	33 20       	and	r3, r3
    2142:	09 f4       	brne	.+2      	; 0x2146 <vfprintf+0x382>
    2144:	51 ce       	rjmp	.-862    	; 0x1de8 <vfprintf+0x24>
    2146:	b7 01       	movw	r22, r14
    2148:	80 e2       	ldi	r24, 0x20	; 32
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0e 94 ca 10 	call	0x2194	; 0x2194 <fputc>
    2150:	3a 94       	dec	r3
    2152:	f6 cf       	rjmp	.-20     	; 0x2140 <vfprintf+0x37c>
    2154:	f7 01       	movw	r30, r14
    2156:	86 81       	ldd	r24, Z+6	; 0x06
    2158:	97 81       	ldd	r25, Z+7	; 0x07
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <vfprintf+0x39c>
    215c:	8f ef       	ldi	r24, 0xFF	; 255
    215e:	9f ef       	ldi	r25, 0xFF	; 255
    2160:	2c 96       	adiw	r28, 0x0c	; 12
    2162:	e2 e1       	ldi	r30, 0x12	; 18
    2164:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__epilogue_restores__>

00002168 <strnlen_P>:
    2168:	fc 01       	movw	r30, r24
    216a:	05 90       	lpm	r0, Z+
    216c:	61 50       	subi	r22, 0x01	; 1
    216e:	70 40       	sbci	r23, 0x00	; 0
    2170:	01 10       	cpse	r0, r1
    2172:	d8 f7       	brcc	.-10     	; 0x216a <strnlen_P+0x2>
    2174:	80 95       	com	r24
    2176:	90 95       	com	r25
    2178:	8e 0f       	add	r24, r30
    217a:	9f 1f       	adc	r25, r31
    217c:	08 95       	ret

0000217e <strnlen>:
    217e:	fc 01       	movw	r30, r24
    2180:	61 50       	subi	r22, 0x01	; 1
    2182:	70 40       	sbci	r23, 0x00	; 0
    2184:	01 90       	ld	r0, Z+
    2186:	01 10       	cpse	r0, r1
    2188:	d8 f7       	brcc	.-10     	; 0x2180 <strnlen+0x2>
    218a:	80 95       	com	r24
    218c:	90 95       	com	r25
    218e:	8e 0f       	add	r24, r30
    2190:	9f 1f       	adc	r25, r31
    2192:	08 95       	ret

00002194 <fputc>:
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	fb 01       	movw	r30, r22
    219e:	23 81       	ldd	r18, Z+3	; 0x03
    21a0:	21 fd       	sbrc	r18, 1
    21a2:	03 c0       	rjmp	.+6      	; 0x21aa <fputc+0x16>
    21a4:	8f ef       	ldi	r24, 0xFF	; 255
    21a6:	9f ef       	ldi	r25, 0xFF	; 255
    21a8:	28 c0       	rjmp	.+80     	; 0x21fa <fputc+0x66>
    21aa:	22 ff       	sbrs	r18, 2
    21ac:	16 c0       	rjmp	.+44     	; 0x21da <fputc+0x46>
    21ae:	46 81       	ldd	r20, Z+6	; 0x06
    21b0:	57 81       	ldd	r21, Z+7	; 0x07
    21b2:	24 81       	ldd	r18, Z+4	; 0x04
    21b4:	35 81       	ldd	r19, Z+5	; 0x05
    21b6:	42 17       	cp	r20, r18
    21b8:	53 07       	cpc	r21, r19
    21ba:	44 f4       	brge	.+16     	; 0x21cc <fputc+0x38>
    21bc:	a0 81       	ld	r26, Z
    21be:	b1 81       	ldd	r27, Z+1	; 0x01
    21c0:	9d 01       	movw	r18, r26
    21c2:	2f 5f       	subi	r18, 0xFF	; 255
    21c4:	3f 4f       	sbci	r19, 0xFF	; 255
    21c6:	31 83       	std	Z+1, r19	; 0x01
    21c8:	20 83       	st	Z, r18
    21ca:	8c 93       	st	X, r24
    21cc:	26 81       	ldd	r18, Z+6	; 0x06
    21ce:	37 81       	ldd	r19, Z+7	; 0x07
    21d0:	2f 5f       	subi	r18, 0xFF	; 255
    21d2:	3f 4f       	sbci	r19, 0xFF	; 255
    21d4:	37 83       	std	Z+7, r19	; 0x07
    21d6:	26 83       	std	Z+6, r18	; 0x06
    21d8:	10 c0       	rjmp	.+32     	; 0x21fa <fputc+0x66>
    21da:	eb 01       	movw	r28, r22
    21dc:	09 2f       	mov	r16, r25
    21de:	18 2f       	mov	r17, r24
    21e0:	00 84       	ldd	r0, Z+8	; 0x08
    21e2:	f1 85       	ldd	r31, Z+9	; 0x09
    21e4:	e0 2d       	mov	r30, r0
    21e6:	09 95       	icall
    21e8:	89 2b       	or	r24, r25
    21ea:	e1 f6       	brne	.-72     	; 0x21a4 <fputc+0x10>
    21ec:	8e 81       	ldd	r24, Y+6	; 0x06
    21ee:	9f 81       	ldd	r25, Y+7	; 0x07
    21f0:	01 96       	adiw	r24, 0x01	; 1
    21f2:	9f 83       	std	Y+7, r25	; 0x07
    21f4:	8e 83       	std	Y+6, r24	; 0x06
    21f6:	81 2f       	mov	r24, r17
    21f8:	90 2f       	mov	r25, r16
    21fa:	df 91       	pop	r29
    21fc:	cf 91       	pop	r28
    21fe:	1f 91       	pop	r17
    2200:	0f 91       	pop	r16
    2202:	08 95       	ret

00002204 <__ultoa_invert>:
    2204:	fa 01       	movw	r30, r20
    2206:	aa 27       	eor	r26, r26
    2208:	28 30       	cpi	r18, 0x08	; 8
    220a:	51 f1       	breq	.+84     	; 0x2260 <__ultoa_invert+0x5c>
    220c:	20 31       	cpi	r18, 0x10	; 16
    220e:	81 f1       	breq	.+96     	; 0x2270 <__ultoa_invert+0x6c>
    2210:	e8 94       	clt
    2212:	6f 93       	push	r22
    2214:	6e 7f       	andi	r22, 0xFE	; 254
    2216:	6e 5f       	subi	r22, 0xFE	; 254
    2218:	7f 4f       	sbci	r23, 0xFF	; 255
    221a:	8f 4f       	sbci	r24, 0xFF	; 255
    221c:	9f 4f       	sbci	r25, 0xFF	; 255
    221e:	af 4f       	sbci	r26, 0xFF	; 255
    2220:	b1 e0       	ldi	r27, 0x01	; 1
    2222:	3e d0       	rcall	.+124    	; 0x22a0 <__ultoa_invert+0x9c>
    2224:	b4 e0       	ldi	r27, 0x04	; 4
    2226:	3c d0       	rcall	.+120    	; 0x22a0 <__ultoa_invert+0x9c>
    2228:	67 0f       	add	r22, r23
    222a:	78 1f       	adc	r23, r24
    222c:	89 1f       	adc	r24, r25
    222e:	9a 1f       	adc	r25, r26
    2230:	a1 1d       	adc	r26, r1
    2232:	68 0f       	add	r22, r24
    2234:	79 1f       	adc	r23, r25
    2236:	8a 1f       	adc	r24, r26
    2238:	91 1d       	adc	r25, r1
    223a:	a1 1d       	adc	r26, r1
    223c:	6a 0f       	add	r22, r26
    223e:	71 1d       	adc	r23, r1
    2240:	81 1d       	adc	r24, r1
    2242:	91 1d       	adc	r25, r1
    2244:	a1 1d       	adc	r26, r1
    2246:	20 d0       	rcall	.+64     	; 0x2288 <__ultoa_invert+0x84>
    2248:	09 f4       	brne	.+2      	; 0x224c <__ultoa_invert+0x48>
    224a:	68 94       	set
    224c:	3f 91       	pop	r19
    224e:	2a e0       	ldi	r18, 0x0A	; 10
    2250:	26 9f       	mul	r18, r22
    2252:	11 24       	eor	r1, r1
    2254:	30 19       	sub	r19, r0
    2256:	30 5d       	subi	r19, 0xD0	; 208
    2258:	31 93       	st	Z+, r19
    225a:	de f6       	brtc	.-74     	; 0x2212 <__ultoa_invert+0xe>
    225c:	cf 01       	movw	r24, r30
    225e:	08 95       	ret
    2260:	46 2f       	mov	r20, r22
    2262:	47 70       	andi	r20, 0x07	; 7
    2264:	40 5d       	subi	r20, 0xD0	; 208
    2266:	41 93       	st	Z+, r20
    2268:	b3 e0       	ldi	r27, 0x03	; 3
    226a:	0f d0       	rcall	.+30     	; 0x228a <__ultoa_invert+0x86>
    226c:	c9 f7       	brne	.-14     	; 0x2260 <__ultoa_invert+0x5c>
    226e:	f6 cf       	rjmp	.-20     	; 0x225c <__ultoa_invert+0x58>
    2270:	46 2f       	mov	r20, r22
    2272:	4f 70       	andi	r20, 0x0F	; 15
    2274:	40 5d       	subi	r20, 0xD0	; 208
    2276:	4a 33       	cpi	r20, 0x3A	; 58
    2278:	18 f0       	brcs	.+6      	; 0x2280 <__ultoa_invert+0x7c>
    227a:	49 5d       	subi	r20, 0xD9	; 217
    227c:	31 fd       	sbrc	r19, 1
    227e:	40 52       	subi	r20, 0x20	; 32
    2280:	41 93       	st	Z+, r20
    2282:	02 d0       	rcall	.+4      	; 0x2288 <__ultoa_invert+0x84>
    2284:	a9 f7       	brne	.-22     	; 0x2270 <__ultoa_invert+0x6c>
    2286:	ea cf       	rjmp	.-44     	; 0x225c <__ultoa_invert+0x58>
    2288:	b4 e0       	ldi	r27, 0x04	; 4
    228a:	a6 95       	lsr	r26
    228c:	97 95       	ror	r25
    228e:	87 95       	ror	r24
    2290:	77 95       	ror	r23
    2292:	67 95       	ror	r22
    2294:	ba 95       	dec	r27
    2296:	c9 f7       	brne	.-14     	; 0x228a <__ultoa_invert+0x86>
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	61 05       	cpc	r22, r1
    229c:	71 05       	cpc	r23, r1
    229e:	08 95       	ret
    22a0:	9b 01       	movw	r18, r22
    22a2:	ac 01       	movw	r20, r24
    22a4:	0a 2e       	mov	r0, r26
    22a6:	06 94       	lsr	r0
    22a8:	57 95       	ror	r21
    22aa:	47 95       	ror	r20
    22ac:	37 95       	ror	r19
    22ae:	27 95       	ror	r18
    22b0:	ba 95       	dec	r27
    22b2:	c9 f7       	brne	.-14     	; 0x22a6 <__ultoa_invert+0xa2>
    22b4:	62 0f       	add	r22, r18
    22b6:	73 1f       	adc	r23, r19
    22b8:	84 1f       	adc	r24, r20
    22ba:	95 1f       	adc	r25, r21
    22bc:	a0 1d       	adc	r26, r0
    22be:	08 95       	ret

000022c0 <_exit>:
    22c0:	f8 94       	cli

000022c2 <__stop_program>:
    22c2:	ff cf       	rjmp	.-2      	; 0x22c2 <__stop_program>
