/*****************************************************************************
 * File:		LCD.h
 * Description:	This file contains the class definition for the LCD class.
 * Created:		5/11/2016
 * Authors:		Jill Thetford, Daniel Griffith
 * 				Modified from Adafruit Library at
 *				https://github.com/adafruit/ST7565-LCD
 ****************************************************************************/
#ifndef _LCD_H_
#define _LCD_H_

#ifndef F_CPU
#define F_CPU 16000000UL
#endif

#include <avr/io.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <avr/pgmspace.h> 
#include <util/delay.h>

/****************************************************************************/
// Constants
/****************************************************************************/

//LCD Commands Constants
#define CMD_DISPLAY_OFF			0xAE
#define CMD_DISPLAY_ON			0xAF

#define CMD_SET_DISP_START_LINE 0x40
#define CMD_SET_PAGE			0xB0

#define CMD_SET_COLUMN_UPPER	0x10
#define CMD_SET_COLUMN_LOWER	0x00

#define CMD_SET_ADC_NORMAL		0xA0
#define CMD_SET_ADC_REVERSE		0xA1

#define CMD_SET_DISP_NORMAL		0xA6
#define CMD_SET_DISP_REVERSE	0xA7

#define CMD_SET_ALLPTS_NORMAL	0xA4
#define CMD_SET_ALLPTS_ON		0xA5
#define CMD_SET_BIAS_9			0xA2 
#define CMD_SET_BIAS_7			0xA3

#define CMD_RMW					0xE0
#define CMD_RMW_CLEAR			0xEE
#define CMD_INTERNAL_RESET		0xE2
#define CMD_SET_COM_NORMAL		0xC0
#define CMD_SET_COM_REVERSE		0xC8
#define CMD_SET_POWER_CONTROL	0x28
#define CMD_SET_RESISTOR_RATIO  0x20
#define CMD_SET_VOLUME_FIRST	0x81
#define CMD_SET_VOLUME_SECOND	0
#define CMD_SET_STATIC_OFF		0xAC
#define CMD_SET_STATIC_ON		0xAD
#define CMD_SET_STATIC_REG		0x0
#define CMD_SET_BOOSTER_FIRST	0xF8
#define CMD_SET_BOOSTER_234		0
#define CMD_SET_BOOSTER_5		1
#define CMD_SET_BOOSTER_6		3
#define CMD_NOP					0xE3
#define CMD_TEST				0xF0

#define BUF_SIZE 				1024

#define LCDWIDTH 				128
#define LCDHEIGHT 				64

// SPI Constants
#define MOSI					3  // PB pin 3
#define SCK						5  // PB pin 5
#define SS						2  // PB pin 2  

// LCD Controls Constants
#define A0						2
#define RST						3

/****************************************************************************/
// Macros
/****************************************************************************/
#define swap(a, b) { uint8_t t = a; a = b; b = t; }

class LCD{
	private:
		const uint8_t PROGMEM font[] = 
		{
			0x00, 0x00, 0x00, 0x00, 0x00,  // Ascii 0
			0x7C, 0xDA, 0xF2, 0xDA, 0x7C,  //ASC(01)
			0x7C, 0xD6, 0xF2, 0xD6, 0x7C,  //ASC(02)
			0x38, 0x7C, 0x3E, 0x7C, 0x38,
			0x18, 0x3C, 0x7E, 0x3C, 0x18,
			0x38, 0xEA, 0xBE, 0xEA, 0x38,
			0x38, 0x7A, 0xFE, 0x7A, 0x38,
			0x00, 0x18, 0x3C, 0x18, 0x00,
			0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
			0x00, 0x18, 0x24, 0x18, 0x00,
			0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
			0x0C, 0x12, 0x5C, 0x60, 0x70,
			0x64, 0x94, 0x9E, 0x94, 0x64,
			0x02, 0xFE, 0xA0, 0xA0, 0xE0,
			0x02, 0xFE, 0xA0, 0xA4, 0xFC,
			0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
			0xFE, 0x7C, 0x38, 0x38, 0x10,
			0x10, 0x38, 0x38, 0x7C, 0xFE,
			0x28, 0x44, 0xFE, 0x44, 0x28,
			0xFA, 0xFA, 0x00, 0xFA, 0xFA,
			0x60, 0x90, 0xFE, 0x80, 0xFE,
			0x00, 0x66, 0x91, 0xA9, 0x56,
			0x06, 0x06, 0x06, 0x06, 0x06,
			0x29, 0x45, 0xFF, 0x45, 0x29,
			0x10, 0x20, 0x7E, 0x20, 0x10,
			0x08, 0x04, 0x7E, 0x04, 0x08,
			0x10, 0x10, 0x54, 0x38, 0x10,
			0x10, 0x38, 0x54, 0x10, 0x10,
			0x78, 0x08, 0x08, 0x08, 0x08,
			0x30, 0x78, 0x30, 0x78, 0x30,
			0x0C, 0x1C, 0x7C, 0x1C, 0x0C,
			0x60, 0x70, 0x7C, 0x70, 0x60,
			0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xFA, 0x00, 0x00,
			0x00, 0xE0, 0x00, 0xE0, 0x00,
			0x28, 0xFE, 0x28, 0xFE, 0x28,
			0x24, 0x54, 0xFE, 0x54, 0x48,
			0xC4, 0xC8, 0x10, 0x26, 0x46,
			0x6C, 0x92, 0x6A, 0x04, 0x0A,
			0x00, 0x10, 0xE0, 0xC0, 0x00,
			0x00, 0x38, 0x44, 0x82, 0x00,
			0x00, 0x82, 0x44, 0x38, 0x00,
			0x54, 0x38, 0xFE, 0x38, 0x54,
			0x10, 0x10, 0x7C, 0x10, 0x10,
			0x00, 0x01, 0x0E, 0x0C, 0x00,
			0x10, 0x10, 0x10, 0x10, 0x10,
			0x00, 0x00, 0x06, 0x06, 0x00,
			0x04, 0x08, 0x10, 0x20, 0x40,
			0x7C, 0x8A, 0x92, 0xA2, 0x7C,
			0x00, 0x42, 0xFE, 0x02, 0x00,
			0x4E, 0x92, 0x92, 0x92, 0x62,
			0x84, 0x82, 0x92, 0xB2, 0xCC,
			0x18, 0x28, 0x48, 0xFE, 0x08,
			0xE4, 0xA2, 0xA2, 0xA2, 0x9C,
			0x3C, 0x52, 0x92, 0x92, 0x8C,
			0x82, 0x84, 0x88, 0x90, 0xE0,
			0x6C, 0x92, 0x92, 0x92, 0x6C,
			0x62, 0x92, 0x92, 0x94, 0x78,
			0x00, 0x00, 0x28, 0x00, 0x00,
			0x00, 0x02, 0x2C, 0x00, 0x00,
			0x00, 0x10, 0x28, 0x44, 0x82,
			0x28, 0x28, 0x28, 0x28, 0x28,
			0x00, 0x82, 0x44, 0x28, 0x10,
			0x40, 0x80, 0x9A, 0x90, 0x60,
			0x7C, 0x82, 0xBA, 0x9A, 0x72,
			0x3E, 0x48, 0x88, 0x48, 0x3E,
			0xFE, 0x92, 0x92, 0x92, 0x6C,
			0x7C, 0x82, 0x82, 0x82, 0x44,
			0xFE, 0x82, 0x82, 0x82, 0x7C,
			0xFE, 0x92, 0x92, 0x92, 0x82,
			0xFE, 0x90, 0x90, 0x90, 0x80,
			0x7C, 0x82, 0x82, 0x8A, 0xCE,
			0xFE, 0x10, 0x10, 0x10, 0xFE,
			0x00, 0x82, 0xFE, 0x82, 0x00,
			0x04, 0x02, 0x82, 0xFC, 0x80,
			0xFE, 0x10, 0x28, 0x44, 0x82,
			0xFE, 0x02, 0x02, 0x02, 0x02,
			0xFE, 0x40, 0x38, 0x40, 0xFE,
			0xFE, 0x20, 0x10, 0x08, 0xFE,
			0x7C, 0x82, 0x82, 0x82, 0x7C,
			0xFE, 0x90, 0x90, 0x90, 0x60,
			0x7C, 0x82, 0x8A, 0x84, 0x7A,
			0xFE, 0x90, 0x98, 0x94, 0x62,
			0x64, 0x92, 0x92, 0x92, 0x4C,
			0xC0, 0x80, 0xFE, 0x80, 0xC0,
			0xFC, 0x02, 0x02, 0x02, 0xFC,
			0xF8, 0x04, 0x02, 0x04, 0xF8,
			0xFC, 0x02, 0x1C, 0x02, 0xFC,
			0xC6, 0x28, 0x10, 0x28, 0xC6,
			0xC0, 0x20, 0x1E, 0x20, 0xC0,
			0x86, 0x9A, 0x92, 0xB2, 0xC2,
			0x00, 0xFE, 0x82, 0x82, 0x82,
			0x40, 0x20, 0x10, 0x08, 0x04,
			0x00, 0x82, 0x82, 0x82, 0xFE,
			0x20, 0x40, 0x80, 0x40, 0x20,
			0x02, 0x02, 0x02, 0x02, 0x02,
			0x00, 0xC0, 0xE0, 0x10, 0x00,
			0x04, 0x2A, 0x2A, 0x1E, 0x02,
			0xFE, 0x14, 0x22, 0x22, 0x1C,
			0x1C, 0x22, 0x22, 0x22, 0x14,
			0x1C, 0x22, 0x22, 0x14, 0xFE,
			0x1C, 0x2A, 0x2A, 0x2A, 0x18,
			0x00, 0x10, 0x7E, 0x90, 0x40,
			0x18, 0x25, 0x25, 0x39, 0x1E,
			0xFE, 0x10, 0x20, 0x20, 0x1E,
			0x00, 0x22, 0xBE, 0x02, 0x00,
			0x04, 0x02, 0x02, 0xBC, 0x00,
			0xFE, 0x08, 0x14, 0x22, 0x00,
			0x00, 0x82, 0xFE, 0x02, 0x00,
			0x3E, 0x20, 0x1E, 0x20, 0x1E,
			0x3E, 0x10, 0x20, 0x20, 0x1E,
			0x1C, 0x22, 0x22, 0x22, 0x1C,
			0x3F, 0x18, 0x24, 0x24, 0x18,
			0x18, 0x24, 0x24, 0x18, 0x3F,
			0x3E, 0x10, 0x20, 0x20, 0x10,
			0x12, 0x2A, 0x2A, 0x2A, 0x24,
			0x20, 0x20, 0xFC, 0x22, 0x24,
			0x3C, 0x02, 0x02, 0x04, 0x3E,
			0x38, 0x04, 0x02, 0x04, 0x38,
			0x3C, 0x02, 0x0C, 0x02, 0x3C,
			0x22, 0x14, 0x08, 0x14, 0x22,
			0x32, 0x09, 0x09, 0x09, 0x3E,
			0x22, 0x26, 0x2A, 0x32, 0x22,
			0x00, 0x10, 0x6C, 0x82, 0x00,
			0x00, 0x00, 0xEE, 0x00, 0x00,
			0x00, 0x82, 0x6C, 0x10, 0x00,
			0x40, 0x80, 0x40, 0x20, 0x40,
			0x3C, 0x64, 0xC4, 0x64, 0x3C,
			0x78, 0x85, 0x85, 0x86, 0x48,
			0x5C, 0x02, 0x02, 0x04, 0x5E,
			0x1C, 0x2A, 0x2A, 0xAA, 0x9A,
			0x84, 0xAA, 0xAA, 0x9E, 0x82,
			0x84, 0x2A, 0x2A, 0x1E, 0x82,
			0x84, 0xAA, 0x2A, 0x1E, 0x02,
			0x04, 0x2A, 0xAA, 0x9E, 0x02,
			0x30, 0x78, 0x4A, 0x4E, 0x48,
			0x9C, 0xAA, 0xAA, 0xAA, 0x9A,
			0x9C, 0x2A, 0x2A, 0x2A, 0x9A,
			0x9C, 0xAA, 0x2A, 0x2A, 0x1A,
			0x00, 0x00, 0xA2, 0x3E, 0x82,
			0x00, 0x40, 0xA2, 0xBE, 0x42,
			0x00, 0x80, 0xA2, 0x3E, 0x02,
			0x0F, 0x94, 0x24, 0x94, 0x0F,
			0x0F, 0x14, 0xA4, 0x14, 0x0F,
			0x3E, 0x2A, 0xAA, 0xA2, 0x00,
			0x04, 0x2A, 0x2A, 0x3E, 0x2A,
			0x3E, 0x50, 0x90, 0xFE, 0x92,
			0x4C, 0x92, 0x92, 0x92, 0x4C,
			0x4C, 0x12, 0x12, 0x12, 0x4C,
			0x4C, 0x52, 0x12, 0x12, 0x0C,
			0x5C, 0x82, 0x82, 0x84, 0x5E,
			0x5C, 0x42, 0x02, 0x04, 0x1E,
			0x00, 0xB9, 0x05, 0x05, 0xBE,
			0x9C, 0x22, 0x22, 0x22, 0x9C,
			0xBC, 0x02, 0x02, 0x02, 0xBC,
			0x3C, 0x24, 0xFF, 0x24, 0x24,
			0x12, 0x7E, 0x92, 0xC2, 0x66,
			0xD4, 0xF4, 0x3F, 0xF4, 0xD4,
			0xFF, 0x90, 0x94, 0x6F, 0x04,
			0x03, 0x11, 0x7E, 0x90, 0xC0,
			0x04, 0x2A, 0x2A, 0x9E, 0x82,
			0x00, 0x00, 0x22, 0xBE, 0x82,
			0x0C, 0x12, 0x12, 0x52, 0x4C,
			0x1C, 0x02, 0x02, 0x44, 0x5E,
			0x00, 0x5E, 0x50, 0x50, 0x4E,
			0xBE, 0xB0, 0x98, 0x8C, 0xBE,
			0x64, 0x94, 0x94, 0xF4, 0x14,
			0x64, 0x94, 0x94, 0x94, 0x64,
			0x0C, 0x12, 0xB2, 0x02, 0x04,
			0x1C, 0x10, 0x10, 0x10, 0x10,
			0x10, 0x10, 0x10, 0x10, 0x1C,
			0xF4, 0x08, 0x13, 0x35, 0x5D,
			0xF4, 0x08, 0x14, 0x2C, 0x5F,
			0x00, 0x00, 0xDE, 0x00, 0x00,
			0x10, 0x28, 0x54, 0x28, 0x44,
			0x44, 0x28, 0x54, 0x28, 0x10,
			0x55, 0x00, 0xAA, 0x00, 0x55,
			0x55, 0xAA, 0x55, 0xAA, 0x55,
			0xAA, 0x55, 0xAA, 0x55, 0xAA,
			0x00, 0x00, 0x00, 0xFF, 0x00,
			0x08, 0x08, 0x08, 0xFF, 0x00,
			0x28, 0x28, 0x28, 0xFF, 0x00,
			0x08, 0x08, 0xFF, 0x00, 0xFF,
			0x08, 0x08, 0x0F, 0x08, 0x0F,
			0x28, 0x28, 0x28, 0x3F, 0x00,
			0x28, 0x28, 0xEF, 0x00, 0xFF,
			0x00, 0x00, 0xFF, 0x00, 0xFF,
			0x28, 0x28, 0x2F, 0x20, 0x3F,
			0x28, 0x28, 0xE8, 0x08, 0xF8,
			0x08, 0x08, 0xF8, 0x08, 0xF8,
			0x28, 0x28, 0x28, 0xF8, 0x00,
			0x08, 0x08, 0x08, 0x0F, 0x00,
			0x00, 0x00, 0x00, 0xF8, 0x08,
			0x08, 0x08, 0x08, 0xF8, 0x08,
			0x08, 0x08, 0x08, 0x0F, 0x08,
			0x00, 0x00, 0x00, 0xFF, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0xFF, 0x08,
			0x00, 0x00, 0x00, 0xFF, 0x28,
			0x00, 0x00, 0xFF, 0x00, 0xFF,
			0x00, 0x00, 0xF8, 0x08, 0xE8,
			0x00, 0x00, 0x3F, 0x20, 0x2F,
			0x28, 0x28, 0xE8, 0x08, 0xE8,
			0x28, 0x28, 0x2F, 0x20, 0x2F,
			0x00, 0x00, 0xFF, 0x00, 0xEF,
			0x28, 0x28, 0x28, 0x28, 0x28,
			0x28, 0x28, 0xEF, 0x00, 0xEF,
			0x28, 0x28, 0x28, 0xE8, 0x28,
			0x08, 0x08, 0xF8, 0x08, 0xF8,
			0x28, 0x28, 0x28, 0x2F, 0x28,
			0x08, 0x08, 0x0F, 0x08, 0x0F,
			0x00, 0x00, 0xF8, 0x08, 0xF8,
			0x00, 0x00, 0x00, 0xF8, 0x28,
			0x00, 0x00, 0x00, 0x3F, 0x28,
			0x00, 0x00, 0x0F, 0x08, 0x0F,
			0x08, 0x08, 0xFF, 0x08, 0xFF,
			0x28, 0x28, 0x28, 0xFF, 0x28,
			0x08, 0x08, 0x08, 0xF8, 0x00,
			0x00, 0x00, 0x00, 0x0F, 0x08,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
			0xFF, 0xFF, 0xFF, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xFF, 0xFF,
			0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
			0x1C, 0x22, 0x22, 0x1C, 0x22,
			0x3E, 0x54, 0x54, 0x7C, 0x28,
			0x7E, 0x40, 0x40, 0x60, 0x60,
			0x40, 0x7E, 0x40, 0x7E, 0x40,
			0xC6, 0xAA, 0x92, 0x82, 0xC6,
			0x1C, 0x22, 0x22, 0x3C, 0x20,
			0x02, 0x7E, 0x04, 0x78, 0x04,
			0x60, 0x40, 0x7E, 0x40, 0x40,
			0x99, 0xA5, 0xE7, 0xA5, 0x99,
			0x38, 0x54, 0x92, 0x54, 0x38,
			0x32, 0x4E, 0x80, 0x4E, 0x32,
			0x0C, 0x52, 0xB2, 0xB2, 0x0C,
			0x0C, 0x12, 0x1E, 0x12, 0x0C,
			0x3D, 0x46, 0x5A, 0x62, 0xBC,
			0x7C, 0x92, 0x92, 0x92, 0x00,
			0x7E, 0x80, 0x80, 0x80, 0x7E,
			0x54, 0x54, 0x54, 0x54, 0x54,
			0x22, 0x22, 0xFA, 0x22, 0x22,
			0x02, 0x8A, 0x52, 0x22, 0x02,
			0x02, 0x22, 0x52, 0x8A, 0x02,
			0x00, 0x00, 0xFF, 0x80, 0xC0,
			0x07, 0x01, 0xFF, 0x00, 0x00,
			0x10, 0x10, 0xD6, 0xD6, 0x10,
			0x6C, 0x48, 0x6C, 0x24, 0x6C,
			0x60, 0xF0, 0x90, 0xF0, 0x60,
			0x00, 0x00, 0x18, 0x18, 0x00,
			0x00, 0x00, 0x08, 0x08, 0x00,
			0x0C, 0x02, 0xFF, 0x80, 0x80,
			0x00, 0xF8, 0x80, 0x80, 0x78,
			0x00, 0x98, 0xB8, 0xE8, 0x48,
			0x00, 0x3C, 0x3C, 0x3C, 0x3C
		};

		uint8_t buff[BUF_SIZE] = {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};

		// this method draws a single pixel on the LCD
		void setpixel(/*uint8_t *buff,*/ uint8_t col, uint8_t row, uint8_t fill);

		// this method draws an empty rectangle on the LCD
		void drawrect(/*uint8_t *buff,*/ uint8_t col, uint8_t row, uint8_t width,
			uint8_t height, uint8_t fill);

		// this method draws a line of pixels on the LCD
		void drawline(/*uint8_t *buff,*/ uint8_t col0, uint8_t row0, uint8_t col1, 
			uint8_t row1, uint8_t fill);

		// this method draws a character on the LCD
		void drawchar(/*uint8_t *buff,*/ uint8_t col, uint8_t row, uint8_t data);

		// this method draws a filled rectangle on the LCD
		void fillrect(/*uint8_t *buff,*/ uint8_t col, uint8_t row, uint8_t width, 
			uint8_t height, uint8_t fill);

		// this method draws a string of characters on the LCD
		void drawstring(/*uint8_t *buff,*/ uint8_t col, uint8_t row, uint8_t *str);

		// this method clears the buffer
		void clear_buffer(/*uint8_t *buffer*/);

		// this method initializes the SPI interface
		void spi_init(void);

		// this method writes data to the LCD
		void spiwrite(uint8_t data);

		// this method sets up the LCD for writing
		void setup_lcd(void);

		// this method sets up the LCD to prepare it for writing
		void lcd_init(void);

		// this method sends a command to the LCD
		void lcd_command(uint8_t data);

		// this method sends raw data to the LCD
		void lcd_data(uint8_t data);

		// this method sets the brightness of the LCD
		void lcd_set_brightness(uint8_t val);

		// this method clears the LCD
		//void clear_screen(void);

		// this method writes the LCD buffer to the LCD
		void write_buffer(/*uint8_t *buffer*/);

	public:
		LCD (void);

		void LCDTask (void);
};

#endif